{"pageProps":{"libId":"date-components","componentId":"range-calendar","readmeContent":"<!--GITHUB_BLOCK-->\n\n# RangeCalendar\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {RangeCalendar} from '@gravity-ui/date-components';\n```\n\n`RangeCalendar` 是一个强大、灵活且用户友好的用户界面组件，专为选择一系列日期而设计。它使用 React 构建，结合了日历和日期范围选择器的功能，使其成为需要用户输入开始和结束日期的应用程序的理想选择。如果设置 `value` 属性，则可以对其进行控制。或者，如果你不设置任何值，它可能会不受控制，但在这种情况下，你可以使用可选属性 `defaultValue`管理初始状态。默认情况下，组件不受控制。\n\n### 有用的补充\n\n要以正确的格式设置日期，您可能需要包括 D [ate Util](https://gravity-ui.com/libraries/date-utils) s 库中的其他助手\n\n```tsx\nimport {dateTimeParse, dateTime} from '@gravity-ui/date-utils';\n```\n\n<!--LANDING_BLOCK\n\n> [!NOTE]\n> Row with \"Selected range: ...\" is not a part of the component. It was added to examples only for clarity.\n\nLANDING_BLOCK-->\n\n## 大小\n\n要控制大小， `RangeCalendar` 请使用该 `size` 属性。默认大小为 `m`。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<RangeCalendar size=\"m\" />\n<RangeCalendar size=\"l\" />\n<RangeCalendar size=\"xl\" />\n`}\n>\n    <DateComponentsExamples.RangeCalendarExample size=\"m\" />\n    <DateComponentsExamples.RangeCalendarExample size=\"l\" />\n    <DateComponentsExamples.RangeCalendarExample size=\"xl\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<RangeCalendar size=\"m\" />\n<RangeCalendar size=\"l\" />\n<RangeCalendar size=\"xl\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 价值\n\n### 最小值和最大值\n\n该 `minValue` 属性允许您指定用户可以输入的最早日期和时间。相反，该 `maxValue` 属性指定了可以输入的最新日期和时间。用户的所有其他值都将被禁用。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<RangeCalendar minValue={dateTimeParse('01.01.2024')} maxValue={dateTimeParse('01.01.2025')} />\n`}\n>\n    <DateComponentsExamples.RangeCalendarExample minValue={'01.01.2024'} maxValue={'01.01.2025'}/>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<RangeCalendar minValue={dateTimeParse('01.01.2024')} maxValue={dateTimeParse('01.01.2025')} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 模式\n\n定义 `RangeCalendar` 应显示的时间间隔。有了它， `mode` 你可以以可控的方式进行选择。对于不受控制的方式，您无需指定任何值。你也可以使用 `defaultMode` 道具以不受控制的方式设置初始模式。\n\n`days` -的默认模式 `RangeCalendar`。它显示一个月中的天数。\n\n`months` -显示一年中的月份\n\n`quarters` -按年显示季度（不可作为数值提供 `defaultMode`）\n\n`years` -显示几年的选择时间\n\n你可以使用 prop 来限制已启用的模式 `modes`。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<RangeCalendar defaultMode=\"months\"/>\n`}\n>\n    <DateComponentsExamples.RangeCalendarExample defaultMode=\"months\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<RangeCalendar defaultMode=\"months\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 国家\n\n### 已禁用\n\n您不希望用户能够与组件交互的状态。 `RangeCalendar`\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<RangeCalendar\n  disabled={true}\n  defaultValue={{start: dateTime().add({days: 2}), end: dateTime().subtract({days: 2})}}\n/>\n`}\n>\n    <DateComponentsExamples.RangeCalendarWithDefaultValueExample disabled={true} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<RangeCalendar\n  disabled={true}\n  defaultValue={{start: dateTime().add({days: 2}), end: dateTime().subtract({days: 2})}}\n/>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 只读\n\n`readOnly` 是一个布尔属性，当设置为 true 时，该 `RangeCalendar` 组件对用户来说是不可变的。这意味着，虽然输入将显示其当前值，但用户将无法对其进行更改。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<RangeCalendar\n  readOnly={true}\n  defaultValue={{start: dateTime().add({days: 2}), end: dateTime().subtract({days: 2})}}\n/>\n`}\n>\n    <DateComponentsExamples.RangeCalendarWithDefaultValueExample readOnly={true} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<RangeCalendar\n  readOnly={true}\n  defaultValue={{start: dateTime().add({days: 2}), end: dateTime().subtract({days: 2})}}\n/>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 聚焦价值\n\n允许选择 `RangeCalendar` 视图聚焦的日期。如果你需要对其进行控制，你应该使用 `focusedValue` 道具。您可以使用可选 prop `defaultFocusedValue` 为不受控制的组件设置初始焦点值。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<RangeCalendar\n  defaultFocusedValue={dateTimeParse('01.01.2020')} defaultValue={{start: dateTime().add({days: 2}), end: dateTime().subtract({days: 2})}}\n/>\n`}\n>\n    <DateComponentsExamples.RangeCalendarWithDefaultValueExample defaultFocusedValue={'01.01.2020'} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<RangeCalendar\n  defaultFocusedValue={dateTimeParse('01.01.2020')}\n  defaultValue={{start: dateTime().add({days: 2}), end: dateTime().subtract({days: 2})}}\n/>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 时区\n\n`timeZone` 是设置输入中值的时区的属性。[了解有关时区的更多信息](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List)\n\n## 属性\n\n| 姓名                                  | 描述                                                                                                  |                         类型                         |                            默认                             |\n| :------------------------------------ | :---------------------------------------------------------------------------------------------------- | :--------------------------------------------------: | :---------------------------------------------------------: |\n| 咏叹调描述者                          | 控件的 `aria-describedby` 属性                                                                        |                       `string`                       |                                                             |\n| aria-详细信息                         | 控件的 `aria-details` 属性                                                                            |                       `string`                       |                                                             |\n| aria-label                            | 控件的 `aria-label` 属性                                                                              |                       `string`                       |                                                             |\n| aria-labelledby                       | 控件的 `aria-labelledby` 属性                                                                         |                       `string`                       |                                                             |\n| autoFocus                             | 控件的 `autofocus` 属性                                                                               |                      `boolean`                       |                                                             |\n| className                             | 控件的包装器类名                                                                                      |                       `string`                       |                                                             |\n| [defaultFocusedValue](#focused-value) | 日历首次挂载时聚焦的日期（不受控制）                                                                  |                      `DateTime`                      |                                                             |\n| [defaultMode](#mode)                  | 在日历中显示的初始模式                                                                                |                    `days` `years`                    |                                                             |\n| [defaultValue](#value)                | 设置非受控组件的初始值。                                                                              |                `RangeValue<DateTime>`                |                                                             |\n| [已禁用](#disabled)                   | 表示用户无法与控件进行交互                                                                            |                      `boolean`                       |                           `false`                           |\n| [focusedValue](#focused-value)        | 设置包含此值的非受控组件的默认视图                                                                    |                  `DateTime` `null`                   |                                                             |\n| id                                    | 控件的 `id` 属性                                                                                      |                       `string`                       |                                                             |\n| isDateUnavailable                     | 为日历的每个日期调用的回调。如果返回 true，则该日期不可用。                                           |           `((date: DateTime) => boolean)`            |                                                             |\n| isWeekend                             | 为日历的每个日期调用的回调。如果返回 true，则日期为周末。                                             |           `((date: DateTime) => boolean)`            |                                                             |\n| [maxValue](#min-and-max-value)        | 用户可以选择的最大允许日期。                                                                          |                      `DateTime`                      |                                                             |\n| [minValue](#min-and-max-value)        | 用户可以选择的最小允许日期。                                                                          |                      `DateTime`                      |                                                             |\n| [模式](#mode)                         | 定义 `RangeCalendar` 应以 coltrolled 方式显示的时间间隔。                                             |                    `days` `years`                    |                                                             |\n| 模式                                  | 可供用户使用的模式                                                                                    |    `局部的<Record<RangeCalendarLayout, boolean>>`    | `{days: true, months: true, quarters: false, years: true }` |\n| onBlur                                | 当控件失去对焦时触发。提供焦点事件作为回调的参数                                                      |     `(e:FocusEvent<Element, Element>) => 无效)`      |                                                             |\n| onFocus                               | 当控件获得焦点时触发。提供焦点事件作为回调的参数                                                      |     `(e:FocusEvent<Element, Element>) => 无效)`      |                                                             |\n| onFocusUpdate                         | 当控件的聚焦日期发生变化时触发。                                                                      |             `((date: DateTime) => void)`             |                                                             |\n| onUpdate                              | 当值发生变化时触发。                                                                                  |             `((value: DateTime) => void`             |                                                             |\n| onUpdateMode                          | 模式更改时触发。                                                                                      | `（值：'天数'\\| '月'\\| '四分之一'\\| 'years) = 空白>` |                                                             |\n| [readOnly](#readonly)                 | 日历值是否不可变。                                                                                    |                      `boolean`                       |                           `false`                           |\n| [大小](#size)                         | 控件的大小                                                                                            |                     `\"m\"` `\"xl\"`                     |                            `\"m\"`                            |\n| 风格                                  | 为元素设置行内样式。                                                                                  |                   `CSSProperties`                    |                                                             |\n| [timeZone](#time-zone)                | 设置时区。[了解有关时区的更多信息](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) |                       `string`                       |                                                             |\n| [价值](#calendar)                     | 控件的价值                                                                                            |                   `RangeValuenull`                   |                                                             |\n","_nextI18Next":{"initialI18nStore":{"zh":{"common":{"pageNotFound":"页面未找到","pageNotFoundDescription":"您正在寻找的页面不存在或已被移动。","backToHome":"返回首页","actions_open":"打开","actions_copyToClipboard":"复制到剪贴板","actions_share":"分享","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"游乐场","menu_libraries":"图书馆","menu_components":"组件","menu_design":"设计","menu_editor":"编辑器","menu_icons":"图标","menu_themer":"主题","roadmap_inProgress":"进行中","navigation_previous":"以前","navigation_next":"下一步","emptySearchPlaceholder":"什么都没找到","show_more":"显示更多","show_less":"少显示"},"component":{"actions_openInFigma":"在 Figma 中打开","title":"组件","searchPlaceholder":"按组件名称搜索","color-input_validation-format-error":"格式不正确","maintainers_one":"维护者：","maintainers_other":"维护者：","maintainers":"维护者：","theme":"切换主题","rtlOn":"开启 RTL","rtlOff":"关闭 RTL","rtlNotSupported":"不支持 RTL"},"libraries-info":{"description_uikit":"用于使用 Gravity 构建服务的基础用户界面组件和令牌。","description_components":"一组复杂的 React 组件。","description_icons":"为您的项目设置数百种不同的现代 SVG 图标。","description_illustrations":"一组用于显示数据状态的插图。","description_dynamic-forms":"用于渲染 JSON 架构描述的简洁实用的反应表单的库","description_page-constructor":"一组时尚的功能区块，用于快速创建促销和登录页面。","description_blog-constructor":"一个基于页面构造器库的库，用于创建类似博客的服务。","description_chartkit":"与我们的设计系统集成的数据可视化套件。","description_dashkit":"用于构建交互式仪表板的网格组件。","description_yagr":"基于 UpLot 的高性能画布图表渲染器。","description_nodekit":"适用于 Node.js 应用程序、脚本和库的简单工具包。","description_expresskit":"与 NodeKit 集成的轻量级 express.js 包装器。","description_app-layout":"我们的 SPA 应用程序中使用的 HTML 布局生成器。","description_app-builder":"我们的 SPA 应用程序中使用的基于 Webpack 的静态资产生成器。","description_navigation":"适用于复杂服务的紧凑且可扩展的导航面板。","description_date-utils":"用于管理日期和时间值的助手。","description_date-components":"各种日期组件。","description_axios-wrapper":"Axios 封装器，可自动取消并发请求。","description_dialog-fields":"一个 react-final-final-final-form 包装器，为构建表单提供了一些有用的高级组件。","description_paranoid":"集群拓扑可视化工具。","description_react-data-table":"一个用于渲染大型复杂表格的反应组件。","description_unipika":"数据格式库。","description_ui-logger":"简单的客户端记录器。","description_oauth-clients":"客户端 OAuth 库，在身份验证流程之上提供便捷的抽象。","description_i18n":"Gravity UI 项目的国际化助手。","description_eslint-config":"Gravity UI 项目的 ESLint 配置预设。","description_tsconfig":"Gravity UI 项目的 TypeScript 编译器配置","description_prettier-config":"Gravity UI 项目的更漂亮的配置预设。","description_stylelint-config":"Gravity UI 项目的 Stylelint 配置预设。","description_babel-preset":"Gravity UI 项目的 Babel 配置预设。","description_browserslist-config":"我们的服务中使用的浏览器列表配置预设。","description_markdown-editor":"一款与 Markdown 合作的强大工具，它结合了所见即所得和标记模式。","description_graph":"具有动态比例感知细节的高性能图形渲染器","description_data-source":"围绕数据获取的封装工具。","description_webpack-i18n-assets-plugin":"一个 Webpack 插件，用目标文本替换对本地化函数 (i18n) 的调用。","description_table":"用于以表格格式可视化数据的库。"}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"zh","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}