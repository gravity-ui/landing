{"pageProps":{"libId":"date-components","componentId":"date-picker","readmeContent":"<!--GITHUB_BLOCK-->\n\n# DatePicker\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {DatePicker} from '@gravity-ui/date-components';\n```\n\n`DatePicker` 是一个复杂、轻量级且完全可自定义的组件，旨在在 React 应用程序中提供直观的日期选择功能。它在构建时考虑了用户体验和易于集成，可无缝地融入表单、模态或任何需要输入日期的用户界面元素。如果设置 `value` 属性，则可以对其进行控制。或者，如果你不设置任何值，它可能会不受控制，但在这种情况下，你可以使用可选属性 `defaultValue`管理初始状态。默认情况下，组件不受控制。\n\n### 有用的补充\n\n要以正确的格式设置日期，您可能需要包括 D [ate Util](https://gravity-ui.com/libraries/date-utils) s 库中的其他助手\n\n```tsx\nimport {dateTimeParse, dateTime} from '@gravity-ui/date-utils';\n```\n\n## 外观\n\n的 `DatePicker` 外观由 `size` 、 `view` 和 `pin` 属性控制。\n\n### 大小\n\n要控制大小， `DatePicker` 请使用该 `size` 属性。默认大小为 `m`。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker size=\"s\" />\n<DatePicker size=\"m\" />\n<DatePicker size=\"l\" />\n<DatePicker size=\"xl\" />\n`}\n>\n    <DateComponents.DatePicker size=\"s\" />\n    <DateComponents.DatePicker size=\"m\" />\n    <DateComponents.DatePicker size=\"l\" />\n    <DateComponents.DatePicker size=\"xl\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker size=\"s\" />\n<DatePicker size=\"m\" />\n<DatePicker size=\"l\" />\n<DatePicker size=\"xl\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 查看\n\n`normal` -的主视图 `DatePicker` （默认使用）。\n\n<!--LANDING_BLOCK\n<ExampleBlock code={`<DatePicker />`}>\n    <DateComponents.DatePicker />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n`clear` - `DatePicker` 无可见边框的视图（可与自定义包装一起使用）\n\n<!--LANDING_BLOCK\n<ExampleBlock code={`<DatePicker view=\"clear\" />`}>\n    <DateComponents.DatePicker view=\"clear\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker view=\"normal\" />\n<DatePicker view=\"clear\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 别针\n\n该 `pin` 属性允许您控制左右边缘的形状，通常用于将多个控件组合成一个单元。\n该 `pin` 属性的值由左边的样式名称除以短划线组成，例如 `\"round-brick\"`。\n边缘样式为： `round` （默认） `circle` 、 `brick` 和 `clear`。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker pin=\"round-brick\" />\n<DatePicker pin=\"brick-brick\" />\n<DatePicker pin=\"brick-round\" />\n`}\n>\n    <DateComponents.DatePicker pin=\"round-brick\" />\n    <DateComponents.DatePicker pin=\"brick-brick\" />\n    <DateComponents.DatePicker pin=\"brick-round\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker pin=\"round-brick\" />\n<DatePicker pin=\"brick-brick\" />\n<DatePicker pin=\"brick-round\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 价值\n\n### 最小值和最大值\n\n该 `minValue` 属性允许您指定用户可以输入的最早日期和时间。相反，该 `maxValue` 属性指定了可以输入的最新日期和时间。如果你输入的值超出这个边界组件，它的视图就会改变，就像在验证状态无效的情况下一样。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker minValue={dateTimeParse('01.01.2024')} placeholder={\"minValue: '01.01.2024'\"}/>\n<DatePicker maxValue={dateTimeParse('01.01.2025')} placeholder={\"maxValue: '01.01.2025'\"}/>\n`}\n>\n    <DateComponentsExamples.DatePickerExample minValue={'01.01.2024'} placeholder={\"minValue: '01.01.2024'\"} />\n    <DateComponentsExamples.DatePickerExample maxValue={'01.01.2025'} placeholder={\"maxValue: '01.01.2025'\"} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n\n<DatePicker minValue={dateTimeParse('01.01.2024')} />\n<DatePicker maxValue={dateTimeParse('01.01.2025')} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 国家\n\n### 已禁用\n\n您不希望用户能够与组件交互的状态。 `DatePicker`\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker disabled={true} defaultValue={dateTime()} />\n`}\n>\n    <DateComponentsExamples.DatePickerExample disabled={true} defaultValue={new Date()} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker disabled defaultValue={dateTime()} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 只读\n\n`readOnly` 是一个布尔属性，当设置为 true 时，该 `DatePicker` 组件对用户来说是不可变的。这意味着，虽然输入将显示其当前值，但用户将无法对其进行更改。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker readOnly defaultValue={dateTimeParse(new Date())} />\n`}\n>\n    <DateComponentsExamples.DatePickerExample readOnly defaultValue={new Date()} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker readOnly defaultValue={dateTime()} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 错误\n\n您要指明用户输入错误的状态。 `DatePicker`要更改 `DatePicker` 外观，请使用带有 `\"invalid\"` 值的 `validationState` 属性。可以通过该 `errorMessage` 属性添加可选的消息文本。消息文本将在组件下方呈现。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker errorMessage=\"Error message\" validationState=\"invalid\" />\n<DatePicker validationState=\"invalid\" />\n`}\n>\n    <DateComponents.DatePicker errorMessage=\"Error message\" validationState=\"invalid\" />\n    <DateComponents.DatePicker validationState=\"invalid\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker errorMessage=\"Error message\" validationState=\"invalid\" />\n<DatePicker validationState=\"invalid\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 其他内容\n\n### 占位符\n\n这个道具允许你提供一个简短的提示来描述输入字段的预期值。此提示在用户输入值之前显示在输入字段中，并在输入文本时消失。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker placeholder=\"Placeholder\" />\n`}\n>\n    <DateComponents.DatePicker placeholder='Placeholder' />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker placeholder=\"Placeholder\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 标签\n\n允许您将标签放在字段的左侧。标签占用的宽度不能超过整个空间宽度的一半 `DatePicker`。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker label=\"Label\" />\n<DatePicker label=\"Very long label with huge amount of symbols\" />\n`}\n>\n    <DateComponents.DatePicker label=\"Label\" />\n    <DateComponents.DatePicker label=\"Very long label with huge amount of symbols\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker label=\"Label\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### “清除” 按钮\n\n`hasClear` 是一个布尔道具，它使用户能够快速清除输入字段的内容。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`<DatePicker hasClear />`}\n>\n    <DateComponents.DatePicker\n        hasClear\n    />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker hasClear />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 格式\n\n`format` prop 是一个字符串，用于定义 `DatePicker` 组件将接受和显示的日期和时间格式。这个属性决定了如何直观地向用户呈现日期和时间，以及如何格式化用户的输入。[可用格式](https://day.js.org/docs/en/display/format)\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker format='LL' />\n`}\n>\n    <DateComponents.DatePicker format='LL' />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker format=\"LL\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 时区\n\n`timeZone` 是设置输入中值的时区的属性。[了解有关时区的更多信息](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List)\n\n## 定制\n\n如果你想在里面使用自定义日历组件， `DatePicker` 你可以把它和日历类似 props 一样传递。 `children`\n\n<!--LANDING_BLOCK\n[Learn more about calendar](https://gravity-ui.com/components/date-components/calendar)\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n[了解有关日历的更多信息](https://github.com/gravity-ui/date-components/blob/main/src/components/Calendar/README.md)\n\n<!--/GITHUB_BLOCK-->\n\n## 属性\n\n| 姓名                           | 描述                                                                                                  |                    类型                     |           默认            |\n| :----------------------------- | :---------------------------------------------------------------------------------------------------- | :-----------------------------------------: | :-----------------------: |\n| 咏叹调描述者                   | 控件的 `aria-describedby`。标识描述对象的一个或多个元素。属性                                         |                  `string`                   |                           |\n| aria-详细信息                  | 控件的 `aria-details`。标识为对象提供详细扩展描述的一个或多个元素。属性                               |                  `string`                   |                           |\n| aria-label                     | 控件的 `aria-label`。定义标记当前元素的字符串值。属性                                                 |                  `string`                   |                           |\n| aria-labelledby                | 控件的 `aria-labelledby`。标识标记当前元素的一个或多个元素。属性                                      |                  `string`                   |                           |\n| autoFocus                      | 控件的 `autofocus`。元素是否应该在 render. 属性上获得焦点                                             |                  `boolean`                  |                           |\n| className                      | 控件的包装器类名                                                                                      |                  `string`                   |                           |\n| [defaultValue](#datepicker)    | 设置非受控组件的初始值。                                                                              |                 `DateTime`                  |                           |\n| [已禁用](#disabled)            | 表示用户无法与控件进行交互                                                                            |                  `boolean`                  |          `false`          |\n| [errorMessage](#error)         | 错误文本                                                                                              |                 `ReactNode`                 |                           |\n| [格式](#format)                | 在输入中呈现时的日期格式。[可用格式](https://day.js.org/docs/en/display/format)                       |                  `string`                   |                           |\n| [hasClear](#clear-button)      | 显示用于清除控件值的图标                                                                              |                  `boolean`                  |          `false`          |\n| id                             | 控件的 `id` 属性                                                                                      |                  `string`                   |                           |\n| isDateUnavailable              | 为日历的每个日期调用的回调。如果返回 true，则该日期不可用。                                           |       `((date: DateTime) => boolean)`       |                           |\n| [标签](#label)                 | 在输入节点左侧呈现的帮助文本                                                                          |                  `string`                   |                           |\n| [maxValue](#min-and-max-value) | 用户可以选择的最大允许日期。                                                                          |                 `DateTime`                  |                           |\n| [minValue](#min-and-max-value) | 用户可以选择的最小允许日期。                                                                          |                 `DateTime`                  |                           |\n| onBlur                         | 当控件失去对焦时触发。提供焦点事件作为回调的参数                                                      | `(e:FocusEvent<Element, Element>) => 无效)` |                           |\n| onFocus                        | 当控件获得焦点时触发。提供焦点事件作为回调的参数                                                      | `(e:FocusEvent<Element, Element>) => 无效)` |                           |\n| onKeyDown                      | 按下按键时触发。提供键盘事件作为回调的参数                                                            |    `(e:keyboardEvent<Element>) = void)>`    |                           |\n| onKeyUp                        | 释放密钥时触发。提供键盘事件作为回调的参数                                                            |    `(e:keyboardEvent<Element>) = void)>`    |                           |\n| onUpdate                       | 当用户更改该值时触发。提供新值作为回调的参数                                                          |      `（值：日期时间\\| null) => 无效`       |                           |\n| [别针](#pin)                   | 拐角处的圆角                                                                                          |               `TextInputPin`                |      `'round-round'`      |\n| [占位符](#placeholder)         | 未设置值时在控件中显示的文本                                                                          |                  `string`                   |                           |\n| placeholderValue               | 一个占位符日期，用于控制用户首次与每个区段互动时的默认值。                                            |                 `DateTime`                  | `today's date at midnigh` |\n| [readOnly](#readonly)          | 组件的值是否不可变。                                                                                  |                  `boolean`                  |          `false`          |\n| [大小](#size)                  | 控件的大小                                                                                            |                `\"s\"` `\"xl\"`                 |           `\"m\"`           |\n| 风格                           | 为元素设置行内样式。                                                                                  |               `CSSProperties`               |                           |\n| [timeZone](#time-zone)         | 设置时区。[了解有关时区的更多信息](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) |                  `string`                   |                           |\n| [validationState](#error)      | 验证状态                                                                                              |                 `\"invalid\"`                 |                           |\n| [价值](#datepicker)            | 控件的价值                                                                                            |              `DateTime` `null`              |                           |\n| [观点](#view)                  | 控件视图                                                                                              |            `\"normal\"` `\"clear\"`             |        `\"normal\"`         |\n","_nextI18Next":{"initialI18nStore":{"zh":{"common":{"pageNotFound":"页面未找到","pageNotFoundDescription":"您正在寻找的页面不存在或已被移动。","backToHome":"返回首页","actions_open":"打开","actions_copyToClipboard":"复制到剪贴板","actions_share":"分享","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"游乐场","menu_libraries":"图书馆","menu_components":"组件","menu_design":"设计","menu_editor":"编辑器","menu_icons":"图标","menu_themer":"主题","roadmap_inProgress":"进行中","navigation_previous":"以前","navigation_next":"下一步","emptySearchPlaceholder":"什么都没找到","show_more":"显示更多","show_less":"少显示"},"component":{"actions_openInFigma":"在 Figma 中打开","title":"组件","searchPlaceholder":"按组件名称搜索","color-input_validation-format-error":"格式不正确","maintainers_one":"维护者：","maintainers_other":"维护者：","maintainers":"维护者：","theme":"切换主题","rtlOn":"开启 RTL","rtlOff":"关闭 RTL","rtlNotSupported":"不支持 RTL"},"libraries-info":{"description_uikit":"用于使用 Gravity 构建服务的基础用户界面组件和令牌。","description_components":"一组复杂的 React 组件。","description_icons":"为您的项目设置数百种不同的现代 SVG 图标。","description_illustrations":"一组用于显示数据状态的插图。","description_dynamic-forms":"用于渲染 JSON 架构描述的简洁实用的反应表单的库","description_page-constructor":"一组时尚的功能区块，用于快速创建促销和登录页面。","description_blog-constructor":"一个基于页面构造器库的库，用于创建类似博客的服务。","description_chartkit":"与我们的设计系统集成的数据可视化套件。","description_dashkit":"用于构建交互式仪表板的网格组件。","description_yagr":"基于 UpLot 的高性能画布图表渲染器。","description_nodekit":"适用于 Node.js 应用程序、脚本和库的简单工具包。","description_expresskit":"与 NodeKit 集成的轻量级 express.js 包装器。","description_app-layout":"我们的 SPA 应用程序中使用的 HTML 布局生成器。","description_app-builder":"我们的 SPA 应用程序中使用的基于 Webpack 的静态资产生成器。","description_navigation":"适用于复杂服务的紧凑且可扩展的导航面板。","description_date-utils":"用于管理日期和时间值的助手。","description_date-components":"各种日期组件。","description_axios-wrapper":"Axios 封装器，可自动取消并发请求。","description_dialog-fields":"一个 react-final-final-final-form 包装器，为构建表单提供了一些有用的高级组件。","description_paranoid":"集群拓扑可视化工具。","description_react-data-table":"一个用于渲染大型复杂表格的反应组件。","description_unipika":"数据格式库。","description_ui-logger":"简单的客户端记录器。","description_oauth-clients":"客户端 OAuth 库，在身份验证流程之上提供便捷的抽象。","description_i18n":"Gravity UI 项目的国际化助手。","description_eslint-config":"Gravity UI 项目的 ESLint 配置预设。","description_tsconfig":"Gravity UI 项目的 TypeScript 编译器配置","description_prettier-config":"Gravity UI 项目的更漂亮的配置预设。","description_stylelint-config":"Gravity UI 项目的 Stylelint 配置预设。","description_babel-preset":"Gravity UI 项目的 Babel 配置预设。","description_browserslist-config":"我们的服务中使用的浏览器列表配置预设。","description_markdown-editor":"一款与 Markdown 合作的强大工具，它结合了所见即所得和标记模式。","description_graph":"具有动态比例感知细节的高性能图形渲染器","description_data-source":"围绕数据获取的封装工具。","description_webpack-i18n-assets-plugin":"一个 Webpack 插件，用目标文本替换对本地化函数 (i18n) 的调用。","description_table":"用于以表格格式可视化数据的库。"}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"zh","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}