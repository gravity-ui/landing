{"pageProps":{"libId":"uikit","componentId":"table","readmeContent":"<!--GITHUB_BLOCK-->\n\n## 桌子\n\n<!--/GITHUB_BLOCK-->\n\n```jsx\nimport {Table} from '@gravity-ui/uikit';\n```\n\nA `Table` 允许对行进行选择和排序，以及对行执行操作。\n\n<!--GITHUB_BLOCK-->\n\n其他功能可通过 HOC 启用：\n\n- [withTableActions](#usage-with-hoc-withtableactions)\n- [withTableCopy](#usage-with-hoc-withtablecopy)\n- [withTableSelection](#usage-with-hoc-withtableselection)\n- [withTableSettings](#usage-with-hoc-withtablesettings)\n- [withTableSorting](#usage-with-hoc-withtablesorting)\n\n<!--/GITHUB_BLOCK-->\n\n## 属性\n\n| 姓名                             | 描述                                                                                                     |                                       类型                                       |    默认     |\n| :------------------------------- | :------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------: | :---------: |\n| 数据                             | 数据                                                                                                     |                                     `any[]`                                      |             |\n| 列                               | 列设置                                                                                                   |                              `TableColumnConfig[]`                               |             |\n| verticalAlign                    | 内容的垂直对齐                                                                                           |                                `\"top\"` `\"middle\"`                                |             |\n| getRowDescriptor                 | 获取行描述符的处理程序                                                                                   |                  `(item: any, index: number) => DescriptorType`                  |             |\n| getRowId                         | 选择和排序行时使用的行 ID。如果您跳过一行，其 ID 将是行数据中与列 ID 同名的字段的值。                    |                `string` `((item: any, index: number) => string)`                 |             |\n| getRowClassNames                 | 行 CSS 类                                                                                                |                     `(item: any, index: number) => string[]`                     |             |\n| isRowDisabled                    | 禁用列的条件                                                                                             |                     `(item: any, index: number) => boolean`                      |             |\n| onRowClick                       | 行点击处理器                                                                                             | `（项目：任意，索引：数字，事件：react.mouseEvent<HTMLTableRowElement>) = 无效>` |             |\n| onRowMouseEnter                  | Row 鼠标输入处理器                                                                                       | `（项目：任意，索引：数字，事件：react.mouseEvent<HTMLTableRowElement>) = 无效>` |             |\n| onRowMouseLeave                  | Row mouseLeave 处理器                                                                                    | `（项目：任意，索引：数字，事件：react.mouseEvent<HTMLTableRowElement>) = 无效>` |             |\n| emptyMessage                     | 如果数据丢失，则返回一条消息                                                                             |                                     `string`                                     | `\"No data\"` |\n| className                        | 表 CSS 类                                                                                                |                                     `string`                                     |             |\n| edgePadding                      | 为边缘单元格添加水平边距                                                                                 |                                    `boolean`                                     |             |\n| stickyHorizontalScroll           | 在表格中添加水平粘滞滚动。注意：表格不能同时具有固定高度和粘性滚动。如果表格有溢出，则粘性滚动不起作用。 |                                    `boolean`                                     |   `false`   |\n| stickyHorizontalScrollBreakpoint | 在使滚动粘合之前，父方块应达到的阈值。这在控制台中很有用，例如当 `groupActions` 栏与滚动条重叠时。       |                                     `number`                                     |     `0`     |\n\n### DescriptorType\n\n| 姓名       | 描述                      |    类型    | 默认 |\n| :--------- | :------------------------ | :--------: | :--: |\n| id         | 选择和排序行时使用的行 ID |  `string`  |      |\n| 残疾的     | 禁用列的条件              | `boolean`  |      |\n| 互动的     | 显示行悬停                | `boolean`  |      |\n| classNames | 行 CSS 类                 | `string[]` |      |\n\n### TableColumnConfig\n\n| 姓名      | 描述                                                               |                            类型                            |           默认           |\n| :-------- | :----------------------------------------------------------------- | :--------------------------------------------------------: | :----------------------: |\n| id        | 列 ID                                                              |                          `string`                          |                          |\n| 名称      | 列名（标题）                                                       |             `string` `(() => React.ReactNode)`             |          列 ID           |\n| className | 将添加到列中所有单元格的 CSS 类                                    |                          `string`                          |                          |\n| 占位符    | 单元格中没有数据时存根                                             | `string` `((item: any, index: number) => React.ReactNode)` |      `— (&mdash;)`       |\n| 模板      | 单元格内容。如果您跳过一行，则单元格内容将是与该行同名的字段的值。 | `string` `((item: any, index: number) => React.ReactNode)` | 名称等于列 ID 的字段的值 |\n| 对齐      | 内容对齐                                                           |                     `\"start\"` `\"end\"`                      |                          |\n| 粘        | 置顶专栏                                                           |                     `\"start\"` `\"end\"`                      |                          |\n| 主要的    | 将一列标识为主列而不是其他列                                       |                         `boolean`                          |                          |\n| 宽度      | 列的内容宽度（以像素为单位）                                       |                     `number` `string`                      |                          |\n| 元        | 其他数据，包括 HOC 设置                                            |                    `记录<string, any>`                     |                          |\n\n## 与 `withTableActions` HOC `Table` 一起使用\n\n此 HOC 向表列添加了一个带有操作的特殊列。\n\n### 属性\n\n| 姓名             | 描述                       |                           类型                           |\n| :--------------- | :------------------------- | :------------------------------------------------------: |\n| getRowActions    | 每行的操作配置数组         |   `(item: any, index: number) => TableActionConfig[]`    |\n| renderRowActions | 动作单元的渲染函数         | `(props: {item: any; index: number}) => React.ReactNode` |\n| rowActionsSize   | 操作按钮和弹出菜单项的大小 |                       `\"s\"` `\"xl\"`                       |\n\n### TableActionConfig\n\n```ts\ntype TableActionConfig = TableAction | TableActionGroup;\n```\n\n#### TableAction\n\n| 姓名   | 描述                                         |                 类型                 |    默认    |\n| :----- | :------------------------------------------- | :----------------------------------: | :--------: |\n| 文本   | 文本                                         |               `string`               |            |\n| 处理者 | 点击处理器                                   | `(item: any, index: number) => void` |            |\n| 残疾的 | 操作已禁用                                   |              `boolean`               |            |\n| href   | 具有此属性的菜单项将成为指向指定位置的链接。 |               `string`               |            |\n| 目标   | 与 `<a>` 标签的 `target` 属性相同。          |               `string`               |            |\n| 真实   | 与 `<a>` 标签的 `rel` 属性相同。             |               `string`               |            |\n| 主题   | 主题                                         |        `\"normal\"` `\"danger\"`         | `\"normal\"` |\n| 图标   | 显示在文本旁边的图标                         |          `React.ReactNode`           |            |\n\n#### TableActionGroup\n\n| 姓名 | 描述       |         类型          |\n| :--- | :--------- | :-------------------: |\n| 标题 | 操作组标题 |       `string`        |\n| 项目 | 操作组物品 | `TableActionConfig[]` |\n\n### 示例\n\n```jsx\nimport {Table, withTableActions} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst getRowActions = () => {\n  return [\n    {\n      text: 'Print',\n      handler: () => {},\n    },\n    {\n      text: 'Remove',\n      handler: () => {},\n      theme: 'danger',\n    },\n  ];\n};\n\nconst table = <MyTable data={data} columns={columns} getRowActions={getRowActions} />;\n```\n\n```jsx\nimport {Table, withTableActions, RenderRowActionsProps} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\ntype Item = {id: number, text: string};\n\nconst data: Item[] = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\n\nconst RowAction = ({item}: RenderRowActionsProps<Item>) => {\n  return <React.Fragment>{`Action for - ${item.text}`}</React.Fragment>;\n};\n\nconst table = <MyTable data={data} columns={columns} renderRowActions={RowAction} />;\n```\n\n## 与 `withTableCopy` HOC `Table` 一起使用\n\n此 HOC 允许复制单元格的内容或任何其他文本。\n\n### ColumnMeta\n\n| 姓名 | 描述                                                  |                        类型                        |\n| :--- | :---------------------------------------------------- | :------------------------------------------------: |\n| 复制 | 要复制的文本。如果该值为 true，则允许复制单元格内容。 | `boolean` `((item: any, index: number) => number)` |\n\n### 示例\n\n```jsx\nimport {Table, withTableCopy} from '@gravity-ui/uikit';\n\nconst MyTable = withTableCopy(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [\n  {id: 'id', meta: {copy: ({id}) => `ID #${id}`}},\n  {id: 'text', meta: {copy: true}},\n];\n\nconst table = <MyTable data={data} columns={columns} />;\n```\n\n## 与 `withTableSelection` HOC `Table` 一起使用\n\n此 HOC 允许选择表行。\n\n### 属性\n\n| 姓名              | 描述               |           类型            |\n| :---------------- | :----------------- | :-----------------------: |\n| selectedIds       | 所选行             |        `string[]`         |\n| onSelectionChange | 选定的行更改处理器 | `(ids: string[]) => void` |\n\n### 示例\n\n```jsx\nimport {Table, withTableSelection} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSelection(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst getRowId = 'id';\n\nfunction SelectionTable() {\n  const [selectedIds, setSelectedIds] = React.useState([1]);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      getRowId={getRowId}\n      selectedIds={selectedIds}\n      onSelectionChange={setSelectedIds}\n    />\n  );\n}\n```\n\n## 与 `withTableSettings` HOC `Table` 一起使用\n\n此 HOC 启用了表列设置的功能。你可以通过两种方式使用它：\n\n```jsx\nimport {Table, withTableSettings} from './withTableSettings';\n\n// No options passed\nconst MyTable1 = withTableSettings(Table);\n// or with options\nconst MyTable1 = withTableSettings({sortable: false})(Table);\n```\n\n### 选项\n\n| 姓名   | 描述                   |       类型       |  默认   |\n| :----- | :--------------------- | :--------------: | :-----: |\n| 宽度   | 设置弹出窗口宽度       | `number` `\"fit\"` |         |\n| 可排序 | 启用或禁用排序设置项目 |    `boolean`     | `true`  |\n| 可过滤 | 启用或禁用筛选设置项目 |    `boolean`     | `false` |\n\n### ColumnMeta\n\n| 姓名              | 描述                                         |   类型    |  默认   |\n| :---------------- | :------------------------------------------- | :-------: | :-----: |\n| selectedByDefault | 如果设置中缺少某列，则启用或禁用选择该列     | `boolean` | `true`  |\n| selectedAlways    | 使该列始终处于选中状态。您无法更改其可见性。 | `boolean` | `false` |\n\n### 属性\n\n| 姓名                       | 描述                             |                           类型                           |\n| :------------------------- | :------------------------------- | :------------------------------------------------------: |\n| settingsPopupWidth         | `TableColumnSetup` 弹出窗口宽度  |                     `number` `\"fit\"`                     |\n| 设置                       | 当前设置                         |                   `TableSettingsData`                    |\n| updateSettings             | 设置更新处理器                   |      `（数据：TableSettingsData) = Promise><void>`       |\n| renderControls             | 启用呈现自定义动作               |                     `RenderControls`                     |\n| settingsFilterPlaceholder  | 未设置搜索值时显示在控件中的文本 |                         `string`                         |\n| settingsFilterEmptyMessage | 找不到商品时显示的文本           |                         `string`                         |\n| filterSettings             | 筛选物品的功能                   | `(value: string, item: TableColumnSetupItem) => boolean` |\n\n### TableSettingsData\n\n```ts\ntype TableSettingsData = Array<{\n  id: string;\n  isSelected?: boolean;\n}>;\n```\n\n### RenderControls\n\n```ts\ntype RenderControls = (params: {\n  DefaultApplyButton: React.ComponentType;\n  onApply: () => void;\n}) => React.ReactNode;\n```\n\n### 示例\n\n```jsx\nimport {Table, withTableSettings} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSettings({width: 100, sortable: false})(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst initialSettings = [\n  {id: 'id', isSelected: false},\n  {id: 'text', isSelected: true},\n];\n\nfunction SelectionTable() {\n  const [settings, setSettings] = React.useState(initialSettings);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      settings={settings}\n      updateSettings={(settings) => {\n        setSettings(settings);\n        return Promise.resolve();\n      }}\n      renderControls={({DefaultApplyButton, onApply}) => (\n        <Flex gapRow=\"1\" direction=\"column\">\n          <Button\n            view=\"outlined-warning\"\n            onClick={() => {\n              onApply();\n              setSettings(initialSettings);\n            }}\n          >\n            Reset\n          </Button>\n          <DefaultApplyButton />\n        </Flex>\n      )}\n    />\n  );\n}\n```\n\n## 与 `withTableSorting` HOC `Table` 一起使用\n\n此 HOC 支持列排序。\n\n### ColumnMeta\n\n| 姓名             | 描述                                                                                        |                       类型                       | 默认  |\n| :--------------- | :------------------------------------------------------------------------------------------ | :----------------------------------------------: | :---: |\n| defaultSortOrder | 设置主要排序顺序                                                                            |                 `\"asc\"` `\"desc\"`                 | `asc` |\n| 分类             | 排序功能。它应该返回一个按升序排序的值。如果设置为 true，则单元格值将按升序进行比较和排序。 | `boolean` `((itemA: any, itemB: any) => number)` |       |\n\n### 属性\n\n| 姓名              | 描述                       |                 类型                  |\n| :---------------- | :------------------------- | :-----------------------------------: |\n| defaultSortState  | 不受控制组件的默认排序状态 |           `TableSortState`            |\n| sortState         | 排序状态                   |           `TableSortState`            |\n| onSortStateChange | 排序状态更改句柄           | `(sortState: TableSortState) => void` |\n\n如果缺少 `sortState` 和 `onSortStateChange` 属性，则排序状态存储在组件本身中。\n\n### TableSortState\n\n```ts\ntype TableSortState = Array<{\n  column: string;\n  order: 'asc' | 'desc';\n}>;\n```\n\n### 示例\n\n```jsx\nimport {Table, withTableSorting} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSorting(Table);\nconst data = [\n  {id: 1, text: 'Hello', date: '2016-10-25'},\n  {id: 2, text: 'World', date: '2020-08-15'},\n];\nconst columns = [\n  {id: 'id', meta: {sort: true}},\n  {\n    id: 'text',\n    meta: {defaultSortOrder: 'desc', sort: (a, b) => Date.parse(a.date) - Date.parse(b.date)},\n  },\n];\n\nconst table = <MyTable data={data} columns={columns} />;\n```\n","_nextI18Next":{"initialI18nStore":{"zh":{"common":{"pageNotFound":"页面未找到","pageNotFoundDescription":"您正在寻找的页面不存在或已被移动。","backToHome":"返回首页","actions_open":"打开","actions_copyToClipboard":"复制到剪贴板","actions_share":"分享","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"游乐场","menu_libraries":"图书馆","menu_components":"组件","menu_design":"设计","menu_editor":"编辑器","menu_icons":"图标","menu_themer":"主题","roadmap_inProgress":"进行中","navigation_previous":"以前","navigation_next":"下一步","emptySearchPlaceholder":"什么都没找到","show_more":"显示更多","show_less":"少显示"},"component":{"actions_openInFigma":"在 Figma 中打开","title":"组件","searchPlaceholder":"按组件名称搜索","color-input_validation-format-error":"格式不正确","maintainers_one":"维护者：","maintainers_other":"维护者：","maintainers":"维护者：","theme":"切换主题","rtlOn":"开启 RTL","rtlOff":"关闭 RTL","rtlNotSupported":"不支持 RTL"},"libraries-info":{"description_uikit":"用于使用 Gravity 构建服务的基础用户界面组件和令牌。","description_components":"一组复杂的 React 组件。","description_icons":"为您的项目设置数百种不同的现代 SVG 图标。","description_illustrations":"一组用于显示数据状态的插图。","description_dynamic-forms":"用于渲染 JSON 架构描述的简洁实用的反应表单的库","description_page-constructor":"一组时尚的功能区块，用于快速创建促销和登录页面。","description_blog-constructor":"一个基于页面构造器库的库，用于创建类似博客的服务。","description_chartkit":"与我们的设计系统集成的数据可视化套件。","description_dashkit":"用于构建交互式仪表板的网格组件。","description_yagr":"基于 UpLot 的高性能画布图表渲染器。","description_nodekit":"适用于 Node.js 应用程序、脚本和库的简单工具包。","description_expresskit":"与 NodeKit 集成的轻量级 express.js 包装器。","description_app-layout":"我们的 SPA 应用程序中使用的 HTML 布局生成器。","description_app-builder":"我们的 SPA 应用程序中使用的基于 Webpack 的静态资产生成器。","description_navigation":"适用于复杂服务的紧凑且可扩展的导航面板。","description_date-utils":"用于管理日期和时间值的助手。","description_date-components":"各种日期组件。","description_axios-wrapper":"Axios 封装器，可自动取消并发请求。","description_dialog-fields":"一个 react-final-final-final-form 包装器，为构建表单提供了一些有用的高级组件。","description_paranoid":"集群拓扑可视化工具。","description_react-data-table":"一个用于渲染大型复杂表格的反应组件。","description_unipika":"数据格式库。","description_ui-logger":"简单的客户端记录器。","description_oauth-clients":"客户端 OAuth 库，在身份验证流程之上提供便捷的抽象。","description_i18n":"Gravity UI 项目的国际化助手。","description_eslint-config":"Gravity UI 项目的 ESLint 配置预设。","description_tsconfig":"Gravity UI 项目的 TypeScript 编译器配置","description_prettier-config":"Gravity UI 项目的更漂亮的配置预设。","description_stylelint-config":"Gravity UI 项目的 Stylelint 配置预设。","description_babel-preset":"Gravity UI 项目的 Babel 配置预设。","description_browserslist-config":"我们的服务中使用的浏览器列表配置预设。","description_markdown-editor":"一款与 Markdown 合作的强大工具，它结合了所见即所得和标记模式。","description_graph":"具有动态比例感知细节的高性能图形渲染器","description_data-source":"围绕数据获取的封装工具。","description_webpack-i18n-assets-plugin":"一个 Webpack 插件，用目标文本替换对本地化函数 (i18n) 的调用。","description_table":"用于以表格格式可视化数据的库。"}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"zh","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}