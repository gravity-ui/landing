{"pageProps":{"libId":"uikit","componentId":"select","readmeContent":"<!--GITHUB_BLOCK-->\n\n# 选择\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Select} from '@gravity-ui/uikit';\n```\n\n`Select` 是一个控件，提供用户可以选择的选项列表。\n\n## 选项\n\n可供选择的选项。\n\n### 定义选项\n\n您可以将选项定义为对象数组或组件的子组件。第一种方法对于选项需要复杂准备以及可能需要记忆的情况很有用。当选项很少并且它们的配置不需要复杂的计算时，第二个很方便。\n\n#### 平面清单\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"value\"\n  options={[\n    {value: 'val_1', content: 'Value 1'},\n    {value: 'val_2', content: 'Value 2'},\n    {value: 'val_3', content: 'Value 3'},\n    {value: 'val_4', content: 'Value 4'},\n  ]}\n/>\n<Select placeholder=\"value\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <div>\n    Array of objects\n    <UIKit.Select placeholder=\"value\"\n      options={[\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ]}\n    />\n  </div>\n  <div>\n    Child nodes\n    <UIKit.Select placeholder=\"value\">\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n// Array of objects\n<Select\n  placeholder=\"value\"\n  options={[\n    {value: 'val_1', content: 'Value 1'},\n    {value: 'val_2', content: 'Value 2'},\n    {value: 'val_3', content: 'Value 3'},\n    {value: 'val_4', content: 'Value 4'},\n  ]}\n/>\n// Child nodes\n<Select placeholder=\"value\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n#### 分组清单\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"value\"\n  options={[\n    {\n      label: 'Group 1',\n      options: [\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n      ],\n    },\n    {\n      label: 'Group 2',\n      options: [\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ],\n    },\n  ]}\n/>\n<Select placeholder=\"value\">\n  <Select.OptionGroup label=\"Group 1\">\n    <Select.Option value=\"val_1\" content=\"Value 1\" />\n    <Select.Option value=\"val_2\" content=\"Value 2\" />\n  </Select.OptionGroup>\n  <Select.OptionGroup label=\"Group 2\">\n    <Select.Option value=\"val_3\" content=\"Value 3\" />\n    <Select.Option value=\"val_4\" content=\"Value 4\" />\n  </Select.OptionGroup>\n</Select>\n`}\n>\n  <div>\n    Array of objects\n    <UIKit.Select\n      placeholder=\"value\"\n      options={[\n        {\n          label: 'Group 1',\n          options: [\n            {value: 'val_1', content: 'Value 1'},\n            {value: 'val_2', content: 'Value 2'},\n          ],\n        },\n        {\n          label: 'Group 2',\n          options: [\n            {value: 'val_3', content: 'Value 3'},\n            {value: 'val_4', content: 'Value 4'},\n          ],\n        },\n      ]}\n    />\n  </div>\n  <div>\n    Child nodes\n    <UIKit.Select placeholder=\"value\">\n      <UIKit.Select.OptionGroup label=\"Group 1\">\n        <UIKit.Select.Option value=\"val_1\" content=\"Value 1\" />\n        <UIKit.Select.Option value=\"val_2\" content=\"Value 2\" />\n      </UIKit.Select.OptionGroup>\n      <UIKit.Select.OptionGroup label=\"Group 2\">\n        <UIKit.Select.Option value=\"val_3\" content=\"Value 3\" />\n        <UIKit.Select.Option value=\"val_4\" content=\"Value 4\" />\n      </UIKit.Select.OptionGroup>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n// Array of objects\n<Select\n  placeholder=\"value\"\n  options={[\n    {\n      label: 'Group 1',\n      options: [\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n      ],\n    },\n    {\n      label: 'Group 2',\n      options: [\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ],\n    },\n  ]}\n/>\n// Child nodes\n<Select placeholder=\"value\">\n  <Select.OptionGroup label=\"Group 1\">\n    <Select.Option value=\"val_1\" content=\"Value 1\" />\n    <Select.Option value=\"val_2\" content=\"Value 2\" />\n  </Select.OptionGroup>\n  <Select.OptionGroup label=\"Group 2\">\n    <Select.Option value=\"val_3\" content=\"Value 3\" />\n    <Select.Option value=\"val_4\" content=\"Value 4\" />\n  </Select.OptionGroup>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 将数据存储在选项中\n\n您可以使用该 `option.data` 属性在每个选项中定义和存储唯一数据。当您在使用 `onUpdate` 回调时需要丰富数据时，或者例如，在使用绘制选项时，这可能很有用 `renderOption`。\n\n## 选择多个选项\n\n要启用多项选择，请使用该 `multiple` 属性。它的默认值是 `false`。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select multiple={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select multiple={true} placeholder=\"values\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select multiple={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 计数器\n\n您可以使用该 `hasCounter` 属性将所选项目的计数器添加到组件中。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select multiple={true} hasCounter={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select multiple={true} hasCounter={true} placeholder=\"values\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select multiple={true} hasCounter={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 筛选选项\n\n要启用筛选分区，请使用该 `filterable` 属性。它的默认值是 `false`。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select filterable={true} placeholder=\"Filterable\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select filterable={true} placeholder=\"Filterable\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select filterable={true} placeholder=\"Filterable\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 大小\n\n要管理默认控件和选项大小，请使用该 `size` 属性。它的默认大小是 `m`。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select size=\"s\" placeholder=\"S Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"m\" placeholder=\"M Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"l\" placeholder=\"L Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"xl\" placeholder=\"XL Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select size=\"s\" placeholder=\"S Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"m\" placeholder=\"M Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"l\" placeholder=\"L Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"xl\" placeholder=\"XL Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select size=\"s\" placeholder=\"S Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"m\" placeholder=\"M Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"l\" placeholder=\"L Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"xl\" placeholder=\"XL Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## 控制宽度\n\n默认情况下，控件宽度会拉伸以匹配所选选项内容的宽度。您可以使用以下 `width` 属性对其进行管理：\n\n`'max'`:拉伸到父项的全宽。\n\n`number`:应用以像素为单位的宽度。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select width=\"max\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select width={150}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <UIKit.Select multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Max</h4>\n    <UIKit.Select width=\"max\" multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <UIKit.Select width={110} multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## 弹出窗口宽度\n\n您可以使用该 `popupWidth` 属性管理弹出窗口的宽度。可用值为：\n\n`'fit'`:应用控制宽度。\n\n`number`:应用以像素为单位的宽度。\n\n关于默认行为的注意事项：\n\n- 弹出窗口的宽度等于最宽选项的宽度，但不超过 `90vw`。这不适用于您使用 [虚拟化的](#virtualized-list)情况。\n\n- 缩小选项会被拉伸以适应控件的宽度。\n\n<!--LANDING_BLOCK\n\n### Non-virtualized list\n\nA regular list when all the elements are in the dom tree at once.\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\">\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Fit</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth=\"fit\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth=\"fit\">\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth={80}>\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth={80}>\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n### 虚拟化列表\n\n为了以最佳方式显示大量选项， `Select` 内置列表虚拟化工具。在超过选项数量的阈值（`50` 默认情况下）后，将启用虚拟化。您可以使用该 `virtualizationThreshold` 属性管理此值。\n\n使用虚拟化时，一些限制适用于弹出式元素：\n\n- 弹出窗口的宽度不再调整为最长选项的长度。\n\n- 弹出窗口的最小宽度等于控件的宽度，或者 `100px` 如果控件较短。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\">\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\">\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Loooooooooooooooooooong Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth={80}>\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth={80}>\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Loooooooooooooooooooong Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## 高级用法\n\n有很多方法可以自定义 `Select`.\n\n### 渲染自定义控件\n\n要呈现自定义控件，请使用该 `renderControl` 属性。\n注意：你应该将所有参数转发到你的节点，以启用一致的行为，就像使用默认控件时一样。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderControl={({onClick, onKeyDown, ref}) => {\n    return <button ref={ref} onClick={onClick} extraProps={{onKeyDown}}>Custom control</button>\n  }}\n>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select renderControl={({onClick, onKeyDown, ref}) => {\n    return <button ref={ref} onClick={onClick} extraProps={{onKeyDown}}>Custom control</button>\n  }}>\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {Button} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderControl: SelectProps['renderControl'] = ({onClick, onKeyDown, ref}) => {\n    return (\n      <Button\n        ref={ref}\n        onClick={onClick}\n        extraProps={{\n          onKeyDown,\n        }}\n      >\n        Your control\n      </Button>\n    );\n  };\n\n  return <Select renderControl={renderControl}>/* Your options here */</Select>;\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 渲染自定义过滤器分区\n\n要呈现自定义滤镜部分，请使用该 `renderFilter` 属性并将该 `filterable` 属性设置为 `true`。\n注意：您需要将所有参数转发到您的节点才能启用正常运行的过滤器，就像使用默认配置一样。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"Custom filter\"\n  filterable={true}\n  renderFilter={({onChange, onKeyDown, ref, value}) => {\n    return (\n      <div style={{display: 'flex', flexDirection: 'column'}}>\n        <input\n          ref={ref}\n          value={value}\n          size=\"1\"\n          onKeyDown={onKeyDown}\n          onChange={(e) => onChange(e.target.value)}\n        />\n        <button>Do smth</button>\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom filter\"\n    filterable={true}\n    renderFilter={({onChange, onKeyDown, ref, value}) => {\n      return (\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n          <input\n            ref={ref}\n            value={value}\n            size=\"1\"\n            onKeyDown={onKeyDown}\n            onChange={(e) => onChange(e.target.value)}\n          />\n          <button>Do smth</button>\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {Button, TextInput} from '@gravity-ui/uikit';\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderFilter: SelectProps['renderFilter'] = (props) => {\n    const {value, ref, onChange, onKeyDown} = props;\n\n    return (\n      <div>\n        <TextInput\n          controlRef={ref}\n          controlProps={{size: 1}}\n          value={value}\n          onUpdate={onChange}\n          onKeyDown={onKeyDown}\n        />\n        <Button>Do smth</Button>\n      </div>\n    );\n  };\n\n  return (\n    <Select filterable={true} renderFilter={renderFilter}>\n      /* Your options here */\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 呈现自定义选项\n\n要呈现自定义选项，请使用以下 `renderOption` 属性：\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderOption={(option) => {\n    return (\n      <div style={{color: option.data.color}}>\n        {option.children}\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom options\"\n    renderOption={(option) => {\n      return (\n        <div style={{color: option.data.color}}>\n          {option.children}\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderOption: SelectProps['renderOption'] = (option) => {\n    return <div style={{color: option.data.color}}>{option.children}</div>;\n  };\n\n  return (\n    <Select renderOption={renderOption}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 呈现自定义选定选项\n\n要呈现自定义选定选项，请使用以下 `renderSelectedOption` 属性：\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderSelectedOption={(option) => {\n    return (\n      <div style={{color: option.data.color}}>\n        {option.children}\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom selected options\"\n    renderSelectedOption={(option) => {\n      return (\n        <div style={{color: option.data.color}}>\n          {option.children}\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderSelectedOption: SelectProps['renderSelectedOption'] = (option) => {\n    return <div style={{color: option.data.color}}>{option.children}</div>;\n  };\n\n  return (\n    <Select renderSelectedOption={renderSelectedOption}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 不同高度的渲染选项\n\n根据 `size` 属性，期权的高度是固定的。如果需要渲染不同高度的选项，则可以使用该 `option.data` 属性。它将存储有关您需要为选项设置的高度以及设置此值的 `getOptionHeight` 属性的信息。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  getOptionHeight={(option) => option.data.height}\n>\n  <Select.Option value=\"val_1\" data={{height: 20}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{height: 40}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{height: 60}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{height: 80}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Different heights\"\n    getOptionHeight={(option) => option.data.height}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{height: 20}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{height: 40}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{height: 60}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{height: 80}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const getOptionHeight: SelectProps['getOptionHeight'] = (option) => option.data.height;\n\n  return (\n    <Select getOptionHeight={getOptionHeight}>\n      <Select.Option value=\"val_1\" data={{height: 20}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{height: 40}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{height: 60}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{height: 80}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 呈现自定义弹出窗口\n\n要呈现自定义弹出窗口，请使用该 `renderPopup` 属性。\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  filterable\n  placeholder=\"Custom popup\"\n  renderPopup={({renderList, renderFilter}) => {\n    return (\n      <React.Fragment>\n        {renderFilter()}\n        <div style={{width: \"100%\", height: \"20px\", backgroundColor: \"tomato\"}} />\n        {renderList()}\n      </React.Fragment>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    filterable\n    placeholder=\"Custom popup\"\n    renderPopup={({renderList, renderFilter}) => {\n      return (\n        <React.Fragment>\n          {renderFilter()}\n          <div style={{width: \"100%\", height: \"20px\", backgroundColor: \"tomato\"}} />\n          {renderList()}\n        </React.Fragment>\n  );\n}}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst renderPopup: SelectProps['renderPopup'] = ({renderList, renderFilter}) => {\n  return (\n    <React.Fragment>\n      {renderFilter()}\n      <div className=\"CustomElement\" />\n      {renderList()}\n    </React.Fragment>\n  );\n};\n\nconst MyComponent = () => {\n  return (\n    <Select filterable renderPopup={renderPopup}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### 错误\n\n此 `Select` 状态适用于不正确的用户输入。要更改外 `Select` 观，请使用带有 `\"invalid\"` 值的 `validationState` 属性。或者，您可以通过该 `errorMessage` 属性提供错误消息。默认情况下，消息文本在组件外部呈现。\n您可以使用该 `errorPlacement` 属性对其进行更改。\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Select\n    placeholder=\"Placeholder\"\n    errorMessage=\"Error message\"\n    validationState=\"invalid\"\n>\n    <Select.Option value=\"val_1\">Value 1</Select.Option>\n    <Select.Option value=\"val_2\">Value 2</Select.Option>\n    <Select.Option value=\"val_3\">Value 3</Select.Option>\n    <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select\n    placeholder=\"Placeholder\"\n    errorPlacement=\"inside\"\n    errorMessage=\"Error message\"\n    validationState=\"invalid\"\n>\n    <Select.Option value=\"val_1\">Value 1</Select.Option>\n    <Select.Option value=\"val_2\">Value 2</Select.Option>\n    <Select.Option value=\"val_3\">Value 3</Select.Option>\n    <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n    <UIKit.Select placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n    <UIKit.Select placeholder=\"Placeholder\" errorPlacement=\"inside\" errorMessage=\"Error message\" validationState=\"invalid\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n## 属性\n\n| 姓名                                                      | 描述                                                                              | 类型                                    | 默认                                                     |\n| :-------------------------------------------------------- | :-------------------------------------------------------------------------------- | :-------------------------------------- | :------------------------------------------------------- |\n| className                                                 | 控制类名                                                                          | `string`                                |                                                          |\n| defaultValue                                              | 在使用不受控制状态时代表所选选项的默认值                                          | `string[]`                              |                                                          |\n| 残疾的                                                    | 表明用户无法使用该控件                                                            | `boolean`                               | `false`                                                  |\n| [可过滤](#filtering-options)                              | 显示选择弹出窗口有过滤器部分                                                      | `boolean`                               | `false`                                                  |\n| filterOption                                              | 用于比较选项和过滤器                                                              | `function`                              |                                                          |\n| filterPlaceholder                                         | 默认过滤器输入占位符文本                                                          | `string`                                |                                                          |\n| [getOptionHeight](#render-options-with-different-heights) | 用于设置自定义用户选项的高度                                                      | `function`                              |                                                          |\n| getOptionGroupHeight                                      | 用于设置自定义用户选项组的高度                                                    | `function`                              |                                                          |\n| hasClear                                                  | 启用显示用于清除所选选项的图标                                                    | `boolean`                               | `false`                                                  |\n| id                                                        | `id` HTML 属性                                                                    | `string`                                |                                                          |\n| 标签                                                      | 控制标签                                                                          | `string`                                |                                                          |\n| 加载中                                                    | 将加载项添加到选项列表的末尾。选项列表为空时，其工作原理类似于永久加载指示器。    | `boolean`                               |                                                          |\n| [多个](#selecting-multiple-options)                       | 显示是否可以在列表中选择多个选项                                                  | `boolean`                               | `false`                                                  |\n| 名称                                                      | 控件的名称                                                                        | `string`                                |                                                          |\n| onBlur                                                    | 元素失去焦点时调用的处理程序。                                                    | `function`                              |                                                          |\n| 过滤                                                      | 受控的过滤器值                                                                    | `string`                                | `''`                                                     |\n| onFilterChange                                            | 每次更换过滤器后都会触发                                                          | `function`                              |                                                          |\n| onFocus                                                   | 元素获得焦点时调用的处理程序                                                      | `function`                              |                                                          |\n| onLoadMore                                                | 加载指示器可见时触发                                                              | `function`                              |                                                          |\n| onOpenChange                                              | 每次更改弹出窗口可见性后都会触发                                                  | `function`                              |                                                          |\n| onUpdate                                                  | 当用户提交对 `Select` 值的更改时触发                                              | `function`                              |                                                          |\n| [选项](#options)                                          | 可供选择的选项                                                                    | `（选择选项\\| [选择选项组)]`            |                                                          |\n| 大头针                                                    | 控制边框视图                                                                      | `string`                                | `'round-round'`                                          |\n| 占位符                                                    | 占位符文本                                                                        | `string`                                |                                                          |\n| popupClassName                                            | 带有选项列表的弹出窗口 `className`                                                | `string`                                |                                                          |\n| popupPlacement                                            | 弹出窗口放置                                                                      | `PopupPlacement` `数组<PopupPlacement>` | `['bottom-start', 'bottom-end', 'top-start', 'top-end']` |\n| [popupWidth](#popup-width)                                | 弹出窗口宽度                                                                      | `数字\\| '适合'\\| '服装'`                | `'outfit'`                                               |\n| qa                                                        | 测试 ID 属性 (`data-qa`)                                                          | `string`                                |                                                          |\n| [renderControl](#render-custom-control)                   | 用于呈现用户控件                                                                  | `function`                              |                                                          |\n| renderEmptyOptions                                        | 用于为空选项列表渲染节点                                                          | `function`                              |                                                          |\n| [renderFilter](#render-custom-filter-section)             | 用于渲染用户筛选器部分                                                            | `function`                              |                                                          |\n| [renderOption](#render-custom-options)                    | 用于呈现用户选项                                                                  | `function`                              |                                                          |\n| renderOptionGroup                                         | 用于呈现用户选项组                                                                | `function`                              |                                                          |\n| [renderSelectedOption](#render-custom-selected-options)   | 用于呈现用户选择的选项                                                            | `function`                              |                                                          |\n| [renderPopup](#render-custom-popup)                       | 用于呈现用户弹出内容                                                              | `function`                              |                                                          |\n| [大小](#size)                                             | 控件/选项大小                                                                     | `string`                                | `'m'`                                                    |\n| 价值                                                      | 代表所选选项的值                                                                  | `string[]`                              |                                                          |\n| 观点                                                      | 控制视图                                                                          | `string`                                | `'normal'`                                               |\n| [virtualizationThreshold](#virtualized-list)              | 选项数阈值，超过该阈值后将启用虚拟化                                              | `number`                                | `50`                                                     |\n| [宽度](#control-width)                                    | 控制宽度                                                                          | `字符串\\| 数字`                         | `undefined`                                              |\n| errorMessage                                              | 错误文本                                                                          | `string`                                |                                                          |\n| errorPlacement                                            | 错误位置                                                                          | `outside` `inside`                      | `outside`                                                |\n| validationState                                           | 验证状态                                                                          | `\"invalid\"`                             |                                                          |\n| [hasCounter](#counter)                                    | 显示所选选项数。仅当启用 [多](#selecting-multiple-options) 选时，计数器才会出现。 | `boolean`                               |\n\n## CSS API\n\n| 姓名                             | 描述                               |\n| :------------------------------- | :--------------------------------- |\n| `--g-select-focus-outline-color` | 聚焦时的轮廓颜色（默认情况下缺失） |\n","_nextI18Next":{"initialI18nStore":{"zh":{"common":{"pageNotFound":"页面未找到","pageNotFoundDescription":"您正在寻找的页面不存在或已被移动。","backToHome":"返回首页","actions_open":"打开","actions_copyToClipboard":"复制到剪贴板","actions_share":"分享","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"游乐场","menu_libraries":"图书馆","menu_components":"组件","menu_design":"设计","menu_editor":"编辑器","menu_icons":"图标","menu_themer":"主题","roadmap_inProgress":"进行中","navigation_previous":"以前","navigation_next":"下一步","emptySearchPlaceholder":"什么都没找到","show_more":"显示更多","show_less":"少显示"},"component":{"actions_openInFigma":"在 Figma 中打开","title":"组件","searchPlaceholder":"按组件名称搜索","color-input_validation-format-error":"格式不正确","maintainers_one":"维护者：","maintainers_other":"维护者：","maintainers":"维护者：","theme":"切换主题","rtlOn":"开启 RTL","rtlOff":"关闭 RTL","rtlNotSupported":"不支持 RTL"},"libraries-info":{"description_uikit":"用于使用 Gravity 构建服务的基础用户界面组件和令牌。","description_components":"一组复杂的 React 组件。","description_icons":"为您的项目设置数百种不同的现代 SVG 图标。","description_illustrations":"一组用于显示数据状态的插图。","description_dynamic-forms":"用于渲染 JSON 架构描述的简洁实用的反应表单的库","description_page-constructor":"一组时尚的功能区块，用于快速创建促销和登录页面。","description_blog-constructor":"一个基于页面构造器库的库，用于创建类似博客的服务。","description_chartkit":"与我们的设计系统集成的数据可视化套件。","description_dashkit":"用于构建交互式仪表板的网格组件。","description_yagr":"基于 UpLot 的高性能画布图表渲染器。","description_nodekit":"适用于 Node.js 应用程序、脚本和库的简单工具包。","description_expresskit":"与 NodeKit 集成的轻量级 express.js 包装器。","description_app-layout":"我们的 SPA 应用程序中使用的 HTML 布局生成器。","description_app-builder":"我们的 SPA 应用程序中使用的基于 Webpack 的静态资产生成器。","description_navigation":"适用于复杂服务的紧凑且可扩展的导航面板。","description_date-utils":"用于管理日期和时间值的助手。","description_date-components":"各种日期组件。","description_axios-wrapper":"Axios 封装器，可自动取消并发请求。","description_dialog-fields":"一个 react-final-final-final-form 包装器，为构建表单提供了一些有用的高级组件。","description_paranoid":"集群拓扑可视化工具。","description_react-data-table":"一个用于渲染大型复杂表格的反应组件。","description_unipika":"数据格式库。","description_ui-logger":"简单的客户端记录器。","description_oauth-clients":"客户端 OAuth 库，在身份验证流程之上提供便捷的抽象。","description_i18n":"Gravity UI 项目的国际化助手。","description_eslint-config":"Gravity UI 项目的 ESLint 配置预设。","description_tsconfig":"Gravity UI 项目的 TypeScript 编译器配置","description_prettier-config":"Gravity UI 项目的更漂亮的配置预设。","description_stylelint-config":"Gravity UI 项目的 Stylelint 配置预设。","description_babel-preset":"Gravity UI 项目的 Babel 配置预设。","description_browserslist-config":"我们的服务中使用的浏览器列表配置预设。","description_markdown-editor":"一款与 Markdown 合作的强大工具，它结合了所见即所得和标记模式。","description_graph":"具有动态比例感知细节的高性能图形渲染器","description_data-source":"围绕数据获取的封装工具。","description_webpack-i18n-assets-plugin":"一个 Webpack 插件，用目标文本替换对本地化函数 (i18n) 的调用。","description_table":"用于以表格格式可视化数据的库。"}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"zh","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}