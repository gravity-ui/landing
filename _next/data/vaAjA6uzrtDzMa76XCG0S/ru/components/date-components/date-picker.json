{"pageProps":{"libId":"date-components","componentId":"date-picker","readmeContent":"<!--GITHUB_BLOCK-->\n\n# DatePicker\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {DatePicker} from '@gravity-ui/date-components';\n```\n\n`DatePicker` is a sophisticated, lightweight, and fully customizable component designed to provide intuitive date picking functionality in your React applications. Built with user experience and ease of integration in mind, it fits seamlessly within forms, modals, or any UI element requiring date input. It can be controlled if you set `value` property. Or it can be uncontrolled if you don't set any value, but in this case you can manage the initial state with optional property `defaultValue`. Component is uncontrolled by default.\n\n### Useful addition\n\nTo set dates in the right format you may need to include additional helpers from [Date Utils library](https://gravity-ui.com/libraries/date-utils)\n\n```tsx\nimport {dateTimeParse, dateTime} from '@gravity-ui/date-utils';\n```\n\n## Appearance\n\nThe appearance of `DatePicker` is controlled by the `size`, `view` and `pin` properties.\n\n### Size\n\nTo control the size of the `DatePicker` use the `size` property. Default size is `m`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker size=\"s\" />\n<DatePicker size=\"m\" />\n<DatePicker size=\"l\" />\n<DatePicker size=\"xl\" />\n`}\n>\n    <DateComponents.DatePicker size=\"s\" />\n    <DateComponents.DatePicker size=\"m\" />\n    <DateComponents.DatePicker size=\"l\" />\n    <DateComponents.DatePicker size=\"xl\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker size=\"s\" />\n<DatePicker size=\"m\" />\n<DatePicker size=\"l\" />\n<DatePicker size=\"xl\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### View\n\n`normal` - the main view of `DatePicker` (used by default).\n\n<!--LANDING_BLOCK\n<ExampleBlock code={`<DatePicker />`}>\n    <DateComponents.DatePicker />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n`clear` - view of `DatePicker` without visible borders (can be used with a custom wrapper)\n\n<!--LANDING_BLOCK\n<ExampleBlock code={`<DatePicker view=\"clear\" />`}>\n    <DateComponents.DatePicker view=\"clear\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker view=\"normal\" />\n<DatePicker view=\"clear\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Pin\n\nThe `pin` property allows you to control the shape of the right and left edges and is usually used for combining multiple controls in a single unit.\nThe value of the `pin` property consists of left and edge style names divided by a dash, e.g. `\"round-brick\"`.\nThe edge styles are: `round` (default), `circle`, `brick` and `clear`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker pin=\"round-brick\" />\n<DatePicker pin=\"brick-brick\" />\n<DatePicker pin=\"brick-round\" />\n`}\n>\n    <DateComponents.DatePicker pin=\"round-brick\" />\n    <DateComponents.DatePicker pin=\"brick-brick\" />\n    <DateComponents.DatePicker pin=\"brick-round\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker pin=\"round-brick\" />\n<DatePicker pin=\"brick-brick\" />\n<DatePicker pin=\"brick-round\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Value\n\n### Min and max value\n\nThe `minValue` property allows you to specify the earliest date and time that can be entered by the user. Conversely, the `maxValue` property specifies the latest date and time that can be entered. If you input the value out of this bounds component changes it's view like in case of invalid validation state.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker minValue={dateTimeParse('01.01.2024')} placeholder={\"minValue: '01.01.2024'\"}/>\n<DatePicker maxValue={dateTimeParse('01.01.2025')} placeholder={\"maxValue: '01.01.2025'\"}/>\n`}\n>\n    <DateComponentsExamples.DatePickerExample minValue={'01.01.2024'} placeholder={\"minValue: '01.01.2024'\"} />\n    <DateComponentsExamples.DatePickerExample maxValue={'01.01.2025'} placeholder={\"maxValue: '01.01.2025'\"} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n\n<DatePicker minValue={dateTimeParse('01.01.2024')} />\n<DatePicker maxValue={dateTimeParse('01.01.2025')} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## States\n\n### Disabled\n\nThe state of the `DatePicker` where you don't want the user to be able to interact with the component.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker disabled={true} defaultValue={dateTime()} />\n`}\n>\n    <DateComponentsExamples.DatePickerExample disabled={true} defaultValue={new Date()} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker disabled defaultValue={dateTime()} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Readonly\n\n`readOnly` is a boolean attribute that, when set to true, makes the `DatePicker` component immutable to the user. This means that while the input will display its current value, users will not be able to change it.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker readOnly defaultValue={dateTimeParse(new Date())} />\n`}\n>\n    <DateComponentsExamples.DatePickerExample readOnly defaultValue={new Date()} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker readOnly defaultValue={dateTime()} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Error\n\nThe state of the `DatePicker` in which you want to indicate incorrect user input. To change `DatePicker` appearance, use the `validationState` property with the `\"invalid\"` value. An optional message text can be added via the `errorMessage` property. Message text will be rendered under the component.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker errorMessage=\"Error message\" validationState=\"invalid\" />\n<DatePicker validationState=\"invalid\" />\n`}\n>\n    <DateComponents.DatePicker errorMessage=\"Error message\" validationState=\"invalid\" />\n    <DateComponents.DatePicker validationState=\"invalid\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker errorMessage=\"Error message\" validationState=\"invalid\" />\n<DatePicker validationState=\"invalid\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Additional content\n\n### Placeholder\n\nThis prop allows you to provide a short hint that describes the expected value of the input field. This hint is displayed within the input field before the user enters a value, and it disappears upon the entry of text.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker placeholder=\"Placeholder\" />\n`}\n>\n    <DateComponents.DatePicker placeholder='Placeholder' />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker placeholder=\"Placeholder\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Label\n\nAllows you to place the label in the left part of the field. Label can take up no more than half the width of the entire space of `DatePicker`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker label=\"Label\" />\n<DatePicker label=\"Very long label with huge amount of symbols\" />\n`}\n>\n    <DateComponents.DatePicker label=\"Label\" />\n    <DateComponents.DatePicker label=\"Very long label with huge amount of symbols\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker label=\"Label\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Clear button\n\n`hasClear` is a boolean prop that, provides users with the ability to quickly clear the content of the input field.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`<DatePicker hasClear />`}\n>\n    <DateComponents.DatePicker\n        hasClear\n    />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker hasClear />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Format\n\nThe `format` prop is a string that defines the date and time format the `DatePicker` component will accept and display. This prop determines how the date and time are visually presented to the user and how the user's input is expected to be formatted. [Available formats](https://day.js.org/docs/en/display/format)\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<DatePicker format='LL' />\n`}\n>\n    <DateComponents.DatePicker format='LL' />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<DatePicker format=\"LL\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Custom Date Parser\n\nYou can provide a custom parser function to handle pasted date strings through the `parseDateFromString` prop. This is useful when you need to support specific date formats or custom parsing logic that differs from the default behavior.\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {dateTime} from '@gravity-ui/date-utils';\n\nconst customParser = (dateStr: string, format: string, timeZone?: string) => {\n  // Custom parsing logic\n  // For example, handle DD/MM/YYYY format specifically\n  if (dateStr.match(/^\\d{2}\\/\\d{2}\\/\\d{4}$/)) {\n    const [day, month, year] = dateStr.split('/');\n    return dateTime({input: `${year}-${month}-${day}`, timeZone});\n  }\n  // Fallback to default parsing\n  return dateTime({input: dateStr, format, timeZone});\n};\n\n<DatePicker parseDateFromString={customParser} />;\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Time zone\n\n`timeZone` is the property to set the time zone of the value in the input. [Learn more about time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List)\n\n## Customisation\n\nIf you want to use custom calendar component inside `DatePicker` you can pass it as `children` with calendar like props.\n\n<!--LANDING_BLOCK\n[Learn more about calendar](https://gravity-ui.com/components/date-components/calendar)\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n[Learn more about calendar](https://github.com/gravity-ui/date-components/blob/main/src/components/Calendar/README.md)\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n| Name                           | Description                                                                                                                                |                                 Type                                 |          Default          |\n| :----------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------: | :-----------------------: |\n| aria-describedby               | The control's `aria-describedby`. Identifies the element (or elements) that describes the object. attribute                                |                               `string`                               |                           |\n| aria-details                   | The control's `aria-details`. Identifies the element (or elements) that provide a detailed, extended description for the object. attribute |                               `string`                               |                           |\n| aria-label                     | The control's `aria-label`. Defines a string value that labels the current element. attribute                                              |                               `string`                               |                           |\n| aria-labelledby                | The control's `aria-labelledby`. Identifies the element (or elements) that labels the current element. attribute                           |                               `string`                               |                           |\n| autoFocus                      | The control's `autofocus`. Whether the element should receive focus on render. attribute                                                   |                              `boolean`                               |                           |\n| className                      | The control's wrapper class name                                                                                                           |                               `string`                               |                           |\n| [defaultValue](#datepicker)    | Sets the initial value for uncontrolled component.                                                                                         |                              `DateTime`                              |                           |\n| [disabled](#disabled)          | Indicates that the user cannot interact with the control                                                                                   |                              `boolean`                               |          `false`          |\n| [errorMessage](#error)         | Error text                                                                                                                                 |                             `ReactNode`                              |                           |\n| [format](#format)              | Format of the date when rendered in the input. [Available formats](https://day.js.org/docs/en/display/format)                              |                               `string`                               |                           |\n| [hasClear](#clear-button)      | Shows the icon for clearing control's value                                                                                                |                              `boolean`                               |          `false`          |\n| id                             | The control's `id` attribute                                                                                                               |                               `string`                               |                           |\n| isDateUnavailable              | Callback that is called for each date of the calendar. If it returns true, then the date is unavailable.                                   |                   `((date: DateTime) => boolean)`                    |                           |\n| [label](#label)                | Help text rendered to the left of the input node                                                                                           |                               `string`                               |                           |\n| [maxValue](#min-and-max-value) | The maximum allowed date that a user may select.                                                                                           |                              `DateTime`                              |                           |\n| [minValue](#min-and-max-value) | The minimum allowed date that a user may select.                                                                                           |                              `DateTime`                              |                           |\n| onBlur                         | Fires when the control lost focus. Provides focus event as a callback's argument                                                           |            `((e: FocusEvent<Element, Element>) => void)`             |                           |\n| onFocus                        | Fires when the control gets focus. Provides focus event as a callback's argument                                                           |            `((e: FocusEvent<Element, Element>) => void)`             |                           |\n| onKeyDown                      | Fires when a key is pressed. Provides keyboard event as a callback's argument                                                              |               `((e: KeyboardEvent<Element>) => void)`                |                           |\n| onKeyUp                        | Fires when a key is released. Provides keyboard event as a callback's argument                                                             |               `((e: KeyboardEvent<Element>) => void)`                |                           |\n| onUpdate                       | Fires when the value is changed by the user. Provides new value as an callback's argument                                                  |                 `((value: DateTime \\| null) => void`                 |                           |\n| parseDateFromString            | Custom parser function for parsing pasted date strings. If not provided, the default parser will be used.                                  | `((dateStr: string, format: string, timeZone?: string) => DateTime)` |                           |\n| [pin](#pin)                    | Corner rounding                                                                                                                            |                            `TextInputPin`                            |      `'round-round'`      |\n| [placeholder](#placeholder)    | Text that appears in the control when it has no value set                                                                                  |                               `string`                               |                           |\n| placeholderValue               | A placeholder date that controls the default values of each segment when the user first interacts with them.                               |                              `DateTime`                              | `today's date at midnigh` |\n| [readOnly](#readonly)          | Whether the component's value is immutable.                                                                                                |                              `boolean`                               |          `false`          |\n| [size](#size)                  | The size of the control                                                                                                                    |                       `\"s\"` `\"m\"` `\"l\"` `\"xl\"`                       |           `\"m\"`           |\n| style                          | Sets inline style for the element.                                                                                                         |                           `CSSProperties`                            |                           |\n| [timeZone](#time-zone)         | Sets the time zone. [Learn more about time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List)                       |                               `string`                               |                           |\n| [validationState](#error)      | Validation state                                                                                                                           |                             `\"invalid\"`                              |                           |\n| [value](#datepicker)           | The value of the control                                                                                                                   |                          `DateTime` `null`                           |                           |\n| [view](#view)                  | The view of the control                                                                                                                    |                         `\"normal\"` `\"clear\"`                         |        `\"normal\"`         |\n","_nextI18Next":{"initialI18nStore":{"ru":{"common":{"pageNotFound":"Страница не найдена","pageNotFoundDescription":"Страница, которую вы ищете, не существует или была перемещена.","backToHome":"Вернуться на главную","actions_open":"Открыть","actions_copyToClipboard":"Копировать в буфер обмена","actions_share":"Поделиться","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Библиотеки","menu_components":"Компоненты","menu_design":"Дизайн","menu_editor":"Редактор","menu_icons":"Иконки","menu_themer":"Темизатор","roadmap_inProgress":"В работе","navigation_previous":"Назад","navigation_next":"Далее","emptySearchPlaceholder":"Ничего не найдено","show_more":"Показать больше","show_less":"Показать меньше"},"component":{"actions_openInFigma":"Открыть в Figma","title":"Компоненты","searchPlaceholder":"Поиск по названию","color-input_validation-format-error":"Неверный формат","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Переключить тему","rtlOn":"Включить RTL","rtlOff":"Выключить RTL","rtlNotSupported":"RTL не поддерживается"},"libraries-info":{"description_uikit":"Базовые UI-компоненты и токены для построения сервисов с Gravity.","description_components":"Набор комплексных React-компонентов.","description_icons":"Сотни стильных иконок для ваших проектов.","description_illustrations":"Набор иллюстраций для отображения статусов данных.","description_dynamic-forms":"Библиотека для рендеринга лаконичных функциональных форм, описанных JSON-схемой.","description_page-constructor":"Набор стильно выглядящих функциональных блоков для быстрого создания промо-страниц.","description_blog-constructor":"Библиотека, основанная на Page Constructor, для создания блогов.","description_chartkit":"Библиотека визуализации данных, интегрированная с нашей дизайн‑системой.","description_dashkit":"Cетка компонентов для построения интерактивных дашбордов.","description_yagr":"Высокопроизводительная отрисовка canvas-графиков, основанная на uPlot.","description_nodekit":"Простой набор инструментов для приложений, скриптов и библиотек Node.js.","description_expresskit":"Легковесная надстройка для express.js, интегрируемая с NodeKit.","description_app-layout":"Генератор HTML-макета, используемый в одностраничных приложениях (SPA).","description_app-builder":"Основанный на Webpack сборщик статики, используемый в одностраничных приложениях (SPA).","description_navigation":"Компактная и расширяемая навигационная панель для сложных сервисов.","description_date-utils":"Библиотека для управления значениями даты и времени.","description_date-components":"Различные компоненты для работы с датами.","description_axios-wrapper":"Надстройка для axios, обеспечивающая автоматическую отмену конкурирующих запросов.","description_dialog-fields":"Надстройка для react-final-form, которая предоставляет полезные высокоуровневые компоненты для создания форм.","description_paranoid":"Визуализатор топологий кластера.","description_react-data-table":"React-компонент для рендеринга больших и сложных таблиц.","description_unipika":"Библиотека форматирования данных.","description_ui-logger":"Простой клиентский логгер.","description_oauth-clients":"Клиентская библиотека OAuth, обеспечивающая удобную абстракцию поверх аутентификации.","description_i18n":"Библиотека для интернационализации проектов Gravity UI.","description_eslint-config":"Пресет настройки ESLint для проектов Gravity UI.","description_tsconfig":"Пресет настройки компилятора TypeScript для проектов Gravity UI.","description_prettier-config":"Пресет настройки Prettier для проектов Gravity UI.","description_stylelint-config":"Пресет настройки Stylelint для проектов Gravity UI.","description_babel-preset":"Пресет настройки Babel для проектов Gravity UI.","description_browserslist-config":"Пресет настройки Browserslist для проектов Gravity UI.","description_markdown-editor":"Мощный инструмент для работы с Markdown, который сочетает в себе режимы WYSIWYG и разметки.","description_graph":"Библиотека для визуализации больших графов с динамическим уровнем детализации","description_data-source":"Библиотека-обертка над загрузкой данных.","description_webpack-i18n-assets-plugin":"Плагин для Webpack, который заменяет вызовы функций локализации (i18n) на целевые тексты.","description_table":"Библиотека для отображения таблиц."}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"ru","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}