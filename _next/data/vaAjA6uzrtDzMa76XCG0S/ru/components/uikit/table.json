{"pageProps":{"libId":"uikit","componentId":"table","readmeContent":"<!--GITHUB_BLOCK-->\n\n## Table (таблица)\n\n<!--/GITHUB_BLOCK-->\n\n```jsx\nimport {Table} from '@gravity-ui/uikit';\n```\n\nКомпонент `Table` позволяет выбирать и сортировать строки, а также выполнять действия с выбранной строкой.\n\n<!--GITHUB_BLOCK-->\n\nДополнительные функции подключаются через компоненты высшего порядка (HOC):\n\n- [withTableActions](#usage-with-hoc-withtableactions)\n- [withTableCopy](#usage-with-hoc-withtablecopy)\n- [withTableSelection](#usage-with-hoc-withtableselection)\n- [withTableSettings](#usage-with-hoc-withtablesettings)\n- [withTableSorting](#usage-with-hoc-withtablesorting)\n\n<!--/GITHUB_BLOCK-->\n\n## Свойства\n\n| Имя                              | Описание                                                                                                                                                                                                                              |                                        Тип                                         | Значение по умолчанию |\n| :------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :--------------------------------------------------------------------------------: | :-------------------: |\n| data                             | Данные.                                                                                                                                                                                                                               |                                      `any[]`                                       |                       |\n| columns                          | Настройки столбцов.                                                                                                                                                                                                                   |                               `TableColumnConfig[]`                                |                       |\n| verticalAlign                    | Выравнивание содержимого по вертикали.                                                                                                                                                                                                |                                 `\"top\"` `\"middle\"`                                 |                       |\n| getRowDescriptor                 | Обработчик для получения дескриптора строки.                                                                                                                                                                                          |                   `(item: any, index: number) => DescriptorType`                   |                       |\n| getRowId                         | Идентификатор строки, используемый при выборе и сортировке строк. Если пропустить строку, то идентификатор такой строки будет равен значению поля в данных строки с тем же именем, что и идентификатор столбца.                       |                 `string` `((item: any, index: number) => string)`                  |                       |\n| getRowClassNames                 | CSS-классы строки.                                                                                                                                                                                                                    |                      `(item: any, index: number) => string[]`                      |                       |\n| isRowDisabled                    | Условие блокировки столбцов.                                                                                                                                                                                                          |                      `(item: any, index: number) => boolean`                       |                       |\n| onRowClick                       | Обработчик клика (`click`) по строке.                                                                                                                                                                                                 | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |                       |\n| onRowMouseEnter                  | Обработчик наведения мыши (`mouseenter`) на строку.                                                                                                                                                                                   | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |                       |\n| onRowMouseLeave                  | Обработчик ухода мыши (`mouseleave`) со строки.                                                                                                                                                                                       | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |                       |\n| emptyMessage                     | Возвращает сообщение, если данные отсутствуют.                                                                                                                                                                                        |                                      `string`                                      |      `\"No data\"`      |\n| className                        | CSS-класс таблицы.                                                                                                                                                                                                                    |                                      `string`                                      |                       |\n| edgePadding                      | Добавляет горизонтальные отступы для крайних ячеек.                                                                                                                                                                                   |                                     `boolean`                                      |                       |\n| stickyHorizontalScroll           | Добавляет горизонтальную липкую прокрутку (sticky scroll) в таблице. Обратите внимание, что таблица не может иметь фиксированную высоту и липкую прокрутку одновременно. Липкая прокрутка не будет работать при переполнении таблицы. |                                     `boolean`                                      |        `false`        |\n| stickyHorizontalScrollBreakpoint | Порог, которого должен достичь родительский блок, чтобы прокрутка стала липкой. Это особенно удобно в консоли, когда панель `groupActions` перекрывает область прокрутки.                                                             |                                      `number`                                      |          `0`          |\n\n### DescriptorType\n\n| Имя         | Описание                                                          |    Тип     | Значение по умолчанию |\n| :---------- | :---------------------------------------------------------------- | :--------: | :-------------------: |\n| id          | Идентификатор строки, используемый при выборе и сортировке строк. |  `string`  |                       |\n| disabled    | Условие блокировки столбцов.                                      | `boolean`  |                       |\n| interactive | Показывать ховерное состояние строки                              | `boolean`  |                       |\n| classNames  | CSS-классы строки.                                                | `string[]` |                       |\n\n### TableColumnConfig\n\n| Имя         | Описание                                                                                                                |                            Тип                             |                       Значение по умолчанию                       |\n| :---------- | :---------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------: | :---------------------------------------------------------------: |\n| id          | Идентификатор столбца.                                                                                                  |                          `string`                          |                                                                   |\n| name        | Название (заголовок) столбца.                                                                                           |             `string` `(() => React.ReactNode)`             |                      Идентификатор столбца.                       |\n| className   | CSS-класс, который будет добавлен ко всем ячейкам в столбце.                                                            |                          `string`                          |                                                                   |\n| placeholder | Заглушка при отсутствии данных в ячейке.                                                                                | `string` `((item: any, index: number) => React.ReactNode)` |                           `— (&mdash;)`                           |\n| template    | Содержимое ячейки. Если пропустить строку, ячейка будет содержать значение поля с таким же именем, как и у этой строки. | `string` `((item: any, index: number) => React.ReactNode)` | Значение поля, имя которого соответствует идентификатору столбца. |\n| align       | Выравнивание содержимого.                                                                                               |                `\"start\"` `\"center\"` `\"end\"`                |                                                                   |\n| sticky      | Липкий столбец.                                                                                                         |                     `\"start\"` `\"end\"`                      |                                                                   |\n| primary     | Указывает, что столбец является первичным относительно остальных.                                                       |                         `boolean`                          |                                                                   |\n| width       | Ширина содержимого столбца в пикселях.                                                                                  |                     `number` `string`                      |                                                                   |\n| meta        | Различные данные, включая настройки HOC.                                                                                |                   `Record<string, any>`                    |                                                                   |\n\n## Использование `Table` с HOC `withTableActions`\n\nЭтот HOC добавляет к столбцам таблицы специальный столбец с действиями.\n\n### Свойства\n\n| Имя              | Описание                                              |                           Тип                            |\n| :--------------- | :---------------------------------------------------- | :------------------------------------------------------: |\n| getRowActions    | Массив конфигураций действий для каждой строки.       |   `(item: any, index: number) => TableActionConfig[]`    |\n| renderRowActions | Функция рендеринга ячейки с действиями.               | `(props: {item: any; index: number}) => React.ReactNode` |\n| rowActionsSize   | Размер кнопки действия и элементов всплывающего меню. |                 `\"s\"` `\"m\"` `\"l\"` `\"xl\"`                 |\n| rowActionsIcon   | Пользовательский значок для ячейки действий.          |                    `React.ReactNode`                     |\n\n### TableActionConfig\n\n```ts\ntype TableActionConfig = TableAction | TableActionGroup;\n```\n\n#### TableAction\n\n| Имя      | Описание                                                                      |                 Тип                  | Значение по умолчанию |\n| :------- | :---------------------------------------------------------------------------- | :----------------------------------: | :-------------------: |\n| text     | Текст.                                                                        |               `string`               |                       |\n| handler  | Обработчик клика.                                                             | `(item: any, index: number) => void` |                       |\n| disabled | Действие отключено.                                                           |              `boolean`               |                       |\n| href     | Элемент меню с этим свойством становится ссылкой на указанное местоположение. |               `string`               |                       |\n| target   | То же, что и атрибут `target` у тега `<a>`.                                   |               `string`               |                       |\n| rel      | То же, что и атрибут `rel` у тега `<a>`.                                      |               `string`               |                       |\n| theme    | Тема.                                                                         |        `\"normal\"` `\"danger\"`         |      `\"normal\"`       |\n| icon     | Иконка, отображаемая рядом с текстом.                                         |          `React.ReactNode`           |                       |\n\n#### TableActionGroup\n\n| Имя   | Описание                   |          Тип          |\n| :---- | :------------------------- | :-------------------: |\n| title | Заголовок группы действий. |       `string`        |\n| items | Элементы группы действий.  | `TableActionConfig[]` |\n\n### Пример\n\n```jsx\nimport {Table, withTableActions} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst getRowActions = () => {\n  return [\n    {\n      text: 'Print',\n      handler: () => {},\n    },\n    {\n      text: 'Remove',\n      handler: () => {},\n      theme: 'danger',\n    },\n  ];\n};\n\nconst table = <MyTable data={data} columns={columns} getRowActions={getRowActions} />;\n```\n\n```jsx\nimport {Table, withTableActions, RenderRowActionsProps} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\ntype Item = {id: number; text: string};\n\nconst data: Item[] = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\n\nconst RowAction = ({item}: RenderRowActionsProps<Item>) => {\n    return <React.Fragment>{`Action for - ${item.text}`}</React.Fragment>;\n};\n\nconst table = (\n  <MyTable\n    data={data}\n    columns={columns}\n    renderRowActions={RowAction}\n  />\n);\n```\n\n## Использование `Table` с HOC `withTableCopy`\n\nЭтот HOC позволяет копировать содержимое ячейки или произвольный текст.\n\n### ColumnMeta\n\n| Имя  | Описание                                                                                |                                             Тип                                             |\n| :--- | :-------------------------------------------------------------------------------------- | :-----------------------------------------------------------------------------------------: |\n| copy | Копируемый текст. Если установлено значение `true`, содержимое ячейки можно копировать. | `boolean` `((item: any, index: number) => string)` `((item: any, index: number) => number)` |\n\n### Пример\n\n```jsx\nimport {Table, withTableCopy} from '@gravity-ui/uikit';\n\nconst MyTable = withTableCopy(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [\n  {id: 'id', meta: {copy: ({id}) => `ID #${id}`}},\n  {id: 'text', meta: {copy: true}},\n];\n\nconst table = <MyTable data={data} columns={columns} />;\n```\n\n## Использование `Table` с HOC `withTableSelection`\n\nЭтот HOC позволяет выбирать строки в таблице.\n\n### Свойства\n\n| Имя               | Описание                              |            Тип            |\n| :---------------- | :------------------------------------ | :-----------------------: |\n| selectedIds       | Выбранные строки.                     |        `string[]`         |\n| onSelectionChange | Обработчик изменения выбранных строк. | `(ids: string[]) => void` |\n\n### Пример\n\n```jsx\nimport {Table, withTableSelection} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSelection(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst getRowId = 'id';\n\nfunction SelectionTable() {\n  const [selectedIds, setSelectedIds] = React.useState([1]);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      getRowId={getRowId}\n      selectedIds={selectedIds}\n      onSelectionChange={setSelectedIds}\n    />\n  );\n}\n```\n\n## Использование `Table` с HOC `withTableSettings`\n\nЭтот HOC активирует функции для настройки столбцов таблицы. Его можно использовать двумя способами:\n\n```jsx\nimport {Table, withTableSettings} from './withTableSettings';\n\n// No options passed\nconst MyTable1 = withTableSettings(Table);\n// or with options\nconst MyTable1 = withTableSettings({sortable: false})(Table);\n```\n\n### Опции\n\n| Имя        | Описание                                              |       Тип        | Значение по умолчанию |\n| :--------- | :---------------------------------------------------- | :--------------: | :-------------------: |\n| width      | Ширина всплывающего окна с настройками.               | `number` `\"fit\"` |                       |\n| sortable   | Включает или отключает сортировку элементов настроек. |    `boolean`     |        `true`         |\n| filterable | Включает или отключает фильтрацию элементов настроек. |    `boolean`     |        `false`        |\n\n### ColumnMeta\n\n| Имя               | Описание                                                                                                  |    Тип    | Значение по умолчанию |\n| :---------------- | :-------------------------------------------------------------------------------------------------------- | :-------: | :-------------------: |\n| selectedByDefault | Включает или отключает автоматический выбор столбца, если он не передан в настройках.                     | `boolean` |        `true`         |\n| selectedAlways    | При включении этого свойства столбец всегда остается выбранным. Изменить видимость такого столбца нельзя. | `boolean` |        `false`        |\n\n### Свойства\n\n| Имя                        | Описание                                                                     |                           Тип                            |\n| :------------------------- | :--------------------------------------------------------------------------- | :------------------------------------------------------: |\n| settingsPopupWidth         | Ширина всплывающего окна `TableColumnSetup`.                                 |                     `number` `\"fit\"`                     |\n| settings                   | Текущие настройки.                                                           |                   `TableSettingsData`                    |\n| updateSettings             | Обработчик обновления настроек.                                              |       `(data: TableSettingsData) => Promise<void>`       |\n| renderControls             | Позволяет рендерить пользовательские действия.                               |                     `RenderControls`                     |\n| settingsFilterPlaceholder  | Текст, который отображается в контроле, когда значение для поиска не задано. |                         `string`                         |\n| settingsFilterEmptyMessage | Текст, который отображается, когда ни один элемент не найден.                |                         `string`                         |\n| filterSettings             | Функция для фильтрации элементов.                                            | `(value: string, item: TableColumnSetupItem) => boolean` |\n\n### TableSettingsData\n\n```ts\ntype TableSettingsData = Array<{\n  id: string;\n  isSelected?: boolean;\n}>;\n```\n\n### RenderControls\n\n```ts\ntype RenderControls = (params: {\n  DefaultApplyButton: React.ComponentType;\n  onApply: () => void;\n}) => React.ReactNode;\n```\n\n### Пример\n\n```jsx\nimport {Table, withTableSettings} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSettings({width: 100, sortable: false})(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst initialSettings = [\n  {id: 'id', isSelected: false},\n  {id: 'text', isSelected: true},\n];\n\nfunction SelectionTable() {\n  const [settings, setSettings] = React.useState(initialSettings);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      settings={settings}\n      updateSettings={(settings) => {\n        setSettings(settings);\n        return Promise.resolve();\n      }}\n      renderControls={({DefaultApplyButton, onApply}) => (\n        <Flex gapRow=\"1\" direction=\"column\">\n          <Button\n            view=\"outlined-warning\"\n            onClick={() => {\n              onApply();\n              setSettings(initialSettings);\n            }}\n          >\n            Reset\n          </Button>\n          <DefaultApplyButton />\n        </Flex>\n      )}\n    />\n  );\n}\n```\n\n## Использование `Table` с HOC `withTableSorting`\n\nЭтот HOC позволяет выполнить сортировку столбцов.\n\n### ColumnMeta\n\n| Имя              | Описание                                                                                                                                                     |                       Тип                        | Значение по умолчанию |\n| :--------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------- | :----------------------------------------------: | :-------------------: |\n| defaultSortOrder | Устанавливает первичный порядок сортировки.                                                                                                                  |                 `\"asc\"` `\"desc\"`                 |         `asc`         |\n| sort             | Функция сортировки. Возвращает значение для сортировки по возрастанию. При установке `true` значения ячеек сравниваются и сортируются в порядке возрастания. | `boolean` `((itemA: any, itemB: any) => number)` |                       |\n\n### Свойства\n\n| Имя               | Описание                                                            |                  Тип                  |\n| :---------------- | :------------------------------------------------------------------ | :-----------------------------------: |\n| defaultSortState  | Состояние сортировки по умолчанию для неконтролируемого компонента. |           `TableSortState`            |\n| sortState         | Состояние сортировки.                                               |           `TableSortState`            |\n| onSortStateChange | Обработчик изменения состояния сортировки.                          | `(sortState: TableSortState) => void` |\n\nЕсли не передавать свойства `sortState` и `onSortStateChange`, то состояние сортировки будет храниться в самом компоненте.\n\n### TableSortState\n\n```ts\ntype TableSortState = Array<{\n  column: string;\n  order: 'asc' | 'desc';\n}>;\n```\n\n### Пример\n\n```jsx\nimport {Table, withTableSorting} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSorting(Table);\nconst data = [\n  {id: 1, text: 'Hello', date: '2016-10-25'},\n  {id: 2, text: 'World', date: '2020-08-15'},\n];\nconst columns = [\n  {id: 'id', meta: {sort: true}},\n  {\n    id: 'text',\n    meta: {defaultSortOrder: 'desc', sort: (a, b) => Date.parse(a.date) - Date.parse(b.date)},\n  },\n];\n\nconst table = <MyTable data={data} columns={columns} />;\n```\n","_nextI18Next":{"initialI18nStore":{"ru":{"common":{"pageNotFound":"Страница не найдена","pageNotFoundDescription":"Страница, которую вы ищете, не существует или была перемещена.","backToHome":"Вернуться на главную","actions_open":"Открыть","actions_copyToClipboard":"Копировать в буфер обмена","actions_share":"Поделиться","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Библиотеки","menu_components":"Компоненты","menu_design":"Дизайн","menu_editor":"Редактор","menu_icons":"Иконки","menu_themer":"Темизатор","roadmap_inProgress":"В работе","navigation_previous":"Назад","navigation_next":"Далее","emptySearchPlaceholder":"Ничего не найдено","show_more":"Показать больше","show_less":"Показать меньше"},"component":{"actions_openInFigma":"Открыть в Figma","title":"Компоненты","searchPlaceholder":"Поиск по названию","color-input_validation-format-error":"Неверный формат","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Переключить тему","rtlOn":"Включить RTL","rtlOff":"Выключить RTL","rtlNotSupported":"RTL не поддерживается"},"libraries-info":{"description_uikit":"Базовые UI-компоненты и токены для построения сервисов с Gravity.","description_components":"Набор комплексных React-компонентов.","description_icons":"Сотни стильных иконок для ваших проектов.","description_illustrations":"Набор иллюстраций для отображения статусов данных.","description_dynamic-forms":"Библиотека для рендеринга лаконичных функциональных форм, описанных JSON-схемой.","description_page-constructor":"Набор стильно выглядящих функциональных блоков для быстрого создания промо-страниц.","description_blog-constructor":"Библиотека, основанная на Page Constructor, для создания блогов.","description_chartkit":"Библиотека визуализации данных, интегрированная с нашей дизайн‑системой.","description_dashkit":"Cетка компонентов для построения интерактивных дашбордов.","description_yagr":"Высокопроизводительная отрисовка canvas-графиков, основанная на uPlot.","description_nodekit":"Простой набор инструментов для приложений, скриптов и библиотек Node.js.","description_expresskit":"Легковесная надстройка для express.js, интегрируемая с NodeKit.","description_app-layout":"Генератор HTML-макета, используемый в одностраничных приложениях (SPA).","description_app-builder":"Основанный на Webpack сборщик статики, используемый в одностраничных приложениях (SPA).","description_navigation":"Компактная и расширяемая навигационная панель для сложных сервисов.","description_date-utils":"Библиотека для управления значениями даты и времени.","description_date-components":"Различные компоненты для работы с датами.","description_axios-wrapper":"Надстройка для axios, обеспечивающая автоматическую отмену конкурирующих запросов.","description_dialog-fields":"Надстройка для react-final-form, которая предоставляет полезные высокоуровневые компоненты для создания форм.","description_paranoid":"Визуализатор топологий кластера.","description_react-data-table":"React-компонент для рендеринга больших и сложных таблиц.","description_unipika":"Библиотека форматирования данных.","description_ui-logger":"Простой клиентский логгер.","description_oauth-clients":"Клиентская библиотека OAuth, обеспечивающая удобную абстракцию поверх аутентификации.","description_i18n":"Библиотека для интернационализации проектов Gravity UI.","description_eslint-config":"Пресет настройки ESLint для проектов Gravity UI.","description_tsconfig":"Пресет настройки компилятора TypeScript для проектов Gravity UI.","description_prettier-config":"Пресет настройки Prettier для проектов Gravity UI.","description_stylelint-config":"Пресет настройки Stylelint для проектов Gravity UI.","description_babel-preset":"Пресет настройки Babel для проектов Gravity UI.","description_browserslist-config":"Пресет настройки Browserslist для проектов Gravity UI.","description_markdown-editor":"Мощный инструмент для работы с Markdown, который сочетает в себе режимы WYSIWYG и разметки.","description_graph":"Библиотека для визуализации больших графов с динамическим уровнем детализации","description_data-source":"Библиотека-обертка над загрузкой данных.","description_webpack-i18n-assets-plugin":"Плагин для Webpack, который заменяет вызовы функций локализации (i18n) на целевые тексты.","description_table":"Библиотека для отображения таблиц."}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"ru","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}