{"pageProps":{"libId":"uikit","componentId":"select","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Select\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Select} from '@gravity-ui/uikit';\n```\n\nКомпонент `Select` — это контрол, который предоставляет список вариантов для выбора.\n\n## `Options` (варианты)\n\nВарианты для выбора.\n\n### Определение вариантов\n\nВарианты можно определять в виде массива объектов или в качестве дочерних элементов компонента. Первый способ подходит для случаев, когда варианты требуют сложной подготовки и, возможно, запоминания. Второй способ удобен, когда вариантов немного и их настройка не требует сложных вычислений.\n\n#### Одноуровневый список\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  options={[\n    {value: 'val_1', content: 'Value 1'},\n    {value: 'val_2', content: 'Value 2'},\n    {value: 'val_3', content: 'Value 3'},\n    {value: 'val_4', content: 'Value 4'},\n  ]}\n/>\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <div>\n    Array of objects\n    <UIKit.Select\n      options={[\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ]}\n    />\n  </div>\n  <div>\n    Child nodes\n    <UIKit.Select>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n// Array of objects\n<Select\n  options={[\n    {value: 'val_1', content: 'Value 1'},\n    {value: 'val_2', content: 'Value 2'},\n    {value: 'val_3', content: 'Value 3'},\n    {value: 'val_4', content: 'Value 4'},\n  ]}\n/>\n// Child nodes\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n#### Группированный список\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  options={[\n    {\n      label: 'Group 1',\n      options: [\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n      ],\n    },\n    {\n      label: 'Group 2',\n      options: [\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ],\n    },\n  ]}\n/>\n<Select>\n  <Select.OptionGroup label=\"Group 1\">\n    <Select.Option value=\"val_1\" content=\"Value 1\" />\n    <Select.Option value=\"val_2\" content=\"Value 2\" />\n  </Select.OptionGroup>\n  <Select.OptionGroup label=\"Group 2\">\n    <Select.Option value=\"val_3\" content=\"Value 3\" />\n    <Select.Option value=\"val_4\" content=\"Value 4\" />\n  </Select.OptionGroup>\n</Select>\n`}\n>\n  <div>\n    Array of objects\n    <UIKit.Select\n      options={[\n        {\n          label: 'Group 1',\n          options: [\n            {value: 'val_1', content: 'Value 1'},\n            {value: 'val_2', content: 'Value 2'},\n          ],\n        },\n        {\n          label: 'Group 2',\n          options: [\n            {value: 'val_3', content: 'Value 3'},\n            {value: 'val_4', content: 'Value 4'},\n          ],\n        },\n      ]}\n    />\n  </div>\n  <div>\n    Child nodes\n    <UIKit.Select>\n      <UIKit.Select.OptionGroup label=\"Group 1\">\n        <UIKit.Select.Option value=\"val_1\" content=\"Value 1\" />\n        <UIKit.Select.Option value=\"val_2\" content=\"Value 2\" />\n      </UIKit.Select.OptionGroup>\n      <UIKit.Select.OptionGroup label=\"Group 2\">\n        <UIKit.Select.Option value=\"val_3\" content=\"Value 3\" />\n        <UIKit.Select.Option value=\"val_4\" content=\"Value 4\" />\n      </UIKit.Select.OptionGroup>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n// Array of objects\n<Select\n  options={[\n    {\n      label: 'Group 1',\n      options: [\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n      ],\n    },\n    {\n      label: 'Group 2',\n      options: [\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ],\n    },\n  ]}\n/>\n// Child nodes\n<Select>\n  <Select.OptionGroup label=\"Group 1\">\n    <Select.Option value=\"val_1\" content=\"Value 1\" />\n    <Select.Option value=\"val_2\" content=\"Value 2\" />\n  </Select.OptionGroup>\n  <Select.OptionGroup label=\"Group 2\">\n    <Select.Option value=\"val_3\" content=\"Value 3\" />\n    <Select.Option value=\"val_4\" content=\"Value 4\" />\n  </Select.OptionGroup>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Хранение данных в вариантах\n\nС помощью свойства `option.data` можно определить и сохранить уникальные данные в каждом варианте. Это может быть полезно при необходимости обогащения данных с использованием обратного вызова `onUpdate` или, например, при отрисовке вариантов с помощью `renderOption`.\n\n## Выбор нескольких вариантов\n\nЧтобы включить множественный выбор, используйте свойство `multiple`. Значение по умолчанию — `false`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select multiple={true}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select multiple={true}>\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select multiple={true}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Счетчик\n\nС помощью свойства `hasCounter` в компонент можно добавить счетчик выбранных вариантов.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select multiple={true} hasCounter={true}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select multiple={true} hasCounter={true}>\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select multiple={true} hasCounter={true}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Варианты фильтрации\n\nДля активации секции фильтрации используйте свойство `filterable`. Значение по умолчанию — `false`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select filterable={true}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select filterable={true} placeholder=\"Filterable\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select filterable={true}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Размер\n\nЧтобы задать дефолтный размер контролов и вариантов, используйте свойство `size`. Размер по умолчанию — `m`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select size=\"s\" placeholder=\"S Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"m\" placeholder=\"M Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"l\" placeholder=\"L Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"xl\" placeholder=\"XL Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select size=\"s\" placeholder=\"S Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"m\" placeholder=\"M Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"l\" placeholder=\"L Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"xl\" placeholder=\"XL Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select size=\"s\" placeholder=\"S Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"m\" placeholder=\"M Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"l\" placeholder=\"L Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"xl\" placeholder=\"XL Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Ширина контрола\n\nПо умолчанию ширина контрола растягивается, чтобы соответствовать ширине содержимого выбранных вариантов. Вы можете самостоятельно регулировать ширину с помощью свойства `width`:\n\n`'max'` — растягивает ширину контрола на всю ширину родительского элемента.\n\n`number` — применяет ширину в пикселях.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select width=\"max\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select width={150}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <UIKit.Select multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Max</h4>\n    <UIKit.Select width=\"max\" multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <UIKit.Select width={110} multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Ширина всплывающего окна.\n\nШирину всплывающего окна можно изменять с помощью свойства `popupWidth`. Возможные значения:\n\n`'fit'` — применяет ширину контрола.\n\n`number` — применяет ширину в пикселях.\n\nОсобенности поведения по умолчанию:\n\n- Ширина всплывающего окна соответствует ширине самого широкого варианта, но не превышает `90vw`. Это не применимо, если используется [виртуализация](#virtualized-list).\n\n- Узкие варианты растягиваются до ширины контрола.\n\n<!--LANDING_BLOCK\n\n### Non-virtualized list\n\nA regular list when all the elements are in the dom tree at once.\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\">\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Fit</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth=\"fit\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth=\"fit\">\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth={80}>\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth={80}>\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n### Виртуализированный список\n\nДля оптимального отображения большого количества вариантов в компоненте `Select`предусмотрен встроенный инструмент виртуализации списка. Виртуализация включается, когда количество вариантов превышает пороговое значение (по умолчанию `50`). Пороговое значение можно изменить с помощью свойства `virtualizationThreshold`.\n\nПри включении виртуализации к элементу всплывающего окна применяются определенные ограничения:\n\n- Ширина всплывающего окна больше не изменяется в зависимости от длины самого длинного варианта.\n\n- Минимальная ширина всплывающего окна равна ширине контрола или `100px`, если ширина контрола меньше `100px`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\">\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\">\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Loooooooooooooooooooong Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth={80}>\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth={80}>\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Loooooooooooooooooooong Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Расширенное использование\n\nСуществует множество способов настроить `Select` более тонко.\n\n### Рендеринг пользовательского контрола\n\nДля создания пользовательского контрола используйте свойство `renderControl`.\nОбратите внимание, что для правильной работы контрола необходимо передать все аргументы в узел (как при использовании стандартной конфигурации).\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderControl={({onClick, onKeyDown, ref}) => {\n    return <button ref={ref} onClick={onClick} extraProps={{onKeyDown}}>Custom control</button>\n  }}\n>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select renderControl={({onClick, onKeyDown, ref}) => {\n    return <button ref={ref} onClick={onClick} extraProps={{onKeyDown}}>Custom control</button>\n  }}>\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {Button} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderControl: SelectProps['renderControl'] = ({onClick, onKeyDown, ref}) => {\n    return (\n      <Button\n        ref={ref}\n        onClick={onClick}\n        extraProps={{\n          onKeyDown,\n        }}\n      >\n        Your control\n      </Button>\n    );\n  };\n\n  return <Select renderControl={renderControl}>/* Your options here */</Select>;\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Отображение секции пользовательской фильтрации\n\nДля отображения секции пользовательской фильтрации используйте свойство `renderFilter` и установите `filterable` в значение `true`.\nОбратите внимание, что для правильной работы фильтра необходимо передать все аргументы в узел (как при использовании стандартной конфигурации).\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"Custom filter\"\n  filterable={true}\n  renderFilter={({onChange, onKeyDown, ref, value}) => {\n    return (\n      <div style={{display: 'flex', flexDirection: 'column'}}>\n        <input\n          ref={ref}\n          value={value}\n          size=\"1\"\n          onKeyDown={onKeyDown}\n          onChange={(e) => onChange(e.target.value)}\n        />\n        <button>Do smth</button>\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom filter\"\n    filterable={true}\n    renderFilter={({onChange, onKeyDown, ref, value}) => {\n      return (\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n          <input\n            ref={ref}\n            value={value}\n            size=\"1\"\n            onKeyDown={onKeyDown}\n            onChange={(e) => onChange(e.target.value)}\n          />\n          <button>Do smth</button>\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {Button, TextInput} from '@gravity-ui/uikit';\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderFilter: SelectProps['renderFilter'] = (props) => {\n    const {value, ref, onChange, onKeyDown} = props;\n\n    return (\n      <div>\n        <TextInput\n          controlRef={ref}\n          controlProps={{size: 1}}\n          value={value}\n          onUpdate={onChange}\n          onKeyDown={onKeyDown}\n        />\n        <Button>Do smth</Button>\n      </div>\n    );\n  };\n\n  return (\n    <Select filterable={true} renderFilter={renderFilter}>\n      /* Your options here */\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Отображение пользовательских вариантов\n\nДля отображения пользовательских вариантов используйте свойство `renderOption`:\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderOption={(option) => {\n    return (\n      <div style={{color: option.data.color}}>\n        {option.children}\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom options\"\n    renderOption={(option) => {\n      return (\n        <div style={{color: option.data.color}}>\n          {option.children}\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderOption: SelectProps['renderOption'] = (option) => {\n    return <div style={{color: option.data.color}}>{option.children}</div>;\n  };\n\n  return (\n    <Select renderOption={renderOption}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Отображение выбранных пользовательских вариантов\n\nДля отображения выбранных пользовательских вариантов используйте свойство `renderOption`:\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderSelectedOption={(option) => {\n    return (\n      <div style={{color: option.data.color}}>\n        {option.children}\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom selected options\"\n    renderSelectedOption={(option) => {\n      return (\n        <div style={{color: option.data.color}}>\n          {option.children}\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderSelectedOption: SelectProps['renderSelectedOption'] = (option) => {\n    return <div style={{color: option.data.color}}>{option.children}</div>;\n  };\n\n  return (\n    <Select renderSelectedOption={renderSelectedOption}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Отображение вариантов с разной высотой\n\nВарианты имеют фиксированную высоту, заданную в свойстве `size`. Если нужно отобразить варианты с разной высотой, используйте свойство `option.data`, которое будет содержать информацию о требуемой высоте варианта, а также `getOptionHeight` для установки этого значения.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  getOptionHeight={(option) => option.data.height}\n>\n  <Select.Option value=\"val_1\" data={{height: 20}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{height: 40}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{height: 60}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{height: 80}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Different heights\"\n    getOptionHeight={(option) => option.data.height}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{height: 20}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{height: 40}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{height: 60}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{height: 80}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const getOptionHeight: SelectProps['getOptionHeight'] = (option) => option.data.height;\n\n  return (\n    <Select getOptionHeight={getOptionHeight}>\n      <Select.Option value=\"val_1\" data={{height: 20}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{height: 40}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{height: 60}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{height: 80}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Отображение пользовательских всплывающих окон\n\nДля отображения пользовательских всплывающих окон используйте свойство `renderPopup`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  filterable\n  placeholder=\"Custom popup\"\n  renderPopup={({renderList, renderFilter}) => {\n    return (\n      <React.Fragment>\n        {renderFilter()}\n        <div style={{width: \"100%\", height: \"20px\", backgroundColor: \"tomato\"}} />\n        {renderList()}\n      </React.Fragment>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    filterable\n    placeholder=\"Custom popup\"\n    renderPopup={({renderList, renderFilter}) => {\n      return (\n        <React.Fragment>\n          {renderFilter()}\n          <div style={{width: \"100%\", height: \"20px\", backgroundColor: \"tomato\"}} />\n          {renderList()}\n        </React.Fragment>\n  );\n}}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst renderPopup: SelectProps['renderPopup'] = ({renderList, renderFilter}) => {\n  return (\n    <React.Fragment>\n      {renderFilter()}\n      <div className=\"CustomElement\" />\n      {renderList()}\n    </React.Fragment>\n  );\n};\n\nconst MyComponent = () => {\n  return (\n    <Select filterable renderPopup={renderPopup}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### `Error` (ошибка)\n\nЭто состояние `Select` указывает на некорректный ввод данных пользователем. Для изменения внешнего представления `Select` примените свойство `validationState`, задав ему значение `\"invalid\"`. Опционально можно задать текст сообщения об ошибке через свойство `errorMessage`. По умолчанию текст сообщения выводится вне компонента.\nМесто вывода сообщения можно изменить с помощью свойства `errorPlacement`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Select placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\" />\n<Select placeholder=\"Placeholder\" errorPlacement=\"inside\" errorMessage=\"Error message\" validationState=\"invalid\" />\n`}\n>\n    <UIKit.Select placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\" />\n    <UIKit.Select placeholder=\"Placeholder\" errorPlacement=\"inside\" errorMessage=\"Error message\" validationState=\"invalid\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n## Свойства\n\n| Имя                                                       | Описание                                                                                                                                      | Тип                                      | Значение по умолчанию                                    |\n| :-------------------------------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------- | :------------------------------------------------------- |\n| className                                                 | Имя класса контрола.                                                                                                                          | `string`                                 |                                                          |\n| defaultValue                                              | Значения по умолчанию для выбранных вариантов в случае использования неуправляемого состояния.                                                | `string[]`                               |                                                          |\n| disabled                                                  | Указывает на то, что пользователь не может взаимодействовать с контролом.                                                                     | `boolean`                                | `false`                                                  |\n| [filterable](#filtering-options)                          | Указывает на то, что всплывающее окно выбора содержит секцию фильтрации.                                                                      | `boolean`                                | `false`                                                  |\n| filterOption                                              | Используется для сравнения варианта со значением фильтра.                                                                                     | `function`                               |                                                          |\n| filterPlaceholder                                         | Текст-заглушка по умолчанию для поля ввода фильтра.                                                                                           | `string`                                 |                                                          |\n| [getOptionHeight](#render-options-with-different-heights) | Используется для задания высоты пользовательских вариантов.                                                                                   | `function`                               |                                                          |\n| getOptionGroupHeight                                      | Используется для задания высоты группы пользовательских вариантов.                                                                            | `function`                               |                                                          |\n| hasClear                                                  | Позволяет отображать иконку для очистки выбранных вариантов.                                                                                  | `boolean`                                | `false`                                                  |\n| id                                                        | HTML-атрибут `id`.                                                                                                                            | `string`                                 |                                                          |\n| label                                                     | Лейбл контрола.                                                                                                                               | `string`                                 |                                                          |\n| loading                                                   | Добавляет элемент загрузки в конец списка вариантов. Работает как постоянный индикатор загрузки, пока список вариантов пуст.                  | `boolean`                                |                                                          |\n| [multiple](#selecting-multiple-options)                   | Указывает на наличие возможности выбора несколько вариантов в списке.                                                                         | `boolean`                                | `false`                                                  |\n| name                                                      | Имя контрола.                                                                                                                                 | `string`                                 |                                                          |\n| onBlur                                                    | Обработчик, который вызывается, когда элемент теряет фокус.                                                                                   | `function`                               |                                                          |\n| filter                                                    | Контролируемое значение фильтра.                                                                                                              | `string`                                 | `''`                                                     |\n| onFilterChange                                            | Срабатывает при каждом изменении фильтра.                                                                                                     | `function`                               |                                                          |\n| onFocus                                                   | Обработчик, который вызывается, когда элемент получает фокус.                                                                                 | `function`                               |                                                          |\n| onLoadMore                                                | Срабатывает, когда индикатор загрузки становится видимым.                                                                                     | `function`                               |                                                          |\n| onOpenChange                                              | Срабатывает при каждом изменении видимости всплывающего окна.                                                                                 | `function`                               |                                                          |\n| onUpdate                                                  | Срабатывает, когда пользователь подтверждает изменение значения `Select`.                                                                     | `function`                               |                                                          |\n| [options](#options)                                       | Варианты для выбора.                                                                                                                          | `(SelectOption \\| SelectOptionGroup)[]`  |                                                          |\n| pin                                                       | Вид границ контрола.                                                                                                                          | `string`                                 | `'round-round'`                                          |\n| placeholder                                               | Текст-заглушка.                                                                                                                               | `string`                                 |                                                          |\n| popupClassName                                            | Имя класса (`className`) для всплывающего окна со списком вариантов.                                                                          | `string`                                 |                                                          |\n| popupPlacement                                            | Размещение всплывающего окна.                                                                                                                 | `PopupPlacement` `Array<PopupPlacement>` | `['bottom-start', 'bottom-end', 'top-start', 'top-end']` |\n| [popupWidth](#popup-width)                                | Ширина всплывающего окна.                                                                                                                     | `number \\| 'fit' \\| 'outfit'`            | `'outfit'`                                               |\n| qa                                                        | Атрибут идентификатора для тестирования (`data-qa`).                                                                                          | `string`                                 |                                                          |\n| [renderControl](#render-custom-control)                   | Используется для рендеринга пользовательского контрола.                                                                                       | `function`                               |                                                          |\n| renderEmptyOptions                                        | Используется для рендеринга узла для пустого списка вариантов.                                                                                | `function`                               |                                                          |\n| [renderFilter](#render-custom-filter-section)             | Используется для рендеринга секции пользовательской фильтрации.                                                                               | `function`                               |                                                          |\n| [renderOption](#render-custom-options)                    | Используется для рендеринга пользовательских вариантов.                                                                                       | `function`                               |                                                          |\n| renderOptionGroup                                         | Используется для рендеринга групп пользовательских вариантов.                                                                                 | `function`                               |                                                          |\n| [renderSelectedOption](#render-custom-selected-options)   | Используется для рендеринга выбранных пользователем вариантов.                                                                                | `function`                               |                                                          |\n| [renderPopup](#render-custom-popup)                       | Используется для рендеринга содержимого пользовательского всплывающего окна.                                                                  | `function`                               |                                                          |\n| [size](#size)                                             | Размер контрола / вариантов.                                                                                                                  | `string`                                 | `'m'`                                                    |\n| value                                                     | Значения для выбранных вариантов.                                                                                                             | `string[]`                               |                                                          |\n| view                                                      | Вид контрола.                                                                                                                                 | `string`                                 | `'normal'`                                               |\n| [virtualizationThreshold](#virtualized-list)              | Порог количества вариантов, после которого включается виртуализация.                                                                          | `number`                                 | `50`                                                     |\n| [width](#control-width)                                   | Ширина контрола                                                                                                                               | `string \\| number`                       | `undefined`                                              |\n| errorMessage                                              | Текст ошибки.                                                                                                                                 | `string`                                 |                                                          |\n| errorPlacement                                            | Положение отображения ошибки.                                                                                                                 | `outside` `inside`                       | `outside`                                                |\n| validationState                                           | Состояние валидации.                                                                                                                          | `\"invalid\"`                              |                                                          |\n| [hasCounter](#counter)                                    | Показывает количество выбранных вариантов. Счетчик появляется только тогда, когда включен [множественный](#selecting-multiple-options) выбор. | `boolean`                                |                                                          |\n\n## API CSS\n\n| Имя                              | Описание                                                        |\n| :------------------------------- | :-------------------------------------------------------------- |\n| `--g-select-focus-outline-color` | Цвет обводки при фокусе на элементе (по умолчанию отсутствует). |\n","_nextI18Next":{"initialI18nStore":{"ru":{"common":{"pageNotFound":"Страница не найдена","pageNotFoundDescription":"Страница, которую вы ищете, не существует или была перемещена.","backToHome":"Вернуться на главную","actions_open":"Открыть","actions_copyToClipboard":"Копировать в буфер обмена","actions_share":"Поделиться","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Библиотеки","menu_components":"Компоненты","menu_design":"Дизайн","menu_editor":"Редактор","menu_icons":"Иконки","menu_themer":"Темизатор","roadmap_inProgress":"В работе","navigation_previous":"Назад","navigation_next":"Далее","emptySearchPlaceholder":"Ничего не найдено","show_more":"Показать больше","show_less":"Показать меньше"},"component":{"actions_openInFigma":"Открыть в Figma","title":"Компоненты","searchPlaceholder":"Поиск по названию","color-input_validation-format-error":"Неверный формат","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Переключить тему","rtlOn":"Включить RTL","rtlOff":"Выключить RTL","rtlNotSupported":"RTL не поддерживается"},"libraries-info":{"description_uikit":"Базовые UI-компоненты и токены для построения сервисов с Gravity.","description_components":"Набор комплексных React-компонентов.","description_icons":"Сотни стильных иконок для ваших проектов.","description_illustrations":"Набор иллюстраций для отображения статусов данных.","description_dynamic-forms":"Библиотека для рендеринга лаконичных функциональных форм, описанных JSON-схемой.","description_page-constructor":"Набор стильно выглядящих функциональных блоков для быстрого создания промо-страниц.","description_blog-constructor":"Библиотека, основанная на Page Constructor, для создания блогов.","description_chartkit":"Библиотека визуализации данных, интегрированная с нашей дизайн‑системой.","description_dashkit":"Cетка компонентов для построения интерактивных дашбордов.","description_yagr":"Высокопроизводительная отрисовка canvas-графиков, основанная на uPlot.","description_nodekit":"Простой набор инструментов для приложений, скриптов и библиотек Node.js.","description_expresskit":"Легковесная надстройка для express.js, интегрируемая с NodeKit.","description_app-layout":"Генератор HTML-макета, используемый в одностраничных приложениях (SPA).","description_app-builder":"Основанный на Webpack сборщик статики, используемый в одностраничных приложениях (SPA).","description_navigation":"Компактная и расширяемая навигационная панель для сложных сервисов.","description_date-utils":"Библиотека для управления значениями даты и времени.","description_date-components":"Различные компоненты для работы с датами.","description_axios-wrapper":"Надстройка для axios, обеспечивающая автоматическую отмену конкурирующих запросов.","description_dialog-fields":"Надстройка для react-final-form, которая предоставляет полезные высокоуровневые компоненты для создания форм.","description_paranoid":"Визуализатор топологий кластера.","description_react-data-table":"React-компонент для рендеринга больших и сложных таблиц.","description_unipika":"Библиотека форматирования данных.","description_ui-logger":"Простой клиентский логгер.","description_oauth-clients":"Клиентская библиотека OAuth, обеспечивающая удобную абстракцию поверх аутентификации.","description_i18n":"Библиотека для интернационализации проектов Gravity UI.","description_eslint-config":"Пресет настройки ESLint для проектов Gravity UI.","description_tsconfig":"Пресет настройки компилятора TypeScript для проектов Gravity UI.","description_prettier-config":"Пресет настройки Prettier для проектов Gravity UI.","description_stylelint-config":"Пресет настройки Stylelint для проектов Gravity UI.","description_babel-preset":"Пресет настройки Babel для проектов Gravity UI.","description_browserslist-config":"Пресет настройки Browserslist для проектов Gravity UI.","description_markdown-editor":"Мощный инструмент для работы с Markdown, который сочетает в себе режимы WYSIWYG и разметки.","description_graph":"Библиотека для визуализации больших графов с динамическим уровнем детализации","description_data-source":"Библиотека-обертка над загрузкой данных.","description_webpack-i18n-assets-plugin":"Плагин для Webpack, который заменяет вызовы функций локализации (i18n) на целевые тексты.","description_table":"Библиотека для отображения таблиц."}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"ru","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}