{"pageProps":{"libId":"uikit","componentId":"table","readmeContent":"<!--GITHUB_BLOCK-->\n\n## Tabla\n\n<!--/GITHUB_BLOCK-->\n\n```jsx\nimport {Table} from '@gravity-ui/uikit';\n```\n\nA `Table` permite seleccionar y ordenar filas, así como realizar acciones en una fila.\n\n<!--GITHUB_BLOCK-->\n\nLas funciones adicionales se habilitan a través de los HOC:\n\n- [withTableActions](#usage-with-hoc-withtableactions)\n- [withTableCopy](#usage-with-hoc-withtablecopy)\n- [withTableSelection](#usage-with-hoc-withtableselection)\n- [withTableSettings](#usage-with-hoc-withtablesettings)\n- [withTableSorting](#usage-with-hoc-withtablesorting)\n\n<!--/GITHUB_BLOCK-->\n\n## Propiedades\n\n| Nombre                           | Descripción                                                                                                                                                                                                          |                                                Tipo                                                | Predeterminado |\n| :------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------: | :------------: |\n| dato                             | Datos                                                                                                                                                                                                                |                                              `any[]`                                               |                |\n| columnas                         | Configuración de columna                                                                                                                                                                                             |                                       `TableColumnConfig[]`                                        |                |\n| verticalAlign                    | Alineación vertical del contenido                                                                                                                                                                                    |                                         `\"top\"` `\"middle\"`                                         |                |\n| getRowDescriptor                 | Controlador para obtener el descriptor de fila                                                                                                                                                                       |                           `(item: any, index: number) => DescriptorType`                           |                |\n| getRowId                         | El identificador de fila se utiliza al seleccionar y ordenar las filas. Si omites una fila, su identificador será el valor del campo en los datos de la fila con el mismo nombre que el identificador de la columna. |                         `string` `((item: any, index: number) => string)`                          |                |\n| getRowClassNames                 | Clases CSS de fila                                                                                                                                                                                                   |                              `(item: any, index: number) => string[]`                              |                |\n| isRowDisabled                    | Condición para deshabilitar las columnas                                                                                                                                                                             |                              `(item: any, index: number) => boolean`                               |                |\n| onRowClick                       | Controlador de clics de fila                                                                                                                                                                                         | `(artículo: cualquiera, índice: número, evento: <HTMLTableRowElement> React.mouseEvent () = nulo>` |                |\n| onRowMouseEnter                  | controlador Row mouseenter                                                                                                                                                                                           | `(artículo: cualquiera, índice: número, evento: <HTMLTableRowElement> React.mouseEvent () = nulo>` |                |\n| onRowMouseLeave                  | Controlador Row mouseleave                                                                                                                                                                                           | `(artículo: cualquiera, índice: número, evento: <HTMLTableRowElement> React.mouseEvent () = nulo>` |                |\n| emptyMessage                     | Devolver un mensaje si faltan los datos                                                                                                                                                                              |                                              `string`                                              |  `\"No data\"`   |\n| className                        | Clase CSS de tabla                                                                                                                                                                                                   |                                              `string`                                              |                |\n| edgePadding                      | Añade un relleno horizontal para las celdas de los bordes                                                                                                                                                            |                                             `boolean`                                              |                |\n| stickyHorizontalScroll           | Añade un rollo adhesivo horizontal a una tabla. Nota: Una mesa no puede tener una altura fija y un rollo adhesivo al mismo tiempo. Un rollo adhesivo no funcionará si la mesa está desbordada.                       |                                             `boolean`                                              |    `false`     |\n| stickyHorizontalScrollBreakpoint | Umbral que debe alcanzar el bloque principal antes de hacer que un pergamino quede pegajoso. Esto es útil en la consola, por ejemplo, cuando la `groupActions` barra se superpone al rollo.                          |                                              `number`                                              |      `0`       |\n\n### DescriptorType\n\n| Nombre         | Descripción                                              |    Tipo    | Predeterminado |\n| :------------- | :------------------------------------------------------- | :--------: | :------------: |\n| identificación | ID de fila que se utiliza al seleccionar y ordenar filas |  `string`  |                |\n| inhabilitado   | Condición para deshabilitar las columnas                 | `boolean`  |                |\n| interactivo    | Mostrar fila al pasar el ratón                           | `boolean`  |                |\n| classNames     | Clases CSS de fila                                       | `string[]` |                |\n\n### TableColumnConfig\n\n| Nombre               | Descripción                                                                                                                   |                            Tipo                            |                     Predeterminado                      |\n| :------------------- | :---------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------: | :-----------------------------------------------------: |\n| identificación       | ID de columna                                                                                                                 |                          `string`                          |                                                         |\n| nombre               | Nombre de columna (encabezado)                                                                                                |             `string` `(() => React.ReactNode)`             |                      ID de columna                      |\n| className            | Clase CSS que se añadirá a todas las celdas de la columna                                                                     |                          `string`                          |                                                         |\n| marcador de posición | Stub cuando no hay datos en una celda                                                                                         | `string` `((item: any, index: number) => React.ReactNode)` |                      `— (&mdash;)`                      |\n| modelo               | Contenido de la celda. Si omite una fila, el contenido de la celda será el valor del campo con el mismo nombre que esta fila. | `string` `((item: any, index: number) => React.ReactNode)` | Valor del campo con el nombre igual al ID de la columna |\n| alinear              | Alineación de contenido                                                                                                       |                     `\"start\"` `\"end\"`                      |                                                         |\n| pegajoso             | Columna adhesiva                                                                                                              |                     `\"start\"` `\"end\"`                      |                                                         |\n| primaria             | Identifica una columna como principal en lugar de otras                                                                       |                         `boolean`                          |                                                         |\n| anchura              | Ancho del contenido de la columna en píxeles                                                                                  |                     `number` `string`                      |                                                         |\n| meta                 | Datos varios, incluida la configuración HOC                                                                                   |                   `Récord<string, any>`                    |                                                         |\n\n## Uso `Table` con el `withTableActions` HOC\n\nEste HOC agrega una columna especial con acciones a las columnas de la tabla.\n\n### Propiedades\n\n| Nombre           | Descripción                                                      |                           Tipo                           |\n| :--------------- | :--------------------------------------------------------------- | :------------------------------------------------------: |\n| getRowActions    | Matriz de configuraciones de acción para cada fila               |   `(item: any, index: number) => TableActionConfig[]`    |\n| renderRowActions | Función de renderizado para Actions Cell                         | `(props: {item: any; index: number}) => React.ReactNode` |\n| rowActionsSize   | Tamaño del botón de acción y de los elementos del menú emergente |                       `\"s\"` `\"xl\"`                       |\n\n### TableActionConfig\n\n```ts\ntype TableActionConfig = TableAction | TableActionGroup;\n```\n\n#### TableAction\n\n| Nombre       | Descripción                                                                                   |                 Tipo                 | Predeterminado |\n| :----------- | :-------------------------------------------------------------------------------------------- | :----------------------------------: | :------------: |\n| mensaje      | Texto                                                                                         |               `string`               |                |\n| controlador  | Controlador de clics                                                                          | `(item: any, index: number) => void` |                |\n| inhabilitado | Acción desactivada                                                                            |              `boolean`               |                |\n| href         | Un elemento de menú con esta propiedad se convierte en un enlace a la ubicación especificada. |               `string`               |                |\n| objetivo     | Igual que el `target` atributo de la `<a>` etiqueta.                                          |               `string`               |                |\n| relé         | Igual que el `rel` atributo de la `<a>` etiqueta.                                             |               `string`               |                |\n| canción      | Tema                                                                                          |        `\"normal\"` `\"danger\"`         |   `\"normal\"`   |\n| icono        | Icono para mostrar junto al texto                                                             |          `React.ReactNode`           |                |\n\n#### TableActionGroup\n\n| Nombre    | Descripción                      |         Tipo          |\n| :-------- | :------------------------------- | :-------------------: |\n| título    | Encabezado del grupo de acciones |       `string`        |\n| artículos | Elementos del grupo de acciones  | `TableActionConfig[]` |\n\n### Ejemplo\n\n```jsx\nimport {Table, withTableActions} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst getRowActions = () => {\n  return [\n    {\n      text: 'Print',\n      handler: () => {},\n    },\n    {\n      text: 'Remove',\n      handler: () => {},\n      theme: 'danger',\n    },\n  ];\n};\n\nconst table = <MyTable data={data} columns={columns} getRowActions={getRowActions} />;\n```\n\n```jsx\nimport {Table, withTableActions, RenderRowActionsProps} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\ntype Item = {id: number, text: string};\n\nconst data: Item[] = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\n\nconst RowAction = ({item}: RenderRowActionsProps<Item>) => {\n  return <React.Fragment>{`Action for - ${item.text}`}</React.Fragment>;\n};\n\nconst table = <MyTable data={data} columns={columns} renderRowActions={RowAction} />;\n```\n\n## Uso `Table` con el `withTableCopy` HOC\n\nEste HOC permite copiar el contenido de una celda o cualquier otro texto.\n\n### ColumnMeta\n\n| Nombre | Descripción                                                                              |                        Tipo                        |\n| :----- | :--------------------------------------------------------------------------------------- | :------------------------------------------------: |\n| copiar | Texto para copiar. Si el valor es verdadero, se permite copiar el contenido de la celda. | `boolean` `((item: any, index: number) => number)` |\n\n### Ejemplo\n\n```jsx\nimport {Table, withTableCopy} from '@gravity-ui/uikit';\n\nconst MyTable = withTableCopy(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [\n  {id: 'id', meta: {copy: ({id}) => `ID #${id}`}},\n  {id: 'text', meta: {copy: true}},\n];\n\nconst table = <MyTable data={data} columns={columns} />;\n```\n\n## Uso `Table` con el `withTableSelection` HOC\n\nEste HOC permite seleccionar filas de tablas.\n\n### Propiedades\n\n| Nombre            | Descripción                            |           Tipo            |\n| :---------------- | :------------------------------------- | :-----------------------: |\n| selectedIds       | Filas seleccionadas                    |        `string[]`         |\n| onSelectionChange | Gestor de cambios de fila seleccionado | `(ids: string[]) => void` |\n\n### Ejemplo\n\n```jsx\nimport {Table, withTableSelection} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSelection(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst getRowId = 'id';\n\nfunction SelectionTable() {\n  const [selectedIds, setSelectedIds] = React.useState([1]);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      getRowId={getRowId}\n      selectedIds={selectedIds}\n      onSelectionChange={setSelectedIds}\n    />\n  );\n}\n```\n\n## Uso `Table` con el `withTableSettings` HOC\n\nEste HOC habilita funciones para la configuración de las columnas de la tabla. Puedes usarlo de dos maneras:\n\n```jsx\nimport {Table, withTableSettings} from './withTableSettings';\n\n// No options passed\nconst MyTable1 = withTableSettings(Table);\n// or with options\nconst MyTable1 = withTableSettings({sortable: false})(Table);\n```\n\n### Opciones\n\n| Nombre       | Descripción                                                        |       Tipo       | Predeterminado |\n| :----------- | :----------------------------------------------------------------- | :--------------: | :------------: |\n| anchura      | Ancho de la ventana emergente de configuración                     | `number` `\"fit\"` |                |\n| clasificable | Activa o desactiva los elementos de configuración de clasificación |    `boolean`     |     `true`     |\n| filtrable    | Activa o desactiva los elementos de configuración de filtrado      |    `boolean`     |    `false`     |\n\n### ColumnMeta\n\n| Nombre            | Descripción                                                                     |   Tipo    | Predeterminado |\n| :---------------- | :------------------------------------------------------------------------------ | :-------: | :------------: |\n| selectedByDefault | Activa o desactiva la selección de una columna si falta en la configuración     | `boolean` |     `true`     |\n| selectedAlways    | Hace que la columna esté siempre seleccionada. No puede cambiar su visibilidad. | `boolean` |    `false`     |\n\n### Propiedades\n\n| Nombre                     | Descripción                                                                        |                           Tipo                           |\n| :------------------------- | :--------------------------------------------------------------------------------- | :------------------------------------------------------: |\n| settingsPopupWidth         | `TableColumnSetup` ancho de ventana emergente                                      |                     `number` `\"fit\"`                     |\n| ajustes                    | Ajustes actuales                                                                   |                   `TableSettingsData`                    |\n| updateSettings             | Gestor de actualización de ajustes                                                 |     `(datos: TableSettingsData () = Promesa><void>`      |\n| renderControls             | Permite renderizar acciones personalizadas                                         |                     `RenderControls`                     |\n| settingsFilterPlaceholder  | Texto que aparece en el control cuando no hay ningún valor de búsqueda establecido |                         `string`                         |\n| settingsFilterEmptyMessage | Texto que aparece cuando no se encuentra ningún elemento                           |                         `string`                         |\n| filterSettings             | Función para filtrar artículos                                                     | `(value: string, item: TableColumnSetupItem) => boolean` |\n\n### TableSettingsData\n\n```ts\ntype TableSettingsData = Array<{\n  id: string;\n  isSelected?: boolean;\n}>;\n```\n\n### RenderControls\n\n```ts\ntype RenderControls = (params: {\n  DefaultApplyButton: React.ComponentType;\n  onApply: () => void;\n}) => React.ReactNode;\n```\n\n### Ejemplo\n\n```jsx\nimport {Table, withTableSettings} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSettings({width: 100, sortable: false})(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst initialSettings = [\n  {id: 'id', isSelected: false},\n  {id: 'text', isSelected: true},\n];\n\nfunction SelectionTable() {\n  const [settings, setSettings] = React.useState(initialSettings);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      settings={settings}\n      updateSettings={(settings) => {\n        setSettings(settings);\n        return Promise.resolve();\n      }}\n      renderControls={({DefaultApplyButton, onApply}) => (\n        <Flex gapRow=\"1\" direction=\"column\">\n          <Button\n            view=\"outlined-warning\"\n            onClick={() => {\n              onApply();\n              setSettings(initialSettings);\n            }}\n          >\n            Reset\n          </Button>\n          <DefaultApplyButton />\n        </Flex>\n      )}\n    />\n  );\n}\n```\n\n## Uso `Table` con el `withTableSorting` HOC\n\nEste HOC permite la clasificación de columnas.\n\n### ColumnMeta\n\n| Nombre           | Descripción                                                                                                                                                                           |                       Tipo                       | Predeterminado |\n| :--------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :----------------------------------------------: | :------------: |\n| defaultSortOrder | Establece el orden de clasificación principal                                                                                                                                         |                 `\"asc\"` `\"desc\"`                 |     `asc`      |\n| ordenar          | Función de clasificación. Debe devolver un valor para ordenar en orden ascendente. Si se establece en verdadero, los valores de las celdas se comparan y ordenan en orden ascendente. | `boolean` `((itemA: any, itemB: any) => number)` |                |\n\n### Propiedades\n\n| Nombre            | Descripción                                                             |                 Tipo                  |\n| :---------------- | :---------------------------------------------------------------------- | :-----------------------------------: |\n| defaultSortState  | Estado de clasificación predeterminado para un componente no controlado |           `TableSortState`            |\n| sortState         | Estado de clasificación                                                 |           `TableSortState`            |\n| onSortStateChange | Identificador de cambio de estado de clasificación                      | `(sortState: TableSortState) => void` |\n\nSi faltan `onSortStateChange` las propiedades `sortState` y, el estado de clasificación se almacena en el propio componente.\n\n### TableSortState\n\n```ts\ntype TableSortState = Array<{\n  column: string;\n  order: 'asc' | 'desc';\n}>;\n```\n\n### Ejemplo\n\n```jsx\nimport {Table, withTableSorting} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSorting(Table);\nconst data = [\n  {id: 1, text: 'Hello', date: '2016-10-25'},\n  {id: 2, text: 'World', date: '2020-08-15'},\n];\nconst columns = [\n  {id: 'id', meta: {sort: true}},\n  {\n    id: 'text',\n    meta: {defaultSortOrder: 'desc', sort: (a, b) => Date.parse(a.date) - Date.parse(b.date)},\n  },\n];\n\nconst table = <MyTable data={data} columns={columns} />;\n```\n","_nextI18Next":{"initialI18nStore":{"es":{"common":{"pageNotFound":"Página No Encontrada","pageNotFoundDescription":"La página que estás buscando no existe o ha sido movida.","backToHome":"Volver al Inicio","actions_open":"Abrir","actions_copyToClipboard":"Copiar al portapapeles","actions_share":"Compartir","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Parque infantil","menu_libraries":"Bibliotecas","menu_components":"Componentes","menu_design":"Diseño","menu_editor":"Redactor","menu_icons":"Iconos","menu_themer":"Temer","roadmap_inProgress":"En progreso","navigation_previous":"Anterior","navigation_next":"Próxima","emptySearchPlaceholder":"No se encontró nada","show_more":"Mostrar más","show_less":"Mostrar menos"},"component":{"actions_openInFigma":"Abrir en Figma","title":"Componentes","searchPlaceholder":"Buscar por nombre de componente","color-input_validation-format-error":"Formato incorrecto","maintainers_one":"Mantenedor:","maintainers_other":"Mantenedores:","maintainers":"Mantenedores:","theme":"Tema Switch","rtlOn":"Activa RTL","rtlOff":"Desactivar RTL","rtlNotSupported":"RTL no es compatible"},"libraries-info":{"description_uikit":"Componentes de interfaz de usuario básicos y tokens para crear servicios con Gravity.","description_components":"Un conjunto de componentes complejos de React.","description_icons":"Conjunto con cientos de diferentes iconos SVG modernos para tus proyectos.","description_illustrations":"Conjunto de ilustraciones para mostrar los estados de los datos.","description_dynamic-forms":"Biblioteca para renderizar formularios de reacción limpios y funcionales descritos por el esquema JSON","description_page-constructor":"Un conjunto de bloques elegantes y funcionales para crear rápidamente páginas promocionales y de destino.","description_blog-constructor":"Una biblioteca basada en la biblioteca del constructor de páginas para crear servicios similares a los de un blog.","description_chartkit":"Una suite de visualización de datos integrada con nuestro sistema de diseño.","description_dashkit":"Un componente de cuadrícula para crear paneles interactivos.","description_yagr":"Un renderizador de gráficos de lienzo de alto rendimiento, basado en uPlot.","description_nodekit":"Un kit de herramientas sencillo para tus aplicaciones, scripts y bibliotecas de Node.js.","description_expresskit":"Envoltorio ligero de express.js que se integra con NodeKit.","description_app-layout":"Generador de diseño HTML utilizado en nuestras aplicaciones de SPA.","description_app-builder":"Generador de activos estáticos basado en Webpack utilizado en nuestras aplicaciones SPA.","description_navigation":"Un panel de navegación compacto y ampliable para servicios complejos.","description_date-utils":"Ayudantes para administrar los valores de fecha y hora.","description_date-components":"Varios componentes de fecha.","description_axios-wrapper":"Envoltorio Axios que proporciona la cancelación automática de solicitudes simultáneas.","description_dialog-fields":"Un contenedor de formularios de reacción final que proporciona algunos componentes útiles de alto nivel para crear formularios.","description_paranoid":"Visualizador de topologías de clústeres.","description_react-data-table":"Un componente de reacción para renderizar tablas grandes y complejas.","description_unipika":"Biblioteca de formato de datos.","description_ui-logger":"Registrador sencillo del lado del cliente.","description_oauth-clients":"Biblioteca OAuth de cliente que proporciona una práctica abstracción además del flujo de autenticación.","description_i18n":"Ayudantes de internacionalización de proyectos de Gravity UI.","description_eslint-config":"Configuración preestablecida de ESLint para proyectos de interfaz de usuario de Gravity.","description_tsconfig":"Configuración preestablecida del compilador de TypeScript para proyectos de interfaz de usuario de Gravity.","description_prettier-config":"Configuración preestablecida más bonita para proyectos de interfaz de usuario de Gravity.","description_stylelint-config":"Configuración preestablecida de Stylelint para proyectos de interfaz de usuario de Gravity.","description_babel-preset":"Configuración predeterminada de Babel para proyectos de interfaz de usuario de Gravity.","description_browserslist-config":"Los navegadores muestran los ajustes preestablecidos de configuración utilizados en nuestros servicios.","description_markdown-editor":"Una potente herramienta para trabajar con Markdown, que combina los modos WYSIWYG y Markup.","description_graph":"Renderizador de gráficos de alto rendimiento con detalle dinámico compatible con la escala","description_data-source":"Un envoltorio sobre la obtención de datos.","description_webpack-i18n-assets-plugin":"Un complemento para Webpack que reemplaza las llamadas a las funciones de localización (i18n) por textos de destino.","description_table":"Biblioteca para visualizar datos en formato tabular."}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"es","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}