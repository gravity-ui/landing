{"pageProps":{"libId":"uikit","componentId":"select","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Seleccione\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Select} from '@gravity-ui/uikit';\n```\n\n`Select` es un control que proporciona una lista de opciones que un usuario puede seleccionar.\n\n## Opciones\n\nOpciones para seleccionar.\n\n### Definir opciones\n\nPuede definir las opciones como una matriz de objetos o como elementos secundarios de un componente. El primer enfoque es útil para los casos en que las opciones requieren una preparación compleja y, posiblemente, la memorización. El segundo es conveniente cuando hay pocas opciones y su configuración no requiere cálculos complejos.\n\n#### Lista plana\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"value\"\n  options={[\n    {value: 'val_1', content: 'Value 1'},\n    {value: 'val_2', content: 'Value 2'},\n    {value: 'val_3', content: 'Value 3'},\n    {value: 'val_4', content: 'Value 4'},\n  ]}\n/>\n<Select placeholder=\"value\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <div>\n    Array of objects\n    <UIKit.Select placeholder=\"value\"\n      options={[\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ]}\n    />\n  </div>\n  <div>\n    Child nodes\n    <UIKit.Select placeholder=\"value\">\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n// Array of objects\n<Select\n  placeholder=\"value\"\n  options={[\n    {value: 'val_1', content: 'Value 1'},\n    {value: 'val_2', content: 'Value 2'},\n    {value: 'val_3', content: 'Value 3'},\n    {value: 'val_4', content: 'Value 4'},\n  ]}\n/>\n// Child nodes\n<Select placeholder=\"value\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n#### Lista agrupada\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"value\"\n  options={[\n    {\n      label: 'Group 1',\n      options: [\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n      ],\n    },\n    {\n      label: 'Group 2',\n      options: [\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ],\n    },\n  ]}\n/>\n<Select placeholder=\"value\">\n  <Select.OptionGroup label=\"Group 1\">\n    <Select.Option value=\"val_1\" content=\"Value 1\" />\n    <Select.Option value=\"val_2\" content=\"Value 2\" />\n  </Select.OptionGroup>\n  <Select.OptionGroup label=\"Group 2\">\n    <Select.Option value=\"val_3\" content=\"Value 3\" />\n    <Select.Option value=\"val_4\" content=\"Value 4\" />\n  </Select.OptionGroup>\n</Select>\n`}\n>\n  <div>\n    Array of objects\n    <UIKit.Select\n      placeholder=\"value\"\n      options={[\n        {\n          label: 'Group 1',\n          options: [\n            {value: 'val_1', content: 'Value 1'},\n            {value: 'val_2', content: 'Value 2'},\n          ],\n        },\n        {\n          label: 'Group 2',\n          options: [\n            {value: 'val_3', content: 'Value 3'},\n            {value: 'val_4', content: 'Value 4'},\n          ],\n        },\n      ]}\n    />\n  </div>\n  <div>\n    Child nodes\n    <UIKit.Select placeholder=\"value\">\n      <UIKit.Select.OptionGroup label=\"Group 1\">\n        <UIKit.Select.Option value=\"val_1\" content=\"Value 1\" />\n        <UIKit.Select.Option value=\"val_2\" content=\"Value 2\" />\n      </UIKit.Select.OptionGroup>\n      <UIKit.Select.OptionGroup label=\"Group 2\">\n        <UIKit.Select.Option value=\"val_3\" content=\"Value 3\" />\n        <UIKit.Select.Option value=\"val_4\" content=\"Value 4\" />\n      </UIKit.Select.OptionGroup>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n// Array of objects\n<Select\n  placeholder=\"value\"\n  options={[\n    {\n      label: 'Group 1',\n      options: [\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n      ],\n    },\n    {\n      label: 'Group 2',\n      options: [\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ],\n    },\n  ]}\n/>\n// Child nodes\n<Select placeholder=\"value\">\n  <Select.OptionGroup label=\"Group 1\">\n    <Select.Option value=\"val_1\" content=\"Value 1\" />\n    <Select.Option value=\"val_2\" content=\"Value 2\" />\n  </Select.OptionGroup>\n  <Select.OptionGroup label=\"Group 2\">\n    <Select.Option value=\"val_3\" content=\"Value 3\" />\n    <Select.Option value=\"val_4\" content=\"Value 4\" />\n  </Select.OptionGroup>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Almacenamiento de datos en opciones\n\nPuede definir y almacenar datos únicos en cada opción mediante la `option.data` propiedad. Esto puede resultar útil cuando necesitas enriquecer los datos al usar la `onUpdate` devolución de llamada o, por ejemplo, al dibujar tus opciones con `renderOption` ella.\n\n## Selección de varias opciones\n\nPara habilitar la selección múltiple, utilice la `multiple` propiedad. Su valor predeterminado es `false`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select multiple={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select multiple={true} placeholder=\"values\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select multiple={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Contador\n\nPuede añadir un contador de los elementos seleccionados al componente mediante la `hasCounter` propiedad.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select multiple={true} hasCounter={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select multiple={true} hasCounter={true} placeholder=\"values\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select multiple={true} hasCounter={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Opciones de filtrado\n\nPara habilitar la sección de filtro, utilice la `filterable` propiedad. Su valor predeterminado es `false`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select filterable={true} placeholder=\"Filterable\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select filterable={true} placeholder=\"Filterable\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select filterable={true} placeholder=\"Filterable\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Tamaño\n\nPara administrar el tamaño predeterminado de los controles y las opciones, utilice la `size` propiedad. Su tamaño predeterminado es `m`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select size=\"s\" placeholder=\"S Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"m\" placeholder=\"M Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"l\" placeholder=\"L Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"xl\" placeholder=\"XL Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select size=\"s\" placeholder=\"S Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"m\" placeholder=\"M Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"l\" placeholder=\"L Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"xl\" placeholder=\"XL Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select size=\"s\" placeholder=\"S Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"m\" placeholder=\"M Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"l\" placeholder=\"L Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"xl\" placeholder=\"XL Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Ancho de control\n\nDe forma predeterminada, el ancho del control se amplía para que coincida con el ancho del contenido de las opciones seleccionadas. Puede administrarlo utilizando la `width` propiedad:\n\n`'max'`: Se extiende a todo el ancho del padre.\n\n`number`: Aplica el ancho en píxeles.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select width=\"max\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select width={150}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <UIKit.Select multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Max</h4>\n    <UIKit.Select width=\"max\" multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <UIKit.Select width={110} multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Anchura de la ventana emergente\n\nPuede gestionar el ancho de la ventana emergente con la `popupWidth` propiedad. Los valores disponibles son:\n\n`'fit'`: Aplica el ancho de control.\n\n`number`: Aplica el ancho en píxeles.\n\nPuntos a tener en cuenta sobre el comportamiento predeterminado:\n\n- El ancho de la ventana emergente es igual al ancho de la opción más ancha, pero no más ancho que `90vw`. Esto no se aplica en caso de que utilice [la virtualización](#virtualized-list).\n\n- Las opciones limitadas se amplían para ajustarse al ancho del control.\n\n<!--LANDING_BLOCK\n\n### Non-virtualized list\n\nA regular list when all the elements are in the dom tree at once.\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\">\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Fit</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth=\"fit\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth=\"fit\">\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth={80}>\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth={80}>\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n### Lista virtualizada\n\nPara una visualización óptima de una gran cantidad de opciones, `Select` tiene una herramienta de virtualización de listas incorporada. La virtualización se habilita después de superar el umbral del número de opciones (de forma`50` predeterminada). Puede administrar este valor mediante la `virtualizationThreshold` propiedad.\n\nCuando se utiliza la virtualización, se aplican algunas restricciones al elemento emergente:\n\n- El ancho de la ventana emergente ya no se ajusta a la longitud de la opción más larga.\n\n- El ancho mínimo de la ventana emergente es igual al ancho del control o `100px` si el control es más corto.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\">\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\">\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Loooooooooooooooooooong Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth={80}>\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth={80}>\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Loooooooooooooooooooong Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Uso avanzado\n\nHay muchas formas de personalizar tu `Select`.\n\n### Representación del control personalizado\n\nPara renderizar un control personalizado, utilice la `renderControl` propiedad.\nNota: Debes reenviar todos los argumentos a tu nodo para permitir un comportamiento coherente, igual que cuando usas el control predeterminado.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderControl={({onClick, onKeyDown, ref}) => {\n    return <button ref={ref} onClick={onClick} extraProps={{onKeyDown}}>Custom control</button>\n  }}\n>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select renderControl={({onClick, onKeyDown, ref}) => {\n    return <button ref={ref} onClick={onClick} extraProps={{onKeyDown}}>Custom control</button>\n  }}>\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {Button} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderControl: SelectProps['renderControl'] = ({onClick, onKeyDown, ref}) => {\n    return (\n      <Button\n        ref={ref}\n        onClick={onClick}\n        extraProps={{\n          onKeyDown,\n        }}\n      >\n        Your control\n      </Button>\n    );\n  };\n\n  return <Select renderControl={renderControl}>/* Your options here */</Select>;\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Modelización de la sección de filtros personalizados\n\nPara renderizar una sección de filtro personalizada, utilice la `renderFilter` propiedad y establezca la `filterable` propiedad en `true`.\nNota: Debes reenviar todos los argumentos a tu nodo para habilitar un filtro que funcione correctamente, igual que cuando usas la configuración predeterminada.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"Custom filter\"\n  filterable={true}\n  renderFilter={({onChange, onKeyDown, ref, value}) => {\n    return (\n      <div style={{display: 'flex', flexDirection: 'column'}}>\n        <input\n          ref={ref}\n          value={value}\n          size=\"1\"\n          onKeyDown={onKeyDown}\n          onChange={(e) => onChange(e.target.value)}\n        />\n        <button>Do smth</button>\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom filter\"\n    filterable={true}\n    renderFilter={({onChange, onKeyDown, ref, value}) => {\n      return (\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n          <input\n            ref={ref}\n            value={value}\n            size=\"1\"\n            onKeyDown={onKeyDown}\n            onChange={(e) => onChange(e.target.value)}\n          />\n          <button>Do smth</button>\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {Button, TextInput} from '@gravity-ui/uikit';\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderFilter: SelectProps['renderFilter'] = (props) => {\n    const {value, ref, onChange, onKeyDown} = props;\n\n    return (\n      <div>\n        <TextInput\n          controlRef={ref}\n          controlProps={{size: 1}}\n          value={value}\n          onUpdate={onChange}\n          onKeyDown={onKeyDown}\n        />\n        <Button>Do smth</Button>\n      </div>\n    );\n  };\n\n  return (\n    <Select filterable={true} renderFilter={renderFilter}>\n      /* Your options here */\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Opciones personalizadas de renderizado\n\nPara renderizar opciones personalizadas, utilice la `renderOption` propiedad:\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderOption={(option) => {\n    return (\n      <div style={{color: option.data.color}}>\n        {option.children}\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom options\"\n    renderOption={(option) => {\n      return (\n        <div style={{color: option.data.color}}>\n          {option.children}\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderOption: SelectProps['renderOption'] = (option) => {\n    return <div style={{color: option.data.color}}>{option.children}</div>;\n  };\n\n  return (\n    <Select renderOption={renderOption}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Modelizar las opciones seleccionadas personalizadas\n\nPara renderizar las opciones seleccionadas personalizadas, utilice la `renderSelectedOption` propiedad:\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderSelectedOption={(option) => {\n    return (\n      <div style={{color: option.data.color}}>\n        {option.children}\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom selected options\"\n    renderSelectedOption={(option) => {\n      return (\n        <div style={{color: option.data.color}}>\n          {option.children}\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderSelectedOption: SelectProps['renderSelectedOption'] = (option) => {\n    return <div style={{color: option.data.color}}>{option.children}</div>;\n  };\n\n  return (\n    <Select renderSelectedOption={renderSelectedOption}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Opciones de renderizado con diferentes alturas\n\nLas opciones tienen una altura fija según la `size` propiedad. Si necesita renderizar opciones con alturas diferentes, puede usar la `option.data` propiedad. Almacenará información sobre la altura que necesita establecer para las opciones, así como la `getOptionHeight` propiedad para establecer este valor.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  getOptionHeight={(option) => option.data.height}\n>\n  <Select.Option value=\"val_1\" data={{height: 20}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{height: 40}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{height: 60}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{height: 80}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Different heights\"\n    getOptionHeight={(option) => option.data.height}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{height: 20}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{height: 40}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{height: 60}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{height: 80}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const getOptionHeight: SelectProps['getOptionHeight'] = (option) => option.data.height;\n\n  return (\n    <Select getOptionHeight={getOptionHeight}>\n      <Select.Option value=\"val_1\" data={{height: 20}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{height: 40}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{height: 60}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{height: 80}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Representación de una ventana emergente personalizada\n\nPara representar una ventana emergente personalizada, utilice la `renderPopup` propiedad.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  filterable\n  placeholder=\"Custom popup\"\n  renderPopup={({renderList, renderFilter}) => {\n    return (\n      <React.Fragment>\n        {renderFilter()}\n        <div style={{width: \"100%\", height: \"20px\", backgroundColor: \"tomato\"}} />\n        {renderList()}\n      </React.Fragment>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    filterable\n    placeholder=\"Custom popup\"\n    renderPopup={({renderList, renderFilter}) => {\n      return (\n        <React.Fragment>\n          {renderFilter()}\n          <div style={{width: \"100%\", height: \"20px\", backgroundColor: \"tomato\"}} />\n          {renderList()}\n        </React.Fragment>\n  );\n}}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst renderPopup: SelectProps['renderPopup'] = ({renderList, renderFilter}) => {\n  return (\n    <React.Fragment>\n      {renderFilter()}\n      <div className=\"CustomElement\" />\n      {renderList()}\n    </React.Fragment>\n  );\n};\n\nconst MyComponent = () => {\n  return (\n    <Select filterable renderPopup={renderPopup}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Error\n\nEste `Select` estado se debe a una entrada de usuario incorrecta. Para cambiar el `Select` aspecto, utilice la `validationState` propiedad con el `\"invalid\"` valor. Si lo desea, puede proporcionar un mensaje de error a través de la `errorMessage` propiedad. De forma predeterminada, el texto del mensaje se representa fuera del componente.\nPuede cambiarlo con la `errorPlacement` propiedad.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Select\n    placeholder=\"Placeholder\"\n    errorMessage=\"Error message\"\n    validationState=\"invalid\"\n>\n    <Select.Option value=\"val_1\">Value 1</Select.Option>\n    <Select.Option value=\"val_2\">Value 2</Select.Option>\n    <Select.Option value=\"val_3\">Value 3</Select.Option>\n    <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select\n    placeholder=\"Placeholder\"\n    errorPlacement=\"inside\"\n    errorMessage=\"Error message\"\n    validationState=\"invalid\"\n>\n    <Select.Option value=\"val_1\">Value 1</Select.Option>\n    <Select.Option value=\"val_2\">Value 2</Select.Option>\n    <Select.Option value=\"val_3\">Value 3</Select.Option>\n    <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n    <UIKit.Select placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n    <UIKit.Select placeholder=\"Placeholder\" errorPlacement=\"inside\" errorMessage=\"Error message\" validationState=\"invalid\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n## Propiedades\n\n| Nombre                                                    | Descripción                                                                                                                                            | Tipo                                                         | Predeterminado                                           |\n| :-------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- | :----------------------------------------------------------- | :------------------------------------------------------- |\n| className                                                 | Nombre de clase de control                                                                                                                             | `string`                                                     |                                                          |\n| defaultValue                                              | Valores predeterminados que representan las opciones seleccionadas en caso de usar un estado no controlado                                             | `string[]`                                                   |                                                          |\n| inhabilitado                                              | Muestra que el usuario no puede trabajar con el control                                                                                                | `boolean`                                                    | `false`                                                  |\n| [filtrable](#filtering-options)                           | Muestra que la ventana emergente de selección tiene una sección de filtro                                                                              | `boolean`                                                    | `false`                                                  |\n| filterOption                                              | Se usa para comparar la opción con el filtro                                                                                                           | `function`                                                   |                                                          |\n| filterPlaceholder                                         | Texto de marcador de posición de entrada de filtro predeterminado                                                                                      | `string`                                                     |                                                          |\n| [getOptionHeight](#render-options-with-different-heights) | Se utiliza para establecer la altura de las opciones de usuario personalizadas                                                                         | `function`                                                   |                                                          |\n| getOptionGroupHeight                                      | Se utiliza para establecer la altura del grupo de opciones de usuario personalizado                                                                    | `function`                                                   |                                                          |\n| hasClear                                                  | Activa la visualización del icono para borrar las opciones seleccionadas                                                                               | `boolean`                                                    | `false`                                                  |\n| identificación                                            | `id` Atributo HTML                                                                                                                                     | `string`                                                     |                                                          |\n| etiqueta                                                  | Etiqueta de control                                                                                                                                    | `string`                                                     |                                                          |\n| cargando                                                  | Añade el elemento de carga al final de la lista de opciones. Funciona como un indicador de carga persistente mientras la lista de opciones está vacía. | `boolean`                                                    |                                                          |\n| [múltiple](#selecting-multiple-options)                   | Muestra si se pueden seleccionar varias opciones en la lista                                                                                           | `boolean`                                                    | `false`                                                  |\n| nombre                                                    | Nombre del control                                                                                                                                     | `string`                                                     |                                                          |\n| onBlur                                                    | Controlador que se invoca cuando el elemento pierde el foco.                                                                                           | `function`                                                   |                                                          |\n| filtrar                                                   | Valor de filtro controlado                                                                                                                             | `string`                                                     | `''`                                                     |\n| onFilterChange                                            | Se dispara cada vez que se cambia el filtro                                                                                                            | `function`                                                   |                                                          |\n| onFocus                                                   | Controlador que se llama cuando el elemento se enfoca                                                                                                  | `function`                                                   |                                                          |\n| onLoadMore                                                | Se activa cuando el indicador de carga se hace visible                                                                                                 | `function`                                                   |                                                          |\n| onOpenChange                                              | Se activa cada vez que se cambia la visibilidad de la ventana emergente                                                                                | `function`                                                   |                                                          |\n| onUpdate                                                  | Se activa cuando el usuario comete una modificación del `Select` valor                                                                                 | `function`                                                   |                                                          |\n| [opciones](#options)                                      | Opciones para seleccionar                                                                                                                              | `(Seleccione la opción\\| [Seleccione el grupo de opciones)]` |                                                          |\n| alfiler                                                   | Controlar la vista de la frontera                                                                                                                      | `string`                                                     | `'round-round'`                                          |\n| marcador de posición                                      | Texto de marcador de posición                                                                                                                          | `string`                                                     |                                                          |\n| popupClassName                                            | Ventana emergente con la lista de opciones `className`                                                                                                 | `string`                                                     |                                                          |\n| popupPlacement                                            | Colocación de ventanas emergentes                                                                                                                      | `PopupPlacement` `Matriz<PopupPlacement>`                    | `['bottom-start', 'bottom-end', 'top-start', 'top-end']` |\n| [popupWidth](#popup-width)                                | Anchura de la ventana emergente                                                                                                                        | `número\\| 'ajustado'\\| 'atuendo'`                            | `'outfit'`                                               |\n| qa                                                        | Atributo de identificación de prueba (`data-qa`)                                                                                                       | `string`                                                     |                                                          |\n| [renderControl](#render-custom-control)                   | Se usa para renderizar el control del usuario                                                                                                          | `function`                                                   |                                                          |\n| renderEmptyOptions                                        | Se usa para representar un nodo para una lista de opciones vacía                                                                                       | `function`                                                   |                                                          |\n| [renderFilter](#render-custom-filter-section)             | Se usa para renderizar la sección de filtro de usuario                                                                                                 | `function`                                                   |                                                          |\n| [renderOption](#render-custom-options)                    | Se usa para representar las opciones de usuario                                                                                                        | `function`                                                   |                                                          |\n| renderOptionGroup                                         | Se usa para representar grupos de opciones de usuario                                                                                                  | `function`                                                   |                                                          |\n| [renderSelectedOption](#render-custom-selected-options)   | Se usa para representar las opciones seleccionadas por el usuario                                                                                      | `function`                                                   |                                                          |\n| [renderPopup](#render-custom-popup)                       | Se utiliza para representar el contenido emergente del usuario                                                                                         | `function`                                                   |                                                          |\n| [tamaño](#size)                                           | Tamaño de control/ opciones                                                                                                                            | `string`                                                     | `'m'`                                                    |\n| valor                                                     | Valores que representan las opciones seleccionadas                                                                                                     | `string[]`                                                   |                                                          |\n| vista                                                     | Vista de control                                                                                                                                       | `string`                                                     | `'normal'`                                               |\n| [virtualizationThreshold](#virtualized-list)              | Umbral de recuento de opciones tras el cual se habilita la virtualización                                                                              | `number`                                                     | `50`                                                     |\n| [anchura](#control-width)                                 | Ancho de control                                                                                                                                       | `cadena\\| número`                                            | `undefined`                                              |\n| errorMessage                                              | Texto de error                                                                                                                                         | `string`                                                     |                                                          |\n| errorPlacement                                            | Posición de error                                                                                                                                      | `outside` `inside`                                           | `outside`                                                |\n| validationState                                           | Estado de validación                                                                                                                                   | `\"invalid\"`                                                  |                                                          |\n| [hasCounter](#counter)                                    | Muestra el recuento de opciones seleccionadas. El contador solo aparece cuando la selección [múltiple](#selecting-multiple-options) está habilitada.   | `boolean`                                                    |\n\n## API CSS\n\n| Nombre                           | Descripción                                                         |\n| :------------------------------- | :------------------------------------------------------------------ |\n| `--g-select-focus-outline-color` | Color del contorno si está enfocado (falta de forma predeterminada) |\n","_nextI18Next":{"initialI18nStore":{"es":{"common":{"pageNotFound":"Página No Encontrada","pageNotFoundDescription":"La página que estás buscando no existe o ha sido movida.","backToHome":"Volver al Inicio","actions_open":"Abrir","actions_copyToClipboard":"Copiar al portapapeles","actions_share":"Compartir","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Parque infantil","menu_libraries":"Bibliotecas","menu_components":"Componentes","menu_design":"Diseño","menu_editor":"Redactor","menu_icons":"Iconos","menu_themer":"Temer","roadmap_inProgress":"En progreso","navigation_previous":"Anterior","navigation_next":"Próxima","emptySearchPlaceholder":"No se encontró nada","show_more":"Mostrar más","show_less":"Mostrar menos"},"component":{"actions_openInFigma":"Abrir en Figma","title":"Componentes","searchPlaceholder":"Buscar por nombre de componente","color-input_validation-format-error":"Formato incorrecto","maintainers_one":"Mantenedor:","maintainers_other":"Mantenedores:","maintainers":"Mantenedores:","theme":"Tema Switch","rtlOn":"Activa RTL","rtlOff":"Desactivar RTL","rtlNotSupported":"RTL no es compatible"},"libraries-info":{"description_uikit":"Componentes de interfaz de usuario básicos y tokens para crear servicios con Gravity.","description_components":"Un conjunto de componentes complejos de React.","description_icons":"Conjunto con cientos de diferentes iconos SVG modernos para tus proyectos.","description_illustrations":"Conjunto de ilustraciones para mostrar los estados de los datos.","description_dynamic-forms":"Biblioteca para renderizar formularios de reacción limpios y funcionales descritos por el esquema JSON","description_page-constructor":"Un conjunto de bloques elegantes y funcionales para crear rápidamente páginas promocionales y de destino.","description_blog-constructor":"Una biblioteca basada en la biblioteca del constructor de páginas para crear servicios similares a los de un blog.","description_chartkit":"Una suite de visualización de datos integrada con nuestro sistema de diseño.","description_dashkit":"Un componente de cuadrícula para crear paneles interactivos.","description_yagr":"Un renderizador de gráficos de lienzo de alto rendimiento, basado en uPlot.","description_nodekit":"Un kit de herramientas sencillo para tus aplicaciones, scripts y bibliotecas de Node.js.","description_expresskit":"Envoltorio ligero de express.js que se integra con NodeKit.","description_app-layout":"Generador de diseño HTML utilizado en nuestras aplicaciones de SPA.","description_app-builder":"Generador de activos estáticos basado en Webpack utilizado en nuestras aplicaciones SPA.","description_navigation":"Un panel de navegación compacto y ampliable para servicios complejos.","description_date-utils":"Ayudantes para administrar los valores de fecha y hora.","description_date-components":"Varios componentes de fecha.","description_axios-wrapper":"Envoltorio Axios que proporciona la cancelación automática de solicitudes simultáneas.","description_dialog-fields":"Un contenedor de formularios de reacción final que proporciona algunos componentes útiles de alto nivel para crear formularios.","description_paranoid":"Visualizador de topologías de clústeres.","description_react-data-table":"Un componente de reacción para renderizar tablas grandes y complejas.","description_unipika":"Biblioteca de formato de datos.","description_ui-logger":"Registrador sencillo del lado del cliente.","description_oauth-clients":"Biblioteca OAuth de cliente que proporciona una práctica abstracción además del flujo de autenticación.","description_i18n":"Ayudantes de internacionalización de proyectos de Gravity UI.","description_eslint-config":"Configuración preestablecida de ESLint para proyectos de interfaz de usuario de Gravity.","description_tsconfig":"Configuración preestablecida del compilador de TypeScript para proyectos de interfaz de usuario de Gravity.","description_prettier-config":"Configuración preestablecida más bonita para proyectos de interfaz de usuario de Gravity.","description_stylelint-config":"Configuración preestablecida de Stylelint para proyectos de interfaz de usuario de Gravity.","description_babel-preset":"Configuración predeterminada de Babel para proyectos de interfaz de usuario de Gravity.","description_browserslist-config":"Los navegadores muestran los ajustes preestablecidos de configuración utilizados en nuestros servicios.","description_markdown-editor":"Una potente herramienta para trabajar con Markdown, que combina los modos WYSIWYG y Markup.","description_graph":"Renderizador de gráficos de alto rendimiento con detalle dinámico compatible con la escala","description_data-source":"Un envoltorio sobre la obtención de datos.","description_webpack-i18n-assets-plugin":"Un complemento para Webpack que reemplaza las llamadas a las funciones de localización (i18n) por textos de destino.","description_table":"Biblioteca para visualizar datos en formato tabular."}},"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"es","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}