{"pageProps":{"libId":"uikit","componentId":"slider","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Slider\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Slider} from '@gravity-ui/uikit';\n```\n\nThe slider is a customizable and responsive React component that allows users to select a single value or a range of values from a specified data set.\n\n## Slider variations\n\n### Single slider\n\nThis is a slider with one handle to select a single value. It is used by default.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider />\n`}\n>\n    <UIKitExamples.SliderExample />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Range slider\n\nThis is slider with two handles to select a range. To use it, set `defaultValue` (for an uncontrolled slider) or `value` (for a controlled one) for the array.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider defaultValue={[20, 40]} />\n`}\n>\n    <UIKitExamples.SliderExample defaultValue={[20, 40]} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider defaultValue={[20, 40]} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## States\n\n### Disabled\n\nThis is a state of a `Slider` where you do not want to allow the user to work with this component.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider disabled={true} />\n`}\n>\n    <UIKitExamples.SliderExample disabled={true} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider disabled={true} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Error\n\nThis `Slider` state is for incorrect user input. To change the `Slider` appearance, use the `validationState` property with the `\"invalid\"` value. Optionally, you can provide an error message through the `errorMessage` property. This message text will be rendered under the slider.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider validationState={\"invalid\"} />\n<Slider validationState={\"invalid\"} errorMessage=\"Error message\" />\n`}\n>\n    <UIKitExamples.SliderExample validationState={\"invalid\"} />\n    <UIKitExamples.SliderExample validationState={\"invalid\"} errorMessage=\"Error message\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider validationState={\"invalid\"} />\n<Slider validationState={\"invalid\"} errorMessage=\"Error message\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\nUse the `size` property to manage the `Slider` size. The default size is `m`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider size=\"s\" />\n<Slider size=\"m\" />\n<Slider size=\"l\" />\n<Slider size=\"xl\" />\n`}\n>\n    <UIKitExamples.SliderExample size=\"s\" />\n    <UIKitExamples.SliderExample size=\"m\" />\n    <UIKitExamples.SliderExample size=\"l\" />\n    <UIKitExamples.SliderExample size=\"xl\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider size=\"s\" />\n<Slider size=\"m\" />\n<Slider size=\"l\" />\n<Slider size=\"xl\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Value\n\n### Minimum and maximum value\n\nThe `min` and `max` properties define the limits of the range the `Slider` can handle. These properties are essential for setting the boundaries of the selectable values.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider min={10} />\n<Slider max={50} />\n<Slider min={20} max={60} />\n`}\n>\n    <UIKitExamples.SliderExample min={10} />\n    <UIKitExamples.SliderExample max={50} />\n    <UIKitExamples.SliderExample min={20} max={60} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider min={10} />\n<Slider max={50} />\n<Slider min={20} max={60} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Step\n\nThe `step` property determines the increments within the minimum and maximum value range. This means how much the value changes with a single slider move.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider step={10} />\n`}\n>\n    <UIKitExamples.SliderExample step={10} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider step={10} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Marks\n\nThe `marks` property is utilized in `Slider` component to specify visual markers along the slider that help to indicate various points between the minimum and maximum value. This property enhances the usability and visual interface of the slider, especially for denoting specific intervals. By default it is 2 (`min` and `max` values). You can use it in 2 different ways:\n\n- the amount of visual markers along the slider\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider marks={11} />\n`}\n>\n    <UIKitExamples.SliderExample marks={11} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider marks={11} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n- the array of marker values along the slider\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider marks={[0, 50, 100]} />\n`}\n>\n    <UIKitExamples.SliderExample marks={[0, 50, 100]} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider marks={[0, 50, 100]} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n`0` or empty array `[]` value in `marks` property hide all marks from `Slider`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider marks={0} />\n`}\n>\n    <UIKitExamples.SliderExample marks={0} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider marks={0} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n> The mark value is available for selection, even if it does not match the `step` value condition\n\nYou are able to change display format of marks values by using `marksFormat` property.\n\n#### Define available values\n\nYou can set `step` property to `null` to define a set of specific values that the slider can handle, as opposed to a continuous range. This is particularly useful when only certain discrete values are valid for selection. In that case properties `min`, `max` and `marks` allows specifying an array of numbers representing the exact values that users are allowed to select using the `Slider`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider marks={[10, 20, 50, 55, 65, 80]} step={null}/>\n`}\n>\n    <UIKitExamples.SliderExample marks={[10, 20, 50, 55, 65, 80]} step={null}/>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider marks={[10, 20, 50, 55, 65, 80]} step={null} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Start point\n\nThe `startPoint` property allows you to set the start point of the track. It uses the minimal `Slider` value by default. It will be ignored if you use `Slider` with range values or if you set `inverted` property.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider startPoint={50} />\n`}\n>\n    <UIKitExamples.SliderExample startPoint={50} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider startPoint={50} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Inverted\n\nThe `inverted` property allows you to set the inverted view of the `Slider`'s track.\nBy default (of `false`) `Slider` shows interval from `min` to handle.\nIf `true` then it indicates interval from pin to `max`.\nOnly for single `Slider`. Property `startPoint` will be ignored.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider inverted />\n`}\n>\n    <UIKitExamples.SliderExample inverted />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider inverted />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Tooltip\n\nThe `tooltipDisplay` property is used in `Slider` component to control the display behaviour of a tooltip that shows the current value as the user interacts with the slider. `auto` value shows tooltip only when `Slider`'s handle are hovered by cursor or focused.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Slider tooltipDisplay=\"on\" />\n`}\n>\n    <UIKitExamples.SliderExample tooltipDisplay=\"on\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Slider tooltipDisplay=\"on\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\nYou are able to change display format of tooltip value by using `tooltipFormat` property. If you don't specify `tooltipformat` then will be used `marksFormat` to display the value in tooltip.\n\n## Properties\n\n| Name                             | Description                                                                                                                                                                              |                         Type                         | Default |\n| :------------------------------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------: | :-----: |\n| apiRef                           | Ref to Slider's component props of focus and blur                                                                                                                                        |                `RefObject<SliderRef>`                |         |\n| autoFocus                        | The control's `autofocus` attribute                                                                                                                                                      |                      `boolean`                       |         |\n| className                        | The control's wrapper class name                                                                                                                                                         |                       `string`                       |         |\n| [defaultValue](#slider-variants) | The control's default value, used when the component is not controlled. It uses the minimal `Slider` value by default.                                                                   |             `number` `[number, number]`              |         |\n| [disabled](#disabled)            | Indicates that the user cannot interact with the control                                                                                                                                 |                      `boolean`                       | `false` |\n| [errorMessage](#error)           | Text of an error to show                                                                                                                                                                 |                       `string`                       |         |\n| [marks](#marks)                  | Text marks under the slider. Could be set to the amount of the slider's marks, or could be set to the array of values which should have marks. `0` or empty array value hides all marks. |                 `number` `number[]`                  |   `2`   |\n| [marksFormat](#marks)            | Formatter for the mark's displayed value                                                                                                                                                 |             `(value: number) => string`              |         |\n| [max](#min-and-max-value)        | The maximum value of the component.                                                                                                                                                      |                       `number`                       |  `100`  |\n| [min](#min-and-max-value)        | The minimum value of the component.                                                                                                                                                      |                       `number`                       |   `0`   |\n| onBlur                           | Fires when the control lost focus. Provides focus event as a callback's argument                                                                                                         | `((e: FocusEvent<HTMLDivElement, Element>) => void)` |         |\n| onUpdate                         | Fires when the slider’s value is changed by the user. Provides change event as an callback's argument                                                                                    |   `((value: number \\| [number, number]) => void)`    |         |\n| onUpdateComplete                 | Fires when ontouchend or onmouseup is triggered. Provides change event as an callback's argument                                                                                         |   `((value: number \\| [number, number]) => void)`    |         |\n| onFocus                          | Fires when the control gets focus. Provides focus event as a callback's argument                                                                                                         | `((e: FocusEvent<HTMLDivElement, Element>) => void)` |         |\n| [size](#size)                    | The size of the control                                                                                                                                                                  |               `\"s\"` `\"m\"` `\"l\"` `\"xl\"`               |  `\"m\"`  |\n| [step](#step)                    | Value to be added or subtracted on each step the slider makes. Can be set to `null` to make `marks` as steps.                                                                            |                   `number` `null`                    |   `1`   |\n| [startPoint](#start-point)       | Start point of the track. Ignored for range slider and for inverted slider.                                                                                                              |                       `number`                       |         |\n| [inverted](#inverted)            | Slider with inverted track (from handle to `max`).                                                                                                                                       |                      `boolean`                       |         |\n| tabIndex                         | The control's `tabIndex` attribute                                                                                                                                                       |             `number` `[number, number]`              |         |\n| [tooltipDisplay](#tooltip)       | The tooltip's display behaviour                                                                                                                                                          |                  `off` `on` `auto`                   |  `off`  |\n| [tooltipFormat](#tooltip)        | Formatter for the tooltip's displayed value. Uses `marksFormat` if not set                                                                                                               |             `(value: number) => string`              |         |\n| [validationState](#error)        | Validation state                                                                                                                                                                         |                     `\"invalid\"`                      |         |\n| [value](#slider-variants)        | The value of the control                                                                                                                                                                 |             `number` `[number, number]`              |         |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}