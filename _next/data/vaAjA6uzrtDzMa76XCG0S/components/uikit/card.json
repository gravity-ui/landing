{"pageProps":{"libId":"uikit","componentId":"card","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Card\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Card} from '@gravity-ui/uikit';\n```\n\n## Description\n\n`Card` is a reusable React component that basically is a card-like container with customizable styles and features. It is used to display information or content in a visually appealing and well-organized manner.\n\n## Appearance\n\n`Card` can be displayed with multiple style combinations:\n\n- `theme`: `normal`, `info`, `success`, `warning`, `danger`, or `utility`.\n- `type`: `selection`, `action`, or `container`.\n- `view`:`outlined` or `clear`, or `outlined`, `filled`, or `raised` (depending on the `type` parameter).\n\n## Theme\n\nThis parameter is used to specify the card's theme style. It determines the card's color scheme and appearance.\n\nBy specifying different theme values, you can customize the `Card` visual appearance to match your purpose and the style you need.\n\n- `normal`: Normal/default theme of the card.\n- `info`: Theme for displaying neutral information.\n- `success`: Theme for displaying positive or affirmative content.\n- `warning`: Theme for displaying warnings.\n- `danger`: Theme for displaying the content related to critical issues or errors.\n- `utility`: Theme for displaying useful tips.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\nconst style = {\n    width: '120px';\n    height: '120px';\n    display: 'flex';\n    alignItems: 'center';\n    justifyContent: 'center';\n}\n\n<Card style={style} theme=\"normal\" size=\"l\">Normal</Card>\n<Card style={style} theme=\"info\" size=\"l\">Info</Card>\n<Card style={style} theme=\"success\" size=\"l\">Success</Card>\n<Card style={style} theme=\"warning\" size=\"l\">Warning</Card>\n<Card style={style} theme=\"danger\" size=\"l\">Danger</Card>\n<Card style={style} theme=\"utility\" size=\"l\">Utility</Card>\n`}>\n\n    <div style={{display: 'grid', gridAutoFlow: 'column', gridGap: '10px'}}>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} theme=\"normal\" size=\"l\">Normal</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} theme=\"info\" size=\"l\">Info</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} theme=\"success\" size=\"l\">Success</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} theme=\"warning\" size=\"l\">Warning</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} theme=\"danger\" size=\"l\">Danger</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} theme=\"utility\" size=\"l\">Utility</UIKit.Card>\n    </div>\n\n</ExampleBlock>\nLANDING_BLOCK-->\n\n## Type\n\nThis parameter is used to define the type of the `Card` component. It allows you to customize the appearance and behavior of the card.\n\n- `container`: Card that acts as a container for other elements. It provides a structured layout for content.\n- `action`: Card with an interactive element, such as a button, that triggers an action when clicked.\n- `selection`: Card that can be selected or clicked to perform a specific action.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\nconst style = {\n    width: '120px';\n    height: '120px';\n    display: 'flex';\n    alignItems: 'center';\n    justifyContent: 'center';\n}\n\n    <Card style={style} view=\"outlined\" type=\"container\" size=\"l\">Container</Card>\n    <Card style={style} view=\"outlined\" type=\"action\" size=\"l\">action with onClick</Card>\n    <Card style={style} view=\"outlined\" type=\"selection\" size=\"l\">Selection</Card>\n`}>\n    <div style={{display: 'grid', gridAutoFlow: 'column', gridGap: '10px'}}>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} view=\"outlined\" type=\"container\" size=\"l\">Container</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} view=\"outlined\" type=\"action\" onClick={() => alert(':wave: hey')} size=\"l\">action with onClick</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} view=\"outlined\" type=\"selection\" size=\"l\">Selection</UIKit.Card>\n    </div>\n\n</ExampleBlock>\nLANDING_BLOCK-->\n\n## View\n\nThis parameter is used to specify the `Card` view or layout style. It allows you to customize the appearance and arrangement of the card content.\n\n- `clear`: No style.\n- `outlined`: Applies a thin border to highlight the card content.\n- `filled`: Fills in the card content.\n- `raised`: Applies a shadow to slightly lift the container.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\nconst style = {\n    width: '120px';\n    height: '120px';\n    display: 'flex';\n    alignItems: 'center';\n    justifyContent: 'center';\n}\n\n    <Card style={style} view=\"clear\" type=\"container\" size=\"l\">Clear</Card>\n    <Card style={style} view=\"outlined\" type=\"container\" size=\"l\">Outlined</Card>\n    <Card style={style} view=\"filled\" type=\"container\" size=\"l\">Filled</Card>\n    <Card style={style} view=\"raised\" type=\"container\" size=\"l\">Raised</Card>\n`}>\n    <div style={{display: 'grid', gridAutoFlow: 'column', gridGap: '10px'}}>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} view=\"clear\" type=\"container\" size=\"l\">Clear</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} view=\"outlined\" type=\"container\" size=\"l\">Outlined</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} view=\"filled\" type=\"container\" size=\"l\">Filled</UIKit.Card>\n        <UIKit.Card style={{display: 'flex', alignItems: 'center', justifyContent: 'center', width: '120px', height: '120px'}} view=\"raised\" type=\"container\" size=\"l\">Raised</UIKit.Card>\n    </div>\n\n</ExampleBlock>\nLANDING_BLOCK-->\n\n## Properties\n\n| Name      | Description                                                                                       |    Type     |    Default    |\n| :-------- | :------------------------------------------------------------------------------------------------ | :---------: | :-----------: |\n| children  | Card content                                                                                      | `ReactNode` |               |\n| type      | The `Card` type determines which properties are available.                                        |  `string`   | `\"container\"` |\n| view      | This property is only available for the `\"container\"` and `\"selection\"` `type`s.                  |  `string`   | `\"outlined\"`  |\n| theme     | Card's base color. This property is only available for the `\"container\"` `type`.                  |  `string`   |  `\"normal\"`   |\n| size      | The `Card` size determines which properties are available.                                        |  `string`   |     `\"m\"`     |\n| className | CSS class                                                                                         |  `string`   |               |\n| onClick   | Card click handler. This property is only available for the `\"selection\"` and `\"action\"` `type`s. | `Function`  |               |\n| selected  | Selected card. This property is only available for the `\"selection\"` `type`.                      |  `Boolean`  |               |\n| disabled  | Disabled card. This property is only available for the `\"selection\"` and `\"action\"` `type`s.      |  `Boolean`  |               |\n| qa        | `data-qa` HTML attribute, used for testing                                                        |  `string`   |               |\n\n## CSS API\n\n| Name                        | Description      |\n| :-------------------------- | :--------------- |\n| `--g-card-background-color` | Background color |\n| `--g-card-border-width`     | Border width     |\n| `--g-card-border-color`     | Border color     |\n| `--g-card-border-radius`    | Border radius    |\n| `--g-card-box-shadow`       | Shadow           |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}