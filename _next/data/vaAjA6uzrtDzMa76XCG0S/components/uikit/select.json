{"pageProps":{"libId":"uikit","componentId":"select","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Select\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Select} from '@gravity-ui/uikit';\n```\n\n`Select` is a control that provides a list of options that a user can select.\n\n## Options\n\nOptions to select.\n\n### Defining options\n\nYou can define options as an array of objects or as the children of a component. The first approach is useful for cases where options require complex preparation and, possibly, memorization. The second one is convenient when there are few options, and their configuration does not require complex calculations.\n\n#### Flat list\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"value\"\n  options={[\n    {value: 'val_1', content: 'Value 1'},\n    {value: 'val_2', content: 'Value 2'},\n    {value: 'val_3', content: 'Value 3'},\n    {value: 'val_4', content: 'Value 4'},\n  ]}\n/>\n<Select placeholder=\"value\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <div>\n    Array of objects\n    <UIKit.Select placeholder=\"value\"\n      options={[\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ]}\n    />\n  </div>\n  <div>\n    Child nodes\n    <UIKit.Select placeholder=\"value\">\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n// Array of objects\n<Select\n  placeholder=\"value\"\n  options={[\n    {value: 'val_1', content: 'Value 1'},\n    {value: 'val_2', content: 'Value 2'},\n    {value: 'val_3', content: 'Value 3'},\n    {value: 'val_4', content: 'Value 4'},\n  ]}\n/>\n// Child nodes\n<Select placeholder=\"value\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n#### Grouped list\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"value\"\n  options={[\n    {\n      label: 'Group 1',\n      options: [\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n      ],\n    },\n    {\n      label: 'Group 2',\n      options: [\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ],\n    },\n  ]}\n/>\n<Select placeholder=\"value\">\n  <Select.OptionGroup label=\"Group 1\">\n    <Select.Option value=\"val_1\" content=\"Value 1\" />\n    <Select.Option value=\"val_2\" content=\"Value 2\" />\n  </Select.OptionGroup>\n  <Select.OptionGroup label=\"Group 2\">\n    <Select.Option value=\"val_3\" content=\"Value 3\" />\n    <Select.Option value=\"val_4\" content=\"Value 4\" />\n  </Select.OptionGroup>\n</Select>\n`}\n>\n  <div>\n    Array of objects\n    <UIKit.Select\n      placeholder=\"value\"\n      options={[\n        {\n          label: 'Group 1',\n          options: [\n            {value: 'val_1', content: 'Value 1'},\n            {value: 'val_2', content: 'Value 2'},\n          ],\n        },\n        {\n          label: 'Group 2',\n          options: [\n            {value: 'val_3', content: 'Value 3'},\n            {value: 'val_4', content: 'Value 4'},\n          ],\n        },\n      ]}\n    />\n  </div>\n  <div>\n    Child nodes\n    <UIKit.Select placeholder=\"value\">\n      <UIKit.Select.OptionGroup label=\"Group 1\">\n        <UIKit.Select.Option value=\"val_1\" content=\"Value 1\" />\n        <UIKit.Select.Option value=\"val_2\" content=\"Value 2\" />\n      </UIKit.Select.OptionGroup>\n      <UIKit.Select.OptionGroup label=\"Group 2\">\n        <UIKit.Select.Option value=\"val_3\" content=\"Value 3\" />\n        <UIKit.Select.Option value=\"val_4\" content=\"Value 4\" />\n      </UIKit.Select.OptionGroup>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n// Array of objects\n<Select\n  placeholder=\"value\"\n  options={[\n    {\n      label: 'Group 1',\n      options: [\n        {value: 'val_1', content: 'Value 1'},\n        {value: 'val_2', content: 'Value 2'},\n      ],\n    },\n    {\n      label: 'Group 2',\n      options: [\n        {value: 'val_3', content: 'Value 3'},\n        {value: 'val_4', content: 'Value 4'},\n      ],\n    },\n  ]}\n/>\n// Child nodes\n<Select placeholder=\"value\">\n  <Select.OptionGroup label=\"Group 1\">\n    <Select.Option value=\"val_1\" content=\"Value 1\" />\n    <Select.Option value=\"val_2\" content=\"Value 2\" />\n  </Select.OptionGroup>\n  <Select.OptionGroup label=\"Group 2\">\n    <Select.Option value=\"val_3\" content=\"Value 3\" />\n    <Select.Option value=\"val_4\" content=\"Value 4\" />\n  </Select.OptionGroup>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Storing data in options\n\nYou can define and store unique data in each option by using the `option.data` property. This can be useful when you need to enrich the data when using the `onUpdate` callback or, for example, when drawing your options with `renderOption`.\n\n## Selecting multiple options\n\nTo enable multiple selection, use the `multiple` property. Its default value is `false`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select multiple={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select multiple={true} placeholder=\"values\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select multiple={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Counter\n\nYou can add a counter of the selected items to the component using the `hasCounter` property.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select multiple={true} hasCounter={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select multiple={true} hasCounter={true} placeholder=\"values\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select multiple={true} hasCounter={true} placeholder=\"values\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Filtering options\n\nTo enable filter section, use the `filterable` property. Its default value is `false`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select filterable={true} placeholder=\"Filterable\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select filterable={true} placeholder=\"Filterable\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select filterable={true} placeholder=\"Filterable\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\nTo manage the default control and option size, use the `size` property. Its default size is `m`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select size=\"s\" placeholder=\"S Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"m\" placeholder=\"M Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"l\" placeholder=\"L Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"xl\" placeholder=\"XL Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select size=\"s\" placeholder=\"S Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"m\" placeholder=\"M Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"l\" placeholder=\"L Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n  <UIKit.Select size=\"xl\" placeholder=\"XL Size\">\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Select size=\"s\" placeholder=\"S Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"m\" placeholder=\"M Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"l\" placeholder=\"L Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n<Select size=\"xl\" placeholder=\"XL Size\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Control width\n\nBy default, the control width stretches to match the width of the content of the selected options. You can manage it by using the `width` property:\n\n`'max'`: Stretches to the full width of the parent.\n\n`number`: Applies width in pixels.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select width=\"max\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select width={150}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <UIKit.Select multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Max</h4>\n    <UIKit.Select width=\"max\" multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n  <div style={{width: 150, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <UIKit.Select width={110} multiple={true}>\n      <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n      <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Popup width\n\nYou can manage the popup width with the `popupWidth` property. The available values are:\n\n`'fit'`: Apply control width.\n\n`number`: Apply width in pixels.\n\nPoints to note about the default behavior:\n\n- The popup width is equal to the width of the widest option, but not wider than `90vw`. This does not apply in case you use [virtualization](#virtualized-list).\n\n- Narrow options are stretched to fit the width of the control.\n\n<!--LANDING_BLOCK\n\n### Non-virtualized list\n\nA regular list when all the elements are in the dom tree at once.\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\">\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Fit</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth=\"fit\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth=\"fit\">\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth={80}>\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth={80}>\n        <UIKit.Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</UIKit.Select.Option>\n      </UIKit.Select>\n    </p>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n### Virtualized list\n\nFor optimal display of a large number of options, `Select` has a built-in list virtualization tool. Virtualization is enabled after overcoming the threshold of the number of options (`50` by default). You can manage this value using the `virtualizationThreshold` property.\n\nWhen using virtualization, some restrictions apply to the popup element:\n\n- The popup width no longer gets adjusted to the length of the longest option.\n\n- The minimum width of the popup is equal to the width of the control, or `100px` if the control is shorter.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth=\"fit\">\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select popupWidth={80}>\n  <Select.Option value=\"val_1\">Loooooooooooooooooooong Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Loooooooooooooooooooong Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Loooooooooooooooooooong Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Loooooooooooooooooooong Value 4</Select.Option>\n</Select>\n`}\n>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>Default</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\">\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\">\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Loooooooooooooooooooong Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n  </div>\n  <div style={{width: 200, border: '2px dashed gray', textAlign: 'center'}}>\n    <h4 style={{textAlign: 'center'}}>In pixels</h4>\n    <p>\n      <UIKit.Select placeholder=\"Short value\" popupWidth={80}>\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n    <p>\n      <UIKit.Select placeholder=\"Long value\" popupWidth={80}>\n        {Array.from({length: 1000}, (_, index) => index)\n          .map((value) => <UIKit.Select.Option value={value}>{`Loooooooooooooooooooong Value ${value}`}</UIKit.Select.Option>)\n        }\n      </UIKit.Select>\n    </p>\n  </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Advanced usage\n\nThere are many ways to customize your `Select`.\n\n### Rendering custom control\n\nTo render a custom control, use the `renderControl` property.\nNote: You should forward all arguments to your node in order to enable consistent behavior, just as when using the default control.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderControl={({onClick, onKeyDown, ref}) => {\n    return <button ref={ref} onClick={onClick} extraProps={{onKeyDown}}>Custom control</button>\n  }}\n>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n  <Select.Option value=\"val_2\">Value 2</Select.Option>\n  <Select.Option value=\"val_3\">Value 3</Select.Option>\n  <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select renderControl={({onClick, onKeyDown, ref}) => {\n    return <button ref={ref} onClick={onClick} extraProps={{onKeyDown}}>Custom control</button>\n  }}>\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {Button} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderControl: SelectProps['renderControl'] = ({onClick, onKeyDown, ref}) => {\n    return (\n      <Button\n        ref={ref}\n        onClick={onClick}\n        extraProps={{\n          onKeyDown,\n        }}\n      >\n        Your control\n      </Button>\n    );\n  };\n\n  return <Select renderControl={renderControl}>/* Your options here */</Select>;\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Rendering custom filter section\n\nTo render a custom filter section, use the `renderFilter` property and set the `filterable` property to `true`.\nNote: You need to forward all arguments to your node in order to enable a properly working filter, just as when using the default configuration.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  placeholder=\"Custom filter\"\n  filterable={true}\n  renderFilter={({onChange, onKeyDown, ref, value}) => {\n    return (\n      <div style={{display: 'flex', flexDirection: 'column'}}>\n        <input\n          ref={ref}\n          value={value}\n          size=\"1\"\n          onKeyDown={onKeyDown}\n          onChange={(e) => onChange(e.target.value)}\n        />\n        <button>Do smth</button>\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\">Value 1</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom filter\"\n    filterable={true}\n    renderFilter={({onChange, onKeyDown, ref, value}) => {\n      return (\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n          <input\n            ref={ref}\n            value={value}\n            size=\"1\"\n            onKeyDown={onKeyDown}\n            onChange={(e) => onChange(e.target.value)}\n          />\n          <button>Do smth</button>\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport {Button, TextInput} from '@gravity-ui/uikit';\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderFilter: SelectProps['renderFilter'] = (props) => {\n    const {value, ref, onChange, onKeyDown} = props;\n\n    return (\n      <div>\n        <TextInput\n          controlRef={ref}\n          controlProps={{size: 1}}\n          value={value}\n          onUpdate={onChange}\n          onKeyDown={onKeyDown}\n        />\n        <Button>Do smth</Button>\n      </div>\n    );\n  };\n\n  return (\n    <Select filterable={true} renderFilter={renderFilter}>\n      /* Your options here */\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Rendering custom options\n\nTo render custom options, use the `renderOption` property:\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderOption={(option) => {\n    return (\n      <div style={{color: option.data.color}}>\n        {option.children}\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom options\"\n    renderOption={(option) => {\n      return (\n        <div style={{color: option.data.color}}>\n          {option.children}\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderOption: SelectProps['renderOption'] = (option) => {\n    return <div style={{color: option.data.color}}>{option.children}</div>;\n  };\n\n  return (\n    <Select renderOption={renderOption}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Rendering custom selected options\n\nTo render custom selected options, use the `renderSelectedOption` property:\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  renderSelectedOption={(option) => {\n    return (\n      <div style={{color: option.data.color}}>\n        {option.children}\n      </div>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Custom selected options\"\n    renderSelectedOption={(option) => {\n      return (\n        <div style={{color: option.data.color}}>\n          {option.children}\n        </div>\n      );\n    }}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const renderSelectedOption: SelectProps['renderSelectedOption'] = (option) => {\n    return <div style={{color: option.data.color}}>{option.children}</div>;\n  };\n\n  return (\n    <Select renderSelectedOption={renderSelectedOption}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Rendering options with different heights\n\nOptions have a fixed height according to the `size` property. If you need to render options with different heights, you can use the `option.data` property. It will store information about what height you need to set for the options, as well as the `getOptionHeight` property to set this value.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  getOptionHeight={(option) => option.data.height}\n>\n  <Select.Option value=\"val_1\" data={{height: 20}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{height: 40}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{height: 60}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{height: 80}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    placeholder=\"Different heights\"\n    getOptionHeight={(option) => option.data.height}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{height: 20}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{height: 40}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{height: 60}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{height: 80}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst MyComponent = () => {\n  const getOptionHeight: SelectProps['getOptionHeight'] = (option) => option.data.height;\n\n  return (\n    <Select getOptionHeight={getOptionHeight}>\n      <Select.Option value=\"val_1\" data={{height: 20}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{height: 40}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{height: 60}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{height: 80}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Rendering custom popup\n\nTo render custom popup, use the `renderPopup` property.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Select\n  filterable\n  placeholder=\"Custom popup\"\n  renderPopup={({renderList, renderFilter}) => {\n    return (\n      <React.Fragment>\n        {renderFilter()}\n        <div style={{width: \"100%\", height: \"20px\", backgroundColor: \"tomato\"}} />\n        {renderList()}\n      </React.Fragment>\n    );\n  }}\n>\n  <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</Select.Option>\n  <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</Select.Option>\n  <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</Select.Option>\n  <Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</Select.Option>\n</Select>\n`}\n>\n  <UIKit.Select\n    filterable\n    placeholder=\"Custom popup\"\n    renderPopup={({renderList, renderFilter}) => {\n      return (\n        <React.Fragment>\n          {renderFilter()}\n          <div style={{width: \"100%\", height: \"20px\", backgroundColor: \"tomato\"}} />\n          {renderList()}\n        </React.Fragment>\n  );\n}}\n  >\n    <UIKit.Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>Value 1</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>Value 2</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>Value 3</UIKit.Select.Option>\n    <UIKit.Select.Option value=\"val_4\" data={{color: '#534581'}}>Value 4</UIKit.Select.Option>\n  </UIKit.Select>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nimport type {SelectProps} from '@gravity-ui/uikit';\n\nconst renderPopup: SelectProps['renderPopup'] = ({renderList, renderFilter}) => {\n  return (\n    <React.Fragment>\n      {renderFilter()}\n      <div className=\"CustomElement\" />\n      {renderList()}\n    </React.Fragment>\n  );\n};\n\nconst MyComponent = () => {\n  return (\n    <Select filterable renderPopup={renderPopup}>\n      <Select.Option value=\"val_1\" data={{color: '#8FE1A1'}}>\n        Value 1\n      </Select.Option>\n      <Select.Option value=\"val_2\" data={{color: '#38C0A8'}}>\n        Value 2\n      </Select.Option>\n      <Select.Option value=\"val_3\" data={{color: '#3A7AC3'}}>\n        Value 3\n      </Select.Option>\n      <Select.Option value=\"val_4\" data={{color: '#534581'}}>\n        Value 4\n      </Select.Option>\n    </Select>\n  );\n};\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Error\n\nThis `Select` state is for incorrect user input. To change the `Select` appearance, use the `validationState` property with the `\"invalid\"` value. Optionally, you can provide an error message through the `errorMessage` property. By default, the message text is rendered outside the component.\nYou can change this with the `errorPlacement` property.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<Select\n    placeholder=\"Placeholder\"\n    errorMessage=\"Error message\"\n    validationState=\"invalid\"\n>\n    <Select.Option value=\"val_1\">Value 1</Select.Option>\n    <Select.Option value=\"val_2\">Value 2</Select.Option>\n    <Select.Option value=\"val_3\">Value 3</Select.Option>\n    <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n<Select\n    placeholder=\"Placeholder\"\n    errorPlacement=\"inside\"\n    errorMessage=\"Error message\"\n    validationState=\"invalid\"\n>\n    <Select.Option value=\"val_1\">Value 1</Select.Option>\n    <Select.Option value=\"val_2\">Value 2</Select.Option>\n    <Select.Option value=\"val_3\">Value 3</Select.Option>\n    <Select.Option value=\"val_4\">Value 4</Select.Option>\n</Select>\n`}\n>\n    <UIKit.Select placeholder=\"Placeholder\" errorMessage=\"Error message\" validationState=\"invalid\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n    <UIKit.Select placeholder=\"Placeholder\" errorPlacement=\"inside\" errorMessage=\"Error message\" validationState=\"invalid\">\n        <UIKit.Select.Option value=\"val_1\">Value 1</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_2\">Value 2</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_3\">Value 3</UIKit.Select.Option>\n        <UIKit.Select.Option value=\"val_4\">Value 4</UIKit.Select.Option>\n    </UIKit.Select>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n## Properties\n\n| Name                                                      | Description                                                                                                                      | Type                                     | Default                                                  |\n| :-------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------- | :------------------------------------------------------- |\n| className                                                 | Control className                                                                                                                | `string`                                 |                                                          |\n| defaultValue                                              | Default values that represent selected options in case of using an uncontrolled state                                            | `string[]`                               |                                                          |\n| disabled                                                  | Shows that the user cannot work with the control                                                                                 | `boolean`                                | `false`                                                  |\n| [filterable](#filtering-options)                          | Shows that select popup has a filter section                                                                                     | `boolean`                                | `false`                                                  |\n| filterOption                                              | Used to compare option with filter                                                                                               | `function`                               |                                                          |\n| filterPlaceholder                                         | Default filter input placeholder text                                                                                            | `string`                                 |                                                          |\n| [getOptionHeight](#render-options-with-different-heights) | Used to set height of customized user options                                                                                    | `function`                               |                                                          |\n| getOptionGroupHeight                                      | Used to set height of customized user option group                                                                               | `function`                               |                                                          |\n| hasClear                                                  | Enables displaying icon for clearing selected options                                                                            | `boolean`                                | `false`                                                  |\n| id                                                        | `id` HTML attribute                                                                                                              | `string`                                 |                                                          |\n| label                                                     | Control label                                                                                                                    | `string`                                 |                                                          |\n| loading                                                   | Adds the loading item to the end of the option list. Works like a persistent loading indicator while the options list is empty.  | `boolean`                                |                                                          |\n| [multiple](#selecting-multiple-options)                   | Shows whether multiple options can be selected in the list                                                                       | `boolean`                                | `false`                                                  |\n| name                                                      | Name of the control                                                                                                              | `string`                                 |                                                          |\n| onBlur                                                    | Handler that is called when the element loses focus.                                                                             | `function`                               |                                                          |\n| filter                                                    | Controlled filter value                                                                                                          | `string`                                 | `''`                                                     |\n| onFilterChange                                            | Fires every time after changing the filter                                                                                       | `function`                               |                                                          |\n| onFocus                                                   | Handler that is called when the element gets focus                                                                               | `function`                               |                                                          |\n| onLoadMore                                                | Fires when the loading indicator gets visible                                                                                    | `function`                               |                                                          |\n| onOpenChange                                              | Fires every time after changing popup visibility                                                                                 | `function`                               |                                                          |\n| onUpdate                                                  | Fires when an alteration to the `Select` value is committed by the user                                                          | `function`                               |                                                          |\n| [options](#options)                                       | Options to select                                                                                                                | `(SelectOption \\| SelectOptionGroup)[]`  |                                                          |\n| pin                                                       | Control border view                                                                                                              | `string`                                 | `'round-round'`                                          |\n| placeholder                                               | Placeholder text                                                                                                                 | `string`                                 |                                                          |\n| popupClassName                                            | Popup with the option list `className`                                                                                           | `string`                                 |                                                          |\n| popupPlacement                                            | Popup placement                                                                                                                  | `PopupPlacement` `Array<PopupPlacement>` | `['bottom-start', 'bottom-end', 'top-start', 'top-end']` |\n| [popupWidth](#popup-width)                                | Popup width                                                                                                                      | `number \\| 'fit' \\| 'outfit'`            | `'outfit'`                                               |\n| qa                                                        | Test id attribute (`data-qa`)                                                                                                    | `string`                                 |                                                          |\n| [renderControl](#render-custom-control)                   | Used to render user control                                                                                                      | `function`                               |                                                          |\n| renderEmptyOptions                                        | Used to render a node for an empty option list                                                                                   | `function`                               |                                                          |\n| [renderFilter](#render-custom-filter-section)             | Used to render user filter section                                                                                               | `function`                               |                                                          |\n| [renderOption](#render-custom-options)                    | Used to render user options                                                                                                      | `function`                               |                                                          |\n| renderOptionGroup                                         | Used to render user option groups                                                                                                | `function`                               |                                                          |\n| [renderSelectedOption](#render-custom-selected-options)   | Used to render user selected options                                                                                             | `function`                               |                                                          |\n| [renderPopup](#render-custom-popup)                       | Used to render user popup content                                                                                                | `function`                               |                                                          |\n| [size](#size)                                             | Control / options size                                                                                                           | `string`                                 | `'m'`                                                    |\n| value                                                     | Values that represent selected options                                                                                           | `string[]`                               |                                                          |\n| view                                                      | Control view                                                                                                                     | `string`                                 | `'normal'`                                               |\n| [virtualizationThreshold](#virtualized-list)              | Option count threshold after which virtualization is enabled                                                                     | `number`                                 | `50`                                                     |\n| [width](#control-width)                                   | Control width                                                                                                                    | `string \\| number`                       | `undefined`                                              |\n| errorMessage                                              | Error text                                                                                                                       | `string`                                 |                                                          |\n| errorPlacement                                            | Error position                                                                                                                   | `outside` `inside`                       | `outside`                                                |\n| validationState                                           | Validation state                                                                                                                 | `\"invalid\"`                              |                                                          |\n| [hasCounter](#counter)                                    | Shows the selected option count. The counter appears only when the [multiple](#selecting-multiple-options) selection is enabled. | `boolean`                                |                                                          |\n\n## CSS API\n\n| Name                             | Description                                   |\n| :------------------------------- | :-------------------------------------------- |\n| `--g-select-focus-outline-color` | Outline color if focused (missing by default) |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}