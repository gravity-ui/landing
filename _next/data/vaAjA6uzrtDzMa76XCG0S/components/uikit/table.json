{"pageProps":{"libId":"uikit","componentId":"table","readmeContent":"<!--GITHUB_BLOCK-->\n\n## Table\n\n<!--/GITHUB_BLOCK-->\n\n```jsx\nimport {Table} from '@gravity-ui/uikit';\n```\n\nA `Table` allows selecting and sorting rows, as well as performing actions on a row.\n\n<!--GITHUB_BLOCK-->\n\nAdditional features are enabled through HOCs:\n\n- [withTableActions](#usage-with-hoc-withtableactions)\n- [withTableCopy](#usage-with-hoc-withtablecopy)\n- [withTableSelection](#usage-with-hoc-withtableselection)\n- [withTableSettings](#usage-with-hoc-withtablesettings)\n- [withTableSorting](#usage-with-hoc-withtablesorting)\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n| Name                             | Description                                                                                                                                                                            |                                        Type                                        |   Default   |\n| :------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------: | :---------: |\n| data                             | Data                                                                                                                                                                                   |                                      `any[]`                                       |             |\n| columns                          | Column settings                                                                                                                                                                        |                               `TableColumnConfig[]`                                |             |\n| verticalAlign                    | Vertical alignment of content                                                                                                                                                          |                                 `\"top\"` `\"middle\"`                                 |             |\n| getRowDescriptor                 | Handler to get the row descriptor                                                                                                                                                      |                   `(item: any, index: number) => DescriptorType`                   |             |\n| getRowId                         | Row ID used when selecting and sorting rows. If you skip a row, its ID will be the value of the field in the row data with the same name as the column ID.                             |                 `string` `((item: any, index: number) => string)`                  |             |\n| getRowClassNames                 | Row CSS classes                                                                                                                                                                        |                      `(item: any, index: number) => string[]`                      |             |\n| isRowDisabled                    | Condition for disabling columns                                                                                                                                                        |                      `(item: any, index: number) => boolean`                       |             |\n| onRowClick                       | Row click handler                                                                                                                                                                      | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |             |\n| onRowMouseEnter                  | Row mouseenter handler                                                                                                                                                                 | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |             |\n| onRowMouseLeave                  | Row mouseleave handler                                                                                                                                                                 | `(item: any, index: number, event: React.MouseEvent<HTMLTableRowElement>) => void` |             |\n| emptyMessage                     | Returning a message if the data is missing                                                                                                                                             |                                      `string`                                      | `\"No data\"` |\n| className                        | Table CSS class                                                                                                                                                                        |                                      `string`                                      |             |\n| edgePadding                      | Adds horizontal padding for edge cells                                                                                                                                                 |                                     `boolean`                                      |             |\n| stickyHorizontalScroll           | Adds a horizontal sticky scroll in a table. Note: A table cannot have a fixed height and a sticky scroll at the same time. A sticky scroll will not work if the table has an overflow. |                                     `boolean`                                      |   `false`   |\n| stickyHorizontalScrollBreakpoint | Threshold the parent block should reach before making a scroll sticky. This is useful in the console, such as when the `groupActions` bar overlaps the scroll.                         |                                      `number`                                      |     `0`     |\n\n### DescriptorType\n\n| Name        | Description                                 |    Type    | Default |\n| :---------- | :------------------------------------------ | :--------: | :-----: |\n| id          | Row ID used when selecting and sorting rows |  `string`  |         |\n| disabled    | Condition for disabling columns             | `boolean`  |         |\n| interactive | Show row hover                              | `boolean`  |         |\n| classNames  | Row CSS classes                             | `string[]` |         |\n\n### TableColumnConfig\n\n| Name        | Description                                                                                                        |                            Type                            |                         Default                         |\n| :---------- | :----------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------: | :-----------------------------------------------------: |\n| id          | Column ID                                                                                                          |                          `string`                          |                                                         |\n| name        | Column name (header)                                                                                               |             `string` `(() => React.ReactNode)`             |                        column ID                        |\n| className   | CSS class that will be added to all cells in the column                                                            |                          `string`                          |                                                         |\n| placeholder | Stub when there is no data in a cell                                                                               | `string` `((item: any, index: number) => React.ReactNode)` |                      `â€” (&mdash;)`                      |\n| template    | Cell contents. If you skip a row, the cell contents will be the value of the field with the same name as this row. | `string` `((item: any, index: number) => React.ReactNode)` | Value of the field with the name equal to the column ID |\n| align       | Content alignment                                                                                                  |                `\"start\"` `\"center\"` `\"end\"`                |                                                         |\n| sticky      | Sticky column                                                                                                      |                     `\"start\"` `\"end\"`                      |                                                         |\n| primary     | Identifies a column as primary as opposed to others                                                                |                         `boolean`                          |                                                         |\n| width       | Column's content width in pixels                                                                                   |                     `number` `string`                      |                                                         |\n| meta        | _displayName_: name to be shown in Table Settings widget; other miscellaneous data including the HOC settings      |                   `Record<string, any>`                    |                                                         |\n\n## Using `Table` with the `withTableActions` HOC\n\nThis HOC adds a special column with actions to table columns.\n\n### Properties\n\n| Name             | Description                                    |                           Type                           |\n| :--------------- | :--------------------------------------------- | :------------------------------------------------------: |\n| getRowActions    | Array of action configs for each row           |   `(item: any, index: number) => TableActionConfig[]`    |\n| renderRowActions | Render function for Actions Cell               | `(props: {item: any; index: number}) => React.ReactNode` |\n| rowActionsSize   | Size of the action button and popup menu items |                 `\"s\"` `\"m\"` `\"l\"` `\"xl\"`                 |\n| rowActionsIcon   | Custom Icon for Actions Cell                   |                    `React.ReactNode`                     |\n\n### TableActionConfig\n\n```ts\ntype TableActionConfig = TableAction | TableActionGroup;\n```\n\n#### TableAction\n\n| Name     | Description                                                              |                 Type                 |  Default   |\n| :------- | :----------------------------------------------------------------------- | :----------------------------------: | :--------: |\n| text     | Text                                                                     |               `string`               |            |\n| handler  | Click handler                                                            | `(item: any, index: number) => void` |            |\n| disabled | Action disabled                                                          |              `boolean`               |            |\n| href     | A menu item with this property becomes a link to the specified location. |               `string`               |            |\n| target   | Same as the `target` attribute of the `<a>` tag.                         |               `string`               |            |\n| rel      | Same as the `rel` attribute of the `<a>` tag.                            |               `string`               |            |\n| theme    | Theme                                                                    |        `\"normal\"` `\"danger\"`         | `\"normal\"` |\n| icon     | Icon to display next to the text                                         |          `React.ReactNode`           |            |\n\n#### TableActionGroup\n\n| Name  | Description         |         Type          |\n| :---- | :------------------ | :-------------------: |\n| title | Action group header |       `string`        |\n| items | Action group items  | `TableActionConfig[]` |\n\n### Example\n\n```jsx\nimport {Table, withTableActions} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst getRowActions = () => {\n  return [\n    {\n      text: 'Print',\n      handler: () => {},\n    },\n    {\n      text: 'Remove',\n      handler: () => {},\n      theme: 'danger',\n    },\n  ];\n};\n\nconst table = <MyTable data={data} columns={columns} getRowActions={getRowActions} />;\n```\n\n```jsx\nimport {Table, withTableActions, RenderRowActionsProps} from '@gravity-ui/uikit';\n\nconst MyTable = withTableActions(Table);\ntype Item = {id: number; text: string};\n\nconst data: Item[] = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\n\nconst RowAction = ({item}: RenderRowActionsProps<Item>) => {\n    return <React.Fragment>{`Action for - ${item.text}`}</React.Fragment>;\n};\n\nconst table = (\n  <MyTable\n    data={data}\n    columns={columns}\n    renderRowActions={RowAction}\n  />\n);\n```\n\n## Using `Table` with the `withTableCopy` HOC\n\nThis HOC enables copying the contents of a cell or any other text.\n\n### ColumnMeta\n\n| Name | Description                                                           |                                            Type                                             |\n| :--- | :-------------------------------------------------------------------- | :-----------------------------------------------------------------------------------------: |\n| copy | Text to copy. If the value is true, copying cell contents is allowed. | `boolean` `((item: any, index: number) => string)` `((item: any, index: number) => number)` |\n\n### Example\n\n```jsx\nimport {Table, withTableCopy} from '@gravity-ui/uikit';\n\nconst MyTable = withTableCopy(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [\n  {id: 'id', meta: {copy: ({id}) => `ID #${id}`}},\n  {id: 'text', meta: {copy: true}},\n];\n\nconst table = <MyTable data={data} columns={columns} />;\n```\n\n## Using `Table` with the `withTableSelection` HOC\n\nThis HOC enables selecting table rows.\n\n### Properties\n\n| Name              | Description                 |           Type            |\n| :---------------- | :-------------------------- | :-----------------------: |\n| selectedIds       | Selected rows               |        `string[]`         |\n| onSelectionChange | Selected row change handler | `(ids: string[]) => void` |\n\n### Example\n\n```jsx\nimport {Table, withTableSelection} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSelection(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst getRowId = 'id';\n\nfunction SelectionTable() {\n  const [selectedIds, setSelectedIds] = React.useState([1]);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      getRowId={getRowId}\n      selectedIds={selectedIds}\n      onSelectionChange={setSelectedIds}\n    />\n  );\n}\n```\n\n## Using `Table` with the `withTableSettings` HOC\n\nThis HOC enables features for table column settings. You can use it in two ways:\n\n```jsx\nimport {Table, withTableSettings} from './withTableSettings';\n\n// No options passed\nconst MyTable1 = withTableSettings(Table);\n// or with options\nconst MyTable1 = withTableSettings({sortable: false})(Table);\n```\n\n### Options\n\n| Name       | Description                                  |       Type       | Default |\n| :--------- | :------------------------------------------- | :--------------: | :-----: |\n| width      | Settings popup width                         | `number` `\"fit\"` |         |\n| sortable   | Enables or disables sorting settings items   |    `boolean`     | `true`  |\n| filterable | Enables or disables filtering settings items |    `boolean`     | `false` |\n\n### ColumnMeta\n\n| Name              | Description                                                               |   Type    | Default |\n| :---------------- | :------------------------------------------------------------------------ | :-------: | :-----: |\n| selectedByDefault | Enables or disables selecting a column if it is missing from the settings | `boolean` | `true`  |\n| selectedAlways    | Makes the column always selected. You cannot change its visibility.       | `boolean` | `false` |\n\n### Properties\n\n| Name                       | Description                                                  |                           Type                           |\n| :------------------------- | :----------------------------------------------------------- | :------------------------------------------------------: |\n| settingsPopupWidth         | `TableColumnSetup` pop-up width                              |                     `number` `\"fit\"`                     |\n| settings                   | Current settings                                             |                   `TableSettingsData`                    |\n| updateSettings             | Settings update handler                                      |       `(data: TableSettingsData) => Promise<void>`       |\n| renderControls             | Enables rendering custom actions                             |                     `RenderControls`                     |\n| settingsFilterPlaceholder  | Text that appears in the control when no search value is set |                         `string`                         |\n| settingsFilterEmptyMessage | Text that appears when no item is found                      |                         `string`                         |\n| filterSettings             | Function for filtering items                                 | `(value: string, item: TableColumnSetupItem) => boolean` |\n\n### TableSettingsData\n\n```ts\ntype TableSettingsData = Array<{\n  id: string;\n  isSelected?: boolean;\n}>;\n```\n\n### RenderControls\n\n```ts\ntype RenderControls = (params: {\n  DefaultApplyButton: React.ComponentType;\n  onApply: () => void;\n}) => React.ReactNode;\n```\n\n### Example\n\n```jsx\nimport {Table, withTableSettings} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSettings({width: 100, sortable: false})(Table);\nconst data = [\n  {id: 1, text: 'Hello'},\n  {id: 2, text: 'World'},\n];\nconst columns = [{id: 'id'}, {id: 'text'}];\nconst initialSettings = [\n  {id: 'id', isSelected: false},\n  {id: 'text', isSelected: true},\n];\n\nfunction SelectionTable() {\n  const [settings, setSettings] = React.useState(initialSettings);\n\n  return (\n    <MyTable\n      data={data}\n      columns={columns}\n      settings={settings}\n      updateSettings={(settings) => {\n        setSettings(settings);\n        return Promise.resolve();\n      }}\n      renderControls={({DefaultApplyButton, onApply}) => (\n        <Flex gapRow=\"1\" direction=\"column\">\n          <Button\n            view=\"outlined-warning\"\n            onClick={() => {\n              onApply();\n              setSettings(initialSettings);\n            }}\n          >\n            Reset\n          </Button>\n          <DefaultApplyButton />\n        </Flex>\n      )}\n    />\n  );\n}\n```\n\n## Using `Table` with the `withTableSorting` HOC\n\nThis HOC enables column sorting.\n\n### ColumnMeta\n\n| Name             | Description                                                                                                                                                    |                       Type                       | Default |\n| :--------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------- | :----------------------------------------------: | :-----: |\n| defaultSortOrder | Sets the primary sorting order                                                                                                                                 |                 `\"asc\"` `\"desc\"`                 |  `asc`  |\n| sort             | Sorting function. It should return a value for sorting in the ascending order. If set to true, the cell values are compared and sorted in the ascending order. | `boolean` `((itemA: any, itemB: any) => number)` |         |\n\n### Properties\n\n| Name              | Description                                         |                 Type                  |\n| :---------------- | :-------------------------------------------------- | :-----------------------------------: |\n| defaultSortState  | Default sorting state for an uncontrolled component |           `TableSortState`            |\n| sortState         | Sorting state                                       |           `TableSortState`            |\n| onSortStateChange | Sorting state change handle                         | `(sortState: TableSortState) => void` |\n\nIf the `sortState` and `onSortStateChange` properties are missing, the sorting state is stored in the component itself.\n\n### TableSortState\n\n```ts\ntype TableSortState = Array<{\n  column: string;\n  order: 'asc' | 'desc';\n}>;\n```\n\n### Example\n\n```jsx\nimport {Table, withTableSorting} from '@gravity-ui/uikit';\n\nconst MyTable = withTableSorting(Table);\nconst data = [\n  {id: 1, text: 'Hello', date: '2016-10-25'},\n  {id: 2, text: 'World', date: '2020-08-15'},\n];\nconst columns = [\n  {id: 'id', meta: {sort: true}},\n  {\n    id: 'text',\n    meta: {defaultSortOrder: 'desc', sort: (a, b) => Date.parse(a.date) - Date.parse(b.date)},\n  },\n];\n\nconst table = <MyTable data={data} columns={columns} />;\n```\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}