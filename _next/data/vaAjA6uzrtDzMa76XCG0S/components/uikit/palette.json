{"pageProps":{"libId":"uikit","componentId":"palette","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Palette\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Palette} from '@gravity-ui/uikit';\n```\n\nThe `Palette` component is used to display a grid of icons, emojis, reactions, and symbols which you can select or deselect.\n\n### Disabled state\n\nYou can disable every option using the `disabled` property. If you want to disable only certain options, you can change the `disabled` property of those `options` (`PaletteOption[]`).\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\nconst options: PaletteOption[] = [\n    {content: 'ðŸ˜Ž', value: 'ID-cool'},\n    {content: 'ðŸ¥´', value: 'ID-woozy'},\n];\n// disable the first item\n<Palette options={[{ ...options[0], disabled: true }, options[1]]} disabled={true} />\n// or disable all of them\n<Palette options={options} disabled={true} />\n`}\n>\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool', disabled: true},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n    />\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool'},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n        disabled={true}\n    />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst options: PaletteOption[] = [\n  // disable a single item\n  {content: 'ðŸ˜Ž', value: 'ID-cool', disabled: true},\n  {content: 'ðŸ¥´', value: 'ID-woozy'},\n];\n// or disable all of them\n<Palette options={options} disabled={true} />;\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Size\n\nUse the `size` property to manage the `Palette` size. The default size is `s`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\nconst options: PaletteOption[] = [\n    {content: 'ðŸ˜Ž', value: 'ID-cool'},\n    {content: 'ðŸ¥´', value: 'ID-woozy'},\n];\n<Palette options={options} size={\"xs\"} />\n<Palette options={options} size={\"s\"} />\n<Palette options={options} size={\"m\"} />\n<Palette options={options} size={\"l\"} />\n<Palette options={options} size={\"xl\"} />\n`}\n>\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool'},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n        size=\"xs\"\n    />\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool'},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n        size=\"s\"\n    />\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool'},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n        size=\"m\"\n    />\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool'},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n        size=\"l\"\n    />\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool'},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n        size=\"xl\"\n    />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst options: PaletteOption[] = [\n    {content: 'ðŸ˜Ž', value: 'ID-cool'},\n    {content: 'ðŸ¥´', value: 'ID-woozy'},\n];\n<Palette options={options} size={\"xs\"} />\n<Palette options={options} size={\"s\"} />\n<Palette options={options} size={\"m\"} />\n<Palette options={options} size={\"l\"} />\n<Palette options={options} size={\"xl\"} />\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Columns\n\nYou can change the number of columns in the grid by changing the `columns` property (the default value is `6`).\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\nconst options: PaletteOption[] = [\n    {content: 'ðŸ˜Ž', value: 'ID-cool'},\n    {content: 'ðŸ¥´', value: 'ID-woozy'},\n];\n<Palette options={options} columns={1} />\n`}\n>\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool'},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n        columns={1}\n    />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst options: PaletteOption[] = [\n  {content: 'ðŸ˜Ž', value: 'ID-cool'},\n  {content: 'ðŸ¥´', value: 'ID-woozy'},\n];\n<Palette options={options} columns={1} />;\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Multiple\n\nBy default, you can select and deselect multiple options. In case you only want to make a single option selectable, you can disable the `multiple` property.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\nconst options: PaletteOption[] = [\n    {content: 'ðŸ˜Ž', value: 'ID-cool'},\n    {content: 'ðŸ¥´', value: 'ID-woozy'},\n];\n<Palette options={options} multiple={false} />\n`}\n>\n    <UIKit.Palette\n        options={[\n            {content: 'ðŸ˜Ž', value: 'ID-cool'},\n            {content: 'ðŸ¥´', value: 'ID-woozy'},\n        ]}\n        multiple={false}\n    />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst options: PaletteOption[] = [\n  {content: 'ðŸ˜Ž', value: 'ID-cool'},\n  {content: 'ðŸ¥´', value: 'ID-woozy'},\n];\n<Palette options={options} columns={1} />;\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Properties\n\n`PaletteProps`:\n\n| Name            | Description                                                                           |                          Type                          | Default |\n| :-------------- | :------------------------------------------------------------------------------------ | :----------------------------------------------------: | :-----: |\n| aria-label      | `aria-label` HTML attribute                                                           |                        `string`                        |         |\n| aria-labelledby | ID of the visible `Palette` caption element                                           |                        `string`                        |         |\n| className       | `class` HTML attribute                                                                |                        `string`                        |         |\n| columns         | Number of elements per row                                                            |                        `number`                        |   `6`   |\n| defaultValue    | Sets the initial value state when the component is mounted                            |                       `string[]`                       |         |\n| disabled        | Disables the options                                                                  |                       `boolean`                        | `false` |\n| multiple        | Enables selecting multiple options                                                    |                       `boolean`                        | `true`  |\n| onBlur          | `onBlur` event handler                                                                | `(event: React.FocusEvent<HTMLButtonElement>) => void` |         |\n| onFocus         | `onFocus` event handler                                                               | `(event: React.FocusEvent<HTMLButtonElement>) => void` |         |\n| onUpdate        | Fires when the user changes the state Provides the new value as a callback's argument |              `(value: string[]) => void`               |         |\n| optionClassName | `class` HTML attribute for the palette button                                         |                        `string`                        |         |\n| options         | List of options (palette elements)                                                    |                   `PaletteOption[]`                    |  `[]`   |\n| qa              | `data-qa` HTML attribute, used for testing                                            |                        `string`                        |         |\n| rowClassName    | `class` HTML attribute for a palette row                                              |                        `string`                        |         |\n| size            | Sets the size of the elements                                                         |                 `xs` `s` `m` `l` `xl`                  |   `m`   |\n| style           | `style` HTML attribute                                                                |                 `React.CSSProperties`                  |         |\n| value           | Current value for the controlled usage of the component                               |                       `string[]`                       |         |\n\n`PaletteOption`:\n\n| Name     | Description            |    Type     | Default |\n| :------- | :--------------------- | :---------: | :-----: |\n| content  | `class` HTML attribute | `ReactNode` |         |\n| disabled | Disables the button    |  `boolean`  | `false` |\n| title    | `title` HTML attribute |  `string`   |         |\n| value    | Control value          |  `string`   |         |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}