{"pageProps":{"libId":"uikit","componentId":"pin-input","readmeContent":"<!--GITHUB_BLOCK-->\n\n# PinInput\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {PinInput} from '@gravity-ui/uikit';\n```\n\n`PinInput` is a group of inputs to enter sequence of numeric or alphanumeric values quickly. Its most common use case is entering OTP or confirmation codes received through text messages (SMS), emails, or authenticator apps.\n\nEach input collects one character at a time. When a value is accepted, the focus is moved to the next input, until all fields are filled.\n\n## Type\n\nBy default, the inputs only accept numeric values. To allow alphanumeric values, set the `type` property to `\"alphanumeric\"`:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput type=\"alphanumeric\" />\n`}\n>\n    <UIKit.PinInput type=\"alphanumeric\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput type=\"alphanumeric\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\nThis component comes in four sizes: `s`, `m`, `l`, and `xl`. The default size is `m`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput size=\"s\" />\n<PinInput size=\"m\" />\n<PinInput size=\"l\" />\n<PinInput size=\"xl\" />\n`}\n>\n    <UIKit.PinInput size=\"s\" />\n    <UIKit.PinInput size=\"m\" />\n    <UIKit.PinInput size=\"l\" />\n    <UIKit.PinInput size=\"xl\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput size=\"s\" />\n<PinInput size=\"m\" />\n<PinInput size=\"l\" />\n<PinInput size=\"xl\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## State\n\nIf you do not want the user to interact with the component, set the `disabled` property:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput disabled />\n`}\n>\n    <UIKit.PinInput disabled />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput disabled />\n```\n\n<!--/GITHUB_BLOCK-->\n\nTo show an invalid state of the component, use the `validationState` property with the `\"invalid\"` value. Optionally, you can set an error message text with the `errorMessage` property:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput validationState=\"invalid\" errorMessage=\"Incorrect PIN\" />\n`}\n>\n    <UIKit.PinInput validationState=\"invalid\" errorMessage=\"Incorrect PIN\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput validationState=\"invalid\" errorMessage=\"Incorrect PIN\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Placeholder\n\nBy default, there is no placeholder for inputs. You can set it with the `placeholder` property:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput placeholder=\"ðŸ˜Ž\" />\n`}\n>\n    <UIKit.PinInput placeholder=\"ðŸ˜Ž\" />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput placeholder=\"ðŸ˜Ž\" />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Mask\n\nIf you need to mask entered values, use the `mask` property. It is similar to the `<input type=\"password\"/>` behavior.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<PinInput mask />\n`}\n>\n    <UIKit.PinInput mask />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<PinInput mask />\n```\n\n<!--/GITHUB_BLOCK-->\n\n## OTP\n\nIf you want the browser to suggest one-time codes from the outer context (e.g., SMS) set the `otp` property.\n\n## API\n\n- `focus(): void`: Sets focus to the current active input.\n\n## CSS API\n\n| Name                       | Description                                                  |\n| :------------------------- | :----------------------------------------------------------- |\n| `--g-pin-input-item-width` | Sets the width of each input, unless `responsive` is `true`. |\n| `--g-pin-input-item-gap`   | Sets a gap between inputs.                                   |\n\n## Properties\n\n| Name             | Description                                                                                                                                           |                     Type                     |   Default   |\n| :--------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------: | :---------: |\n| apiRef           | Ref to the [API](#api).                                                                                                                               |              `React.RefObject`               |             |\n| aria-describedby | `aria-describedby` HTML attribute                                                                                                                     |                   `string`                   |             |\n| aria-label       | `aria-label` HTML attribute                                                                                                                           |                   `string`                   |             |\n| aria-labelledby  | `aria-labelledby` HTML attribute                                                                                                                      |                   `string`                   |             |\n| autoFocus        | Enables or disables focusing on the first input on the initial render.                                                                                |                  `boolean`                   |             |\n| className        | `class` HTML attribute                                                                                                                                |                   `string`                   |             |\n| defaultValue     | Initial value for an uncontrolled component.                                                                                                          |                  `string[]`                  |             |\n| disabled         | Toggles the `disabled` state                                                                                                                          |                  `boolean`                   |             |\n| errorMessage     | Error text placed under the bottom-start corner that shares space with the note container. Only visible when `validationState` is set to `\"invalid\"`. |              `React.ReactNode`               |             |\n| id               | `id` HTML attribute prefix for inputs. The resulting ID will also contain the `\"-${index}\"` part.                                                     |                   `string`                   |             |\n| length           | Number of input fields.                                                                                                                               |                   `number`                   |     `4`     |\n| mask             | When set to `true`, the input values will be masked as the password field.                                                                            |                  `boolean`                   |             |\n| name             | `name` HTML attribute for input.                                                                                                                      |                   `string`                   |             |\n| form             | The associate form of the underlying input element.                                                                                                   |                   `string`                   |             |\n| note             | An element placed under the bottom-end corner that shares space with the error container.                                                             |              `React.ReactNode`               |             |\n| onUpdate         | Callback fired when any of inputs changes.                                                                                                            |         `(value: string[]) => void`          |             |\n| onUpdateComplete | Callback fired when any of inputs changes and all of them are filled.                                                                                 |         `(value: string[]) => void`          |             |\n| otp              | When set to `true`, adds `autocomplete=\"one-time-code\"` to inputs.                                                                                    |                  `boolean`                   |             |\n| placeholder      | Placeholder for inputs                                                                                                                                |                   `string`                   |             |\n| qa               | `data-qa` HTML attribute used for testing purposes.                                                                                                   |                   `string`                   |             |\n| responsive       | Parent's width distributed evenly between inputs.                                                                                                     |                  `boolean`                   |             |\n| size             | Input field size.                                                                                                                                     |           `\"s\"` `\"m\"` `\"l\"` `\"xl\"`           |    `\"m\"`    |\n| style            | `style` HTML attribute                                                                                                                                |            `React.CSSProperties`             |             |\n| type             | Determines which input value types are allowed.                                                                                                       |         `\"numeric\"` `\"alphanumeric\"`         | `\"numeric\"` |\n| validationState  | Validation state that affects the component appearance.                                                                                               |                 `\"invalid\"`                  |             |\n| value            | Current value for the controlled component.                                                                                                           |                  `string[]`                  |             |\n| `onFocus`        | Callback fired when the component receives focus.                                                                                                     | `(event: React.FocusEvent<Element>) => void` |             |\n| `onBlur`         | Callback fired when the component loses focus.                                                                                                        | `(event: React.FocusEvent<Element>) => void` |             |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}