{"pageProps":{"libId":"uikit","componentId":"button","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Button\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Button} from '@gravity-ui/uikit';\n```\n\nButtons act as a trigger for certain actions. While this is their main purpose, in some very rare cases, they can be used as links to navigate to other pages.\n\n## Appearance\n\nThere are four `Button` types in terms of appearance: basic, outlined, flat, and contrast.\nThe `Button` appearance is determined by the `view` property.\n\n### Basic\n\n`action`: The most distinctive type of `Button`. It is used for the primary action on a screen that requires the most attention.\nWe recommend using only one such button per page.\n\n`normal`: Default type of `Button` designed for secondary actions or to maintain the importance of an action without drawing too much attention to it.\n\n`raised`: Placed above the content as a floating element, usually with a fixed location.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button view=\"action\" size=\"l\">Action</Button>\n<Button view=\"normal\" size=\"l\">Normal</Button>\n<Button view=\"raised\" size=\"l\">Raised</Button>\n`}>\n    <UIKit.Button view=\"action\" size=\"l\">Action</UIKit.Button>\n    <UIKit.Button view=\"normal\" size=\"l\">Normal</UIKit.Button>\n    <UIKit.Button view=\"raised\" size=\"l\">Raised</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"action\" size=\"l\">Action</Button>\n<Button view=\"normal\" size=\"l\">Normal</Button>\n<Button view=\"raised\" size=\"l\">Raised</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Outlined\n\n`outlined`: Used for secondary actions that require less attention. It can be used with or without a main button; in the former case, it must be an emphasized one.\n\n`outlined-action`: Usually used as a link to another page or external resource.\n\nThis type also has semantic variations that can be used when additional semantics are needed: `outlined-info`, `outlined-success`, `outlined-warning`, and `outlined-danger`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button view=\"outlined\" size=\"l\">Outlined</Button>\n<Button view=\"outlined-action\" size=\"l\">Outlined Action</Button>\n<Button view=\"outlined-info\" size=\"l\">Outlined Info</Button>\n<Button view=\"outlined-success\" size=\"l\">Outlined Success</Button>\n<Button view=\"outlined-warning\" size=\"l\">Outlined Warning</Button>\n<Button view=\"outlined-danger\" size=\"l\">Outlined Danger</Button>\n<Button view=\"outlined-utility\" size=\"l\">Outlined Utility</Button>\n`}>\n    <UIKit.Button view=\"outlined\" size=\"l\">Outlined</UIKit.Button>\n    <UIKit.Button view=\"outlined-action\" size=\"l\">Outlined Action</UIKit.Button>\n    <UIKit.Button view=\"outlined-info\" size=\"l\">Outlined Info</UIKit.Button>\n    <UIKit.Button view=\"outlined-success\" size=\"l\">Outlined Success</UIKit.Button>\n    <UIKit.Button view=\"outlined-warning\" size=\"l\">Outlined Warning</UIKit.Button>\n    <UIKit.Button view=\"outlined-danger\" size=\"l\">Outlined Danger</UIKit.Button>\n    <UIKit.Button view=\"outlined-utility\" size=\"l\">Outlined Utility</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"outlined\" size=\"l\">Outlined</Button>\n<Button view=\"outlined-action\" size=\"l\">Outlined Action</Button>\n<Button view=\"outlined-info\" size=\"l\">Outlined Info</Button>\n<Button view=\"outlined-success\" size=\"l\">Outlined Success</Button>\n<Button view=\"outlined-warning\" size=\"l\">Outlined Warning</Button>\n<Button view=\"outlined-danger\" size=\"l\">Outlined Danger</Button>\n<Button view=\"outlined-utility\" size=\"l\">Outlined Utility</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Flat\n\n`flat`: Used for auxiliary actions that require the least attention. It is often used in a list of buttons or action icons (without text) in an editor.\n\n`flat-secondary`: Less emphasized than the `flat` button. It is often used as a secondary button in dialog boxes and modal windows.\n\n`flat-action`: Usually used as a link to another page or external resource.\n\nIt also has semantic variations that can be used where additional semantics are needed: `outlined-info`, `outlined-success`, `outlined-warning`, and `outlined-danger`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button view=\"flat\" size=\"l\">Flat</Button>\n<Button view=\"flat-secondary\" size=\"l\">Flat Secondary</Button>\n<Button view=\"flat-action\" size=\"l\">Flat Action</Button>\n<Button view=\"flat-info\" size=\"l\">Flat Info</Button>\n<Button view=\"flat-success\" size=\"l\">Flat Success</Button>\n<Button view=\"flat-warning\" size=\"l\">Flat Warning</Button>\n<Button view=\"flat-danger\" size=\"l\">Flat Danger</Button>\n<Button view=\"flat-utility\" size=\"l\">Flat Utility</Button>\n`}\n>\n    <UIKit.Button view=\"flat\" size=\"l\">Flat</UIKit.Button>\n    <UIKit.Button view=\"flat-action\" size=\"l\">Flat Action</UIKit.Button>\n    <UIKit.Button view=\"flat-info\" size=\"l\">Flat Info</UIKit.Button>\n    <UIKit.Button view=\"flat-success\" size=\"l\">Flat Success</UIKit.Button>\n    <UIKit.Button view=\"flat-warning\" size=\"l\">Flat Warning</UIKit.Button>\n    <UIKit.Button view=\"flat-danger\" size=\"l\">Flat Danger</UIKit.Button>\n    <UIKit.Button view=\"flat-utility\" size=\"l\">Flat Utility</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"flat\" size=\"l\">Flat</Button>\n<Button view=\"flat-secondary\" size=\"l\">Flat Secondary</Button>\n<Button view=\"flat-action\" size=\"l\">Flat Action</Button>\n<Button view=\"flat-info\" size=\"l\">Flat Info</Button>\n<Button view=\"flat-success\" size=\"l\">Flat Success</Button>\n<Button view=\"flat-warning\" size=\"l\">Flat Warning</Button>\n<Button view=\"flat-danger\" size=\"l\">Flat Danger</Button>\n<Button view=\"flat-utility\" size=\"l\">Flat Utility</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Contrast\n\nThe `normal-contrast`, `outline-contrast`, and `flat-contrast` buttons highlight actions against complex background, e.g., in a banner, or against an inverse background.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    background='rgb(68, 38, 204)'\n    code={`\n<Button view=\"normal-contrast\" size=\"l\">Normal Contrast</Button>\n<Button view=\"outlined-contrast\" size=\"l\">Outlined Contrast</Button>\n<Button view=\"flat-contrast\" size=\"l\">Flat Contrast</Button>\n`}\n>\n    <UIKit.Button view=\"normal-contrast\" size=\"l\">Normal Contrast</UIKit.Button>\n    <UIKit.Button view=\"outlined-contrast\" size=\"l\">Outlined Contrast</UIKit.Button>\n    <UIKit.Button view=\"flat-contrast\" size=\"l\">Flat Contrast</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"normal-contrast\" size=\"l\">Normal Contrast</Button>\n<Button view=\"outlined-contrast\" size=\"l\">Outlined Contrast</Button>\n<Button view=\"flat-contrast\" size=\"l\">Flat Contrast</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Icons\n\nTo add an icon to a `Button`, use the [`Icon`](../Icon) component, which is a special wrapper for SVGs.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n    Start\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    End\n    <Icon data={Gear} size={18} />\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n    Both\n    <Icon data={Gear} size={18} />\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n</Button>\n`}\n>\n    <UIKit.Button view=\"outlined\" size=\"l\">\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n        Start\n    </UIKit.Button>\n    <UIKit.Button view=\"outlined\" size=\"l\">\n        End\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n    </UIKit.Button>\n    <UIKit.Button view=\"outlined\" size=\"l\">\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n        Both\n        <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n    </UIKit.Button>\n    <div style={{display: 'flex', gap: '16px', alignItems: 'center'}}>\n        <span>No text:</span>\n        <UIKit.Button view=\"outlined\" size=\"l\">\n            <UIKit.Icon data={() => (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" fillRule=\"evenodd\" d=\"M7.199 2H8.8a.2.2 0 0 1 .2.2c0 1.808 1.958 2.939 3.524 2.034a.199.199 0 0 1 .271.073l.802 1.388a.199.199 0 0 1-.073.272c-1.566.904-1.566 3.164 0 4.069a.199.199 0 0 1 .073.271l-.802 1.388a.199.199 0 0 1-.271.073C10.958 10.863 9 11.993 9 13.8a.2.2 0 0 1-.199.2H7.2a.199.199 0 0 1-.2-.2c0-1.808-1.958-2.938-3.524-2.034a.199.199 0 0 1-.272-.073l-.8-1.388a.199.199 0 0 1 .072-.271c1.566-.905 1.566-3.165 0-4.07a.199.199 0 0 1-.073-.271l.801-1.388a.199.199 0 0 1 .272-.073C5.042 5.138 7 4.007 7 2.2c0-.11.089-.199.199-.199ZM5.5 2.2c0-.94.76-1.7 1.699-1.7H8.8c.94 0 1.7.76 1.7 1.7a.85.85 0 0 0 1.274.735 1.699 1.699 0 0 1 2.32.622l.802 1.388c.469.813.19 1.851-.622 2.32a.85.85 0 0 0 0 1.472 1.7 1.7 0 0 1 .622 2.32l-.802 1.388a1.699 1.699 0 0 1-2.32.622.85.85 0 0 0-1.274.735c0 .939-.76 1.7-1.699 1.7H7.2a1.7 1.7 0 0 1-1.699-1.7.85.85 0 0 0-1.274-.735 1.698 1.698 0 0 1-2.32-.622l-.802-1.388a1.699 1.699 0 0 1 .622-2.32.85.85 0 0 0 0-1.471 1.699 1.699 0 0 1-.622-2.321l.801-1.388a1.699 1.699 0 0 1 2.32-.622A.85.85 0 0 0 5.5 2.2Zm4 5.8a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" clipRule=\"evenodd\"></path></svg>\n        )} size={18} />\n        </UIKit.Button>\n    </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n    Start\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    End\n    <Icon data={Gear} size={18} />\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    <Icon data={Gear} size={18} />\n    Both\n    <Icon data={Gear} size={18} />\n</Button>\n<Button view=\"outlined\" size=\"l\">\n    No text:\n    <Icon data={Gear} size={18} />\n</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## States\n\nA `Button` can have different states:\n\n`disabled`: When the button is unavailable for some reason.\n\n`loading`: When some asynchronous processes are running in the background.\n\n`selected`: When the user can **Enable** and **Disable** the button.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button size=\"l\" disabled>Disabled</Button>\n<Button size=\"l\" loading>Loading</Button>\n<Button size=\"l\" selected>Selected</Button>\n`}\n>\n    <UIKit.Button size=\"l\" disabled>Disabled</UIKit.Button>\n    <UIKit.Button size=\"l\" loading>Loading</UIKit.Button>\n    <UIKit.Button size=\"l\" selected>Selected</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button size=\"l\" disabled>Disabled</Button>\n<Button size=\"l\" loading>Loading</Button>\n<Button size=\"l\" selected>Selected</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Menu trigger\n\n`Button` automatically changes its appearance when corresponding aria-attributes (`aria-haspopup`, `aria-expanded`) are passed:\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button aria-haspopup=\"menu\" aria-expanded=\"true\">Menu</Button>\n`}\n>\n    <UIKit.Button aria-haspopup=\"menu\" aria-expanded=\"true\">Menu</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button aria-haspopup=\"menu\" aria-expanded=\"true\">\n  Menu\n</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Size\n\nUse the `size` property to manage the `Button` size. The default size is `m`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button size=\"xs\">XS Size</Button>\n<Button size=\"s\">S Size</Button>\n<Button size=\"m\">M Size</Button>\n<Button size=\"l\">L Size</Button>\n<Button size=\"xl\">XL Size</Button>\n`}\n>\n    <UIKit.Button size=\"xs\">XS Size</UIKit.Button>\n    <UIKit.Button size=\"s\">S Size</UIKit.Button>\n    <UIKit.Button size=\"m\">M Size</UIKit.Button>\n    <UIKit.Button size=\"l\">L Size</UIKit.Button>\n    <UIKit.Button size=\"xl\">XL Size</UIKit.Button>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Button size=\"xs\">XS Size</Button>\n<Button size=\"s\">S Size</Button>\n<Button size=\"m\">M Size</Button>\n<Button size=\"l\">L Size</Button>\n<Button size=\"xl\">XL Size</Button>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Width\n\nUse the `width` property to manage the way the `Button` behaves inside the container:\n\n`auto`: Limits the maximum width of the `Button` by hiding the overflowing content with an ellipsis.\n\n`max`: Matches the `Button` width to the width of the parent container, also hiding the overflowing content with an ellipsis.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Button>Default</Button>\n<Button width=\"auto\">Auto</Button>\n<Button width=\"max\">Max</Button>\n`}\n>\n    <div style={{width: 100, border: '2px dashed gray'}}>\n        <h4 style={{textAlign: 'center'}}>Default</h4>\n        <p>\n            <UIKit.Button>Text</UIKit.Button>\n        </p>\n        <p>\n            <UIKit.Button>Very Long Text</UIKit.Button>\n        </p>\n    </div>\n    <div style={{width: 100, border: '2px dashed gray'}}>\n        <h4 style={{textAlign: 'center'}}>Auto</h4>\n        <p>\n            <UIKit.Button width=\"auto\">Text</UIKit.Button>\n        </p>\n        <p>\n            <UIKit.Button width=\"auto\">Very Long Text</UIKit.Button>\n        </p>\n    </div>\n    <div style={{width: 100, border: '2px dashed gray'}}>\n        <h4 style={{textAlign: 'center'}}>Max</h4>\n        <p>\n            <UIKit.Button width=\"max\">Text</UIKit.Button>\n        </p>\n        <p>\n            <UIKit.Button width=\"max\">Very Long Text</UIKit.Button>\n        </p>\n    </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n## Pin\n\nThe `pin` property allows you to manage the shape of the _start_ and _end_ edges and is usually used for combining multiple buttons in a single unit.\nThe `pin` property value consists of the _start_ and _end_ style names separated by a hyphen, e.g., `round-brick`.\nThe edge styles are: `round` (default), `circle`, `brick`, and `clear`.\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<div>\n    <Button view=\"action\" size=\"l\" pin=\"round-clear\">Create</Button>\n    <Button view=\"action\" size=\"l\" pin=\"brick-round\">...</Button>\n</div>\n<div>\n    <Button view=\"normal\" size=\"l\" pin=\"circle-clear\">Start</Button>\n    <Button view=\"normal\" size=\"l\" pin=\"brick-brick\" selected>Center</Button>\n    <Button view=\"normal\" size=\"l\" pin=\"clear-circle\">End</Button>\n</div>\n<div>\n    <Button view=\"outlined\" pin=\"brick-clear\">1</Button>\n    <Button view=\"outlined\" pin=\"clear-clear\">2</Button>\n    <Button view=\"outlined\" pin=\"clear-clear\">3</Button>\n    <Button view=\"outlined\" pin=\"clear-brick\">4</Button>\n</div>\n`}\n>\n    <div>\n        <UIKit.Button view=\"action\" size=\"l\" pin=\"round-clear\">Create</UIKit.Button>\n        <UIKit.Button view=\"action\" size=\"l\" pin=\"brick-round\">...</UIKit.Button>\n    </div>\n    <div>\n        <UIKit.Button view=\"normal\" size=\"l\" pin=\"circle-clear\">Start</UIKit.Button>\n        <UIKit.Button view=\"normal\" size=\"l\" pin=\"brick-brick\" selected>Center</UIKit.Button>\n        <UIKit.Button view=\"normal\" size=\"l\" pin=\"clear-circle\">End</UIKit.Button>\n    </div>\n    <div>\n        <UIKit.Button view=\"outlined\" pin=\"brick-clear\">1</UIKit.Button>\n        <UIKit.Button view=\"outlined\" pin=\"clear-clear\">2</UIKit.Button>\n        <UIKit.Button view=\"outlined\" pin=\"clear-clear\">3</UIKit.Button>\n        <UIKit.Button view=\"outlined\" pin=\"clear-brick\">4</UIKit.Button>\n    </div>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<div>\n    <Button view=\"action\" size=\"l\" pin=\"round-brick\">Create</Button>\n    <Button view=\"action\" size=\"l\" pin=\"brick-round\">...</Button>\n</div>\n<div>\n    <Button view=\"normal\" size=\"l\" pin=\"circle-clear\">Start</Button>\n    <Button view=\"normal\" size=\"l\" pin=\"brick-brick\" selected>Center</Button>\n    <Button view=\"normal\" size=\"l\" pin=\"clear-circle\">End</Button>\n</div>\n<div>\n    <Button view=\"outlined\" pin=\"brick-clear\">1</Button>\n    <Button view=\"outlined\" pin=\"clear-clear\">2</Button>\n    <Button view=\"outlined\" pin=\"clear-clear\">3</Button>\n    <Button view=\"outlined\" pin=\"clear-brick\">4</Button>\n</div>\n```\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n`Button` accepts any valid `button` or `a` element props in addition to these:\n\n| Name      | Description                                                          |              Type               |     Default     |\n| :-------- | :------------------------------------------------------------------- | :-----------------------------: | :-------------: |\n| children  | `Button` content. You can use both text and the `<Icon/>` component. |        `React.ReactNode`        |                 |\n| component | Overrides the root component                                         |       `React.ElementType`       |                 |\n| disabled  | Toggles the `disabled` state                                         |            `boolean`            |     `false`     |\n| href      | Pass this to make the root component a link                          |            `string`             |                 |\n| loading   | Toggles the `loading` state                                          |            `boolean`            |     `false`     |\n| pin       | Sets the `Button` edge style                                         |            `string`             | `\"round-round\"` |\n| qa        | `data-qa` HTML attribute, used for testing                           |            `string`             |                 |\n| selected  | Toggles the `selected` state                                         |            `boolean`            |                 |\n| size      | Sets the`Button` size                                                | `\"xs\"` `\"s\"` `\"m\"` `\"l\"` `\"xl\"` |      `\"m\"`      |\n| view      | Sets the `Button` appearance                                         |          `ButtonView`           |   `\"normal\"`    |\n| width     | Controls how `Button` uses parent's space                            |        `\"auto\"` `\"max\"`         |                 |\n\n## CSS API\n\n| Name                                | Description               |\n| :---------------------------------- | :------------------------ |\n| `--g-button-text-color`             | Text color                |\n| `--g-button-text-color-hover`       | Text color on hover       |\n| `--g-button-background-color`       | Background color          |\n| `--g-button-background-color-hover` | Background color on hover |\n| `--g-button-border-width`           | Border width              |\n| `--g-button-border-color`           | Border color              |\n| `--g-button-border-style`           | Border style              |\n| `--g-button-focus-outline-width`    | Focus outline width       |\n| `--g-button-focus-outline-color`    | Focus outline color       |\n| `--g-button-focus-outline-style`    | Focus outline style       |\n| `--g-button-focus-outline-offset`   | Focus outline offset      |\n| `--g-button-height`                 | Height (line height)      |\n| `--g-button-padding`                | Side paddings             |\n| `--g-button-border-radius`          | Border radius             |\n| `--g-button-font-size`              | Text font size            |\n| `--g-button-icon-space`             | Icon available space      |\n| `--g-button-icon-offset`            | Icon offset               |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}