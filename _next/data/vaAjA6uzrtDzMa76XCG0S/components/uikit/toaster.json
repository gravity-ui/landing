{"pageProps":{"libId":"uikit","componentId":"toaster","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Toaster\n\n<!--/GITHUB_BLOCK-->\n\nThis is a component for adjustable notifications also known as toasts.\n\n## Using Toaster\n\nTo show toasts in your application you need to wrap your application in `ToasterProvider`.\n\n```jsx\nimport {Toaster, ToasterComponent, ToasterProvider} from '@gravity-ui/uikit';\n\nconst toaster = new Toaster();\n\nconst root = ReactDOMClient.createRoot(document.getElementById('root'));\nroot.render(\n  <ToasterProvider toaster={toaster}>\n    <App />\n    <ToasterComponent className=\"optional additional classes\" />\n  </ToasterProvider>,\n);\n```\n\n`toaster` here is the instance of the class, which holds the state with all your toasts and used under the hood in `useToaster` hook and `withToaster` HOC.\n\nBut you can also use `toaster` directly in different parts of your application (outside React):\n\n```js\ntoaster.add({\n  title: 'Toaster is here',\n});\n```\n\nYou must use same instance of `Toaster` in React and outside of it to show all toasts in the same container on the screen.\nYou can implement this logic yourself or import ready-to-use instance from `toaster-singleton` module.\n\n```js\nimport {toaster} from '@gravity-ui/uikit/toaster-singleton';\n```\n\n## Using `useToaster`\n\nYou can show toasts with the `useToaster` hook in your app components:\n\n```jsx\nimport {useToaster} from '@gravity-ui/uikit';\nimport {useEffect} from 'react';\n\nexport function FoobarComponent() {\n  const {add} = useToaster();\n\n  useEffect(() => {\n    add({\n      title: 'Toaster is here',\n    });\n  }, []);\n\n  return null;\n}\n```\n\nThe hook returns the `add`, `update`, `remove`, and `removeAll` methods (see below for details).\n\n## Using `Toaster` as a HOC\n\nFor class components, you can use the `withToaster` HOC, which will inject the `toaster` property into the component.\n\n```jsx\nimport {Component} from 'react';\nimport {withToaster} from '@gravity-ui/uikit';\n\nclass FoobarComponent extends Component {\n  render() {\n    this.props.toaster.add({});\n  }\n}\n\nconst FoobarWithToaster = withToaster()(FoobarComponent);\n```\n\n## Constructor arguments\n\n| Parameter | Type      | Default     | Description                                         |\n| :-------- | :-------- | :---------- | :-------------------------------------------------- |\n| className | `string`  | `undefined` | Custom class name to add to the component container |\n| mobile    | `boolean` | `false`     | Configuration that manages mobile/desktop views     |\n\n## Methods\n\n| Method name                   | Params             | Description                                                                                                                             |\n| :---------------------------- | :----------------- | :-------------------------------------------------------------------------------------------------------------------------------------- |\n| add(toastOptions)             | `Object`           | Creates a new notification                                                                                                              |\n| remove(name)                  | `string`           | Manually deletes an existing notification                                                                                               |\n| removeAll()                   |                    | Deletes all existing notifications                                                                                                      |\n| update(name, overrideOptions) | `string`, `Object` | Changes already rendered notification content. In `overrideOptions`, the `title`, `type`, `content`, and `actions` fields are optional. |\n| has(name)                     | `string`           | Checks for a toast with the certain name in the list of displayed toasts                                                                |\n\n## More on `add`\n\nIt accepts the `toastOptions` argument with the ongoing notification details:\n\n| Parameter  | Type                                    | Required | Default     | Description                                                                                                                                                                                                                                              |\n| :--------- | :-------------------------------------- | :------- | :---------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| name       | `string`                                | yes      |             | Unique notification name. Notifications with identical names are collapsed into one                                                                                                                                                                      |\n| title      | `string`                                |          |             | Notification title                                                                                                                                                                                                                                       |\n| className  | `string`                                |          |             | CSS class                                                                                                                                                                                                                                                |\n| autoHiding | `number` or `false`                     |          | 5000        | Number of ms to delay hiding the notification. Use `false` to disable hiding the toast after timeout                                                                                                                                                     |\n| content    | `node`                                  |          | `undefined` | Notification content. This may be [anything that can be rendered: numbers, strings, elements, or an array](https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes)                                                                          |\n| theme      | `string`                                |          | `\"normal\"`  | Notification theme. The possible values are `\"normal\"`, `\"info\"`, `\"success\"`, `\"warning\"`, `danger`, and `\"utility\"`. If `theme` is set to anything but `\"normal\"`, the icon will be added into the notification title. _By default, there is no icon_. |\n| isClosable | `boolean`                               |          | `true`      | Configuration that manages the visibility of the X icon, which allows the user to close the notification                                                                                                                                                 |\n| actions    | `ToastAction[]`                         |          | `undefined` | Array of [actions](./types.ts#L9) that are displayed after `content`                                                                                                                                                                                     |\n| renderIcon | `(toastProps: ToastProps) => ReactNode` |          | `undefined` | Used to customize the toast icon. Type-based behavior is used by default                                                                                                                                                                                 |\n\nEvery `action` is an object with following parameters:\n\n| Parameter        | Type                                      | Required | Default    | Description                                                              |\n| :--------------- | :---------------------------------------- | :------- | :--------- | :----------------------------------------------------------------------- |\n| label            | `string`                                  | yes      |            | Action description                                                       |\n| onClick          | `() => void`                              | yes      |            | On-action click handler                                                  |\n| view             | [`ButtonView`](../Button/README.md#props) |          | `outlined` | Action appearance, same as `view` for `<Button/>`                        |\n| removeAfterClick | `boolean`                                 |          | `true`     | Enables or disables closing the notification after the action is clicked |\n\n## CSS API\n\n| Name                       | Description     |\n| :------------------------- | :-------------- |\n| `--g-toaster-width`        | Container width |\n| `--g-toaster-item-padding` | Item padding    |\n| `--g-toaster-item-gap`     | Item gap        |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}