{"pageProps":{"libId":"uikit","componentId":"stepper","readmeContent":"<!--GITHUB_BLOCK-->\n\n# Stepper\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {Stepper} from '@gravity-ui/uikit';\n```\n\n`Stepper` convey progress through numbered steps. It provides a wizard-like workflow.Steppers display progress through a sequence of logical and numbered steps.\n\n## Example\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Stepper>\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item>Step 2</Stepper.Item>\n  <Stepper.Item>Step 3</Stepper.Item>\n  <Stepper.Item>Step 4 with very long title</Stepper.Item>\n</Stepper>\n`}\n>\n    <UIKit.Stepper>\n        <UIKit.Stepper.Item>Step 1</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 2</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 3</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 4 with very long title</UIKit.Stepper.Item>\n    </UIKit.Stepper>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Stepper>\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item>Step 2</Stepper.Item>\n  <Stepper.Item>Step 3</Stepper.Item>\n  <Stepper.Item>Step 4 with very long title</Stepper.Item>\n</Stepper>\n```\n\n<!-- Storybook example -->\n\n<StepperDefault />\n\n<!--/GITHUB_BLOCK-->\n\n### Interactive items\n\nUse `onUpdate` and `value` props with custom state to manipulate steps\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n  <Stepper value={0} onUpdate={(id) => alert(id)}>\n    <Stepper.Item>Step 1</Stepper.Item>\n    <Stepper.Item>Step 2</Stepper.Item>\n    <Stepper.Item>Step 3</Stepper.Item>\n    <Stepper.Item>Step 4 with very long title</Stepper.Item>\n  </Stepper>\n`}\n>\n    <UIKit.Stepper value={0} onUpdate={(id) => alert(id)}>\n        <UIKit.Stepper.Item>Step 1</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 2</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 3</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 4 with very long title</UIKit.Stepper.Item>\n    </UIKit.Stepper>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst [value, setValue] = React.useState();\n\nreturn (\n  <Stepper value={value} onUpdate={setValue}>\n    <Stepper.Item>Step 1</Stepper.Item>\n    <Stepper.Item>Step 2</Stepper.Item>\n    <Stepper.Item>Step 3</Stepper.Item>\n    <Stepper.Item>Step 4 with very long title</Stepper.Item>\n  </Stepper>\n);\n```\n\n<!-- Storybook example -->\n\n<StepperInteractiveShowcase />\n\n<!--/GITHUB_BLOCK-->\n\n### Different views\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Stepper>\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item view=\"error\">Step 2</Stepper.Item>\n  <Stepper.Item view=\"error\">Step 3</Stepper.Item>\n  <Stepper.Item view=\"success\">Step 4</Stepper.Item>\n</Stepper>\n`}\n>\n    <UIKit.Stepper>\n        <UIKit.Stepper.Item>Step 1</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item view=\"error\">Step 2</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item view=\"error\">Step 3</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item view=\"success\">Step 4 with very long title</UIKit.Stepper.Item>\n    </UIKit.Stepper>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Stepper>\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item view=\"error\">Step 2</Stepper.Item>\n  <Stepper.Item view=\"error\">Step 3</Stepper.Item>\n  <Stepper.Item view=\"success\">Step 4</Stepper.Item>\n</Stepper>\n```\n\n<!-- Storybook example -->\n\n<StepperView/>\n\n<!--/GITHUB_BLOCK-->\n\n### Different sizes\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Stepper size=\"l\">\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item>Step 2</Stepper.Item>\n  <Stepper.Item>Step 3</Stepper.Item>\n  <Stepper.Item>Step 4</Stepper.Item>\n</Stepper>\n`}\n>\n    <UIKit.Stepper size=\"l\">\n        <UIKit.Stepper.Item>Step 1</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 2</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 3</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 4 with very long title</UIKit.Stepper.Item>\n    </UIKit.Stepper>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Flex direction=\"column\" gap={4}>\n  <Stepper {...args} size=\"s\">\n    <Stepper.Item>Step 1</Stepper.Item>\n    <Stepper.Item>Step 2</Stepper.Item>\n    <Stepper.Item>Step 3</Stepper.Item>\n  </Stepper>\n\n  <Stepper {...args} size=\"m\">\n    <Stepper.Item>Step 1</Stepper.Item>\n    <Stepper.Item>Step 2</Stepper.Item>\n    <Stepper.Item>Step 3</Stepper.Item>\n  </Stepper>\n\n  <Stepper {...args} size=\"l\">\n    <Stepper.Item>Step 1</Stepper.Item>\n    <Stepper.Item>Step 2</Stepper.Item>\n    <Stepper.Item>Step 3</Stepper.Item>\n  </Stepper>\n</Flex>\n```\n\n<!-- Storybook example -->\n\n<StepperSize/>\n\n<!--/GITHUB_BLOCK-->\n\n### Disabled steps\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Stepper>\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item disabled>Step 2</Stepper.Item>\n  <Stepper.Item disabled>Step 3</Stepper.Item>\n  <Stepper.Item disabled>Step 4 with very long title</Stepper.Item>\n</Stepper>\n`}\n>\n    <UIKit.Stepper>\n        <UIKit.Stepper.Item>Step 1</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item disabled>Step 2</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item disabled>Step 3</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item disabled>Step 4 with very long title</UIKit.Stepper.Item>\n    </UIKit.Stepper>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Stepper>\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item disabled>Step 2</Stepper.Item>\n  <Stepper.Item disabled>Step 3</Stepper.Item>\n  <Stepper.Item disabled>Step 4 with very long title</Stepper.Item>\n</Stepper>\n```\n\n<!-- Storybook example -->\n\n<StepperDisabled/>\n\n<!--/GITHUB_BLOCK-->\n\n### Custom icons\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Stepper>\n  <Stepper.Item icon={<Icon data={Gear} />}>Step 1</Stepper.Item>\n  <Stepper.Item icon={<Icon data={Rocket} />}>Step 2</Stepper.Item>\n  <Stepper.Item icon={<Icon data={Cloud} />}>Step 3</Stepper.Item>\n  <Stepper.Item icon={<Icon data={Hammer} />}>Step 4 with very long title</Stepper.Item>\n</Stepper>\n`}\n>\n    <UIKitExamples.StepperCustomIconExample />\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Stepper>\n  <Stepper.Item icon={<Icon data={Gear} />}>Step 1</Stepper.Item>\n  <Stepper.Item view=\"error\" icon={<Icon data={Gear} />}>\n    Step 2\n  </Stepper.Item>\n  <Stepper.Item view=\"success\" icon={<Icon data={Gear} />}>\n    Step 3\n  </Stepper.Item>\n  <Stepper.Item>Step 4 with very long title</Stepper.Item>\n</Stepper>\n```\n\n<!-- Storybook example -->\n\n<StepperCustomIcons/>\n\n<!--/GITHUB_BLOCK-->\n\n### Custom step separator\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Stepper separator=\">\">\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item view=\"error\">Step 2</Stepper.Item>\n  <Stepper.Item view=\"success\">Step 3</Stepper.Item>\n  <Stepper.Item>Step 4 with very long title</Stepper.Item>\n</Stepper>\n`}\n>\n    <UIKit.Stepper separator=\">\">\n        <UIKit.Stepper.Item>Step 1</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item view=\"error\">Step 2</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item view=\"success\">Step 3</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 4 with very long title</UIKit.Stepper.Item>\n    </UIKit.Stepper>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\nconst Separator = () => {\n  return <Text color=\"secondary\">{'->'}</Text>;\n};\n\n<Stepper {...args} separator={<Separator />}>\n  <Stepper.Item>Step 1</Stepper.Item>\n  <Stepper.Item view=\"error\">Step 2</Stepper.Item>\n  <Stepper.Item view=\"success\">Step 3</Stepper.Item>\n  <Stepper.Item>Step 4 with very long title</Stepper.Item>\n</Stepper>;\n```\n\n<!-- Storybook example -->\n\n<StepperCustomSeparator/>\n\n<!--/GITHUB_BLOCK-->\n\n### Step with floating element\n\n<!--LANDING_BLOCK\n\n<ExampleBlock\n    code={`\n<Stepper>\n  <Tooltip content=\"fancy step with tooltip\">\n    <Stepper.Item>Step 1</Stepper.Item>\n  </Tooltip>\n  <Stepper.Item view=\"error\">Step 2</Stepper.Item>\n  <Stepper.Item view=\"success\">Step 3</Stepper.Item>\n  <Stepper.Item>Step 4 with very long title</Stepper.Item>\n</Stepper>\n`}\n>\n    <UIKit.Stepper>\n        <UIKit.Tooltip content=\"fancy step with tooltip\">\n          <UIKit.Stepper.Item>Step 1</UIKit.Stepper.Item>\n        </UIKit.Tooltip>\n        <UIKit.Stepper.Item view=\"error\">Step 2</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item view=\"success\">Step 3</UIKit.Stepper.Item>\n        <UIKit.Stepper.Item>Step 4 with very long title</UIKit.Stepper.Item>\n    </UIKit.Stepper>\n</ExampleBlock>\n\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<Stepper {...args}>\n  <Tooltip content=\"fancy step with tooltip\">\n    <Stepper.Item>Step 1</Stepper.Item>\n  </Tooltip>\n  <Stepper.Item view=\"error\">Step 2</Stepper.Item>\n  <Stepper.Item view=\"success\">Step 3</Stepper.Item>\n  <Stepper.Item>Step 4 with very long title</Stepper.Item>\n</Stepper>\n```\n\n<!-- Storybook example -->\n\n<StepperWithFloatingElements/>\n\n<!--/GITHUB_BLOCK-->\n\n## Properties\n\n| Name             | Description                                               |                  Type                  | Default |\n| :--------------- | :-------------------------------------------------------- | :------------------------------------: | :-----: |\n| children         | Stepper items.                                            | `React.ReactElement<StepperItemProps>` |         |\n| size             | Set the `Step` size.                                      |           `\"s\"` `\"m\"` `\"l\"`            |  `\"s\"`  |\n| value            | Current selected `Step` id.                               |           `number` `string`            |         |\n| onUpdate         | function for change current `Step`.                       |               `Function`               |         |\n| qa               | `data-qa` HTML attribute, used for testing.               |                `string`                |         |\n| separator        | Custom separator node.                                    |           `React.ReactNode`            |         |\n| className        | CSS class name for the Steps container.                   |                `string`                |         |\n| style            | Sets the inline style for the Steps container.            |            `CSSProperties`             |         |\n| aria-label       | Defines a string value that labels the current element.   |                `string`                |         |\n| aria-labelledby  | Identifies the element(s) that label the current element. |                `string`                |         |\n| aria-describedby | Identifies the element(s) that describe the object.       |                `string`                |         |\n\n### StepperItemProps\n\n| Name      | Description                                       |              Type              | Default  |\n| :-------- | :------------------------------------------------ | :----------------------------: | :------: |\n| id        | Set `Step` id. Index of array element as default. |       `string` `number`        |          |\n| view      | Set `Step` view.                                  | `\"idle\"` `\"error\"` `\"success\"` | `\"idle\"` |\n| children  | `Step` content.                                   |          `React.Node`          |          |\n| disabled  | Determines whether `Step` is disable.             |           `boolean`            |          |\n| icon      | Custom icon node.                                 |         `SVGIconData`          |          |\n| onClick   | Step click handler.                               |   `React.MouseEventHandler`    |          |\n| className | CSS class name for the element.                   |            `string`            |          |\n\n### CSS API\n\n| Name                              | Description                           |\n| :-------------------------------- | :------------------------------------ |\n| `--g-stepper-gap`                 | Gap between step items and separator. |\n| `--g-stepper-item-text-max-width` | Step item text max-width.             |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}