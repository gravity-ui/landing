{"pageProps":{"libId":"uikit","componentId":"list","readmeContent":"<!--GITHUB_BLOCK-->\n\n# List\n\n<!--/GITHUB_BLOCK-->\n\n```tsx\nimport {List} from '@gravity-ui/uikit';\n```\n\n### ItemsHeight\n\nDetermines the item list height (or a function that returns the height value for a list). It can be helpful when setting the list height dynamically, e.g., `(items: []) => number`.\n\n### Items\n\nProvides an array of items for a list:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<List items={[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]} itemsHeight={160} />\n`}>\n    <UIKit.List items={[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]} itemsHeight={160} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<List items={['one', 'two', 'three', 'four', 'five', 'six', 'seven']} itemsHeight={160} />\n```\n\n<!--/GITHUB_BLOCK-->\n\nAn item can be a scalar or an arbitrary value and must be `truthy` in any case.\nIf it is an arbitrary value, make sure to specify the filtering and rendering functions.\nThe default render only provides an item as text.\n\nThe special `item.disabled` field disables an item.\n\nThe render and height customization provides plenty of room for experimenting.\nFor example, the code below allows you to emulate groups:\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<List items={[{title: 'one', group: true,disabled: true}, {title: 'two'},\n    {\n      title: 'three',\n      group: true,\n      disabled: true,\n    },\n    {\n      title: 'four',\n    },\n  ]} onItemClick={(value) => console.log(value)}\n  renderItem={(item) => {\n    if (item.group) {\n      return (\n        <div className={'group'}>\n          <div className={'select-text'}>{item.title}</div>\n        </div>\n      );\n    }\n    return (\n      <div className={'select'}>\n        <div className={'select-text'}>{item.title}</div>\n      </div>\n    );\n  }}\n  itemHeight={(item) => (item.group ? 24 : 36)}\n  itemsHeight={160}\n  filterItem={(filter) => (item) => item.title.includes(filter)}\n/>\n`}>\n    <UIKit.List items={[\n    {\n      title: 'one',\n      group: true,\n      disabled: true,\n    },\n    {\n      title: 'two',\n    },\n    {\n      title: 'three',\n      group: true,\n      disabled: true,\n    },\n    {\n      title: 'four',\n    },\n  ]} onItemClick={(value) => console.log(value)}\n  renderItem={(item) => {\n    if (item.group) {\n      return (\n        <div className={'group'}>\n          <div className={'select-text'}>{item.title}</div>\n        </div>\n      );\n    }\n    return (\n      <div className={'select'}>\n        <div className={'select-text'}>{item.title}</div>\n      </div>\n    );\n  }}\n  itemHeight={(item) => (item.group ? 24 : 36)}\n  itemsHeight={160}\n  filterItem={(filter) => (item) => item.title.includes(filter)}\n/>\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<List\n  items={[\n    {\n      title: 'one',\n      group: true,\n      disabled: true,\n    },\n    {\n      title: 'two',\n    },\n    {\n      title: 'three',\n      group: true,\n      disabled: true,\n    },\n    {\n      title: 'four',\n    },\n  ]}\n  onItemClick={(value) => console.log(value)}\n  renderItem={(item) => {\n    if (item.group) {\n      return (\n        <div className={'group'}>\n          <div className={'select-text'}>{item.title}</div>\n        </div>\n      );\n    }\n    return (\n      <div className={'select'}>\n        <div className={'select-text'}>{item.title}</div>\n      </div>\n    );\n  }}\n  itemHeight={(item) => (item.group ? 24 : 36)}\n  itemsHeight={160}\n  filterItem={(filter) => (item) => item.title.includes(filter)}\n/>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Filterable\n\nThe `filterable` property disables the input to search for an item if its value is `false`. Its default value is `true`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<List items={[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]} itemsHeight={160} filterable={false} />\n`}>\n    <UIKit.List items={[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]} itemsHeight={160} filterable={false} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<List\n  items={['one', 'two', 'three', 'four', 'five', 'six', 'seven']}\n  itemsHeight={160}\n  filterable={false}\n/>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Sortable\n\nThe `sortable` property enables swapping list items if its value is `true`. Its default value is `false`.\n\n<!--LANDING_BLOCK\n<ExampleBlock\n    code={`\n<List items={[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]} itemsHeight={160} sortable={true} />\n`}>\n    <UIKit.List items={[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]} itemsHeight={160} sortable={true} />\n</ExampleBlock>\nLANDING_BLOCK-->\n\n<!--GITHUB_BLOCK-->\n\n```tsx\n<List\n  items={['one', 'two', 'three', 'four', 'five', 'six', 'seven']}\n  itemsHeight={160}\n  sortable={true}\n/>\n```\n\n<!--/GITHUB_BLOCK-->\n\n### Virtualization\n\nTo enable virtualization, make sure one of these two conditions is met:\n\n1. You set the `itemsHeight` property. In this case, the list height will be fixed and equal to that value.\n2. You set the `display: flex` style for the list parent container. In this case, the list will adapt to the container width.\n\n### External management\n\nSometimes, you may want to manage the activity of items from the keyboard by maintaining the focus on an external item.\nThe `onKeyDown` event forwarding to a list may help you here.\nLikewise, you can forward `onFocus` and `onBlur` if you need to repeat the behavior when an active item is lost.\n\n### Filter\n\nThe `filter` property provides the filter value used with external sorting.\n\n### PropTypes\n\n| Name              | Description                                                                                                                                                                                                 | Type              | Default |\n| :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :---------------- | :------ |\n| [items](#items)   | List of items                                                                                                                                                                                               | `Array`           | []      |\n| itemHeight        | Item height in `px` or a function that returns the height value for an item: `(item: any) => number`.                                                                                                       | `Number/Function` | 28      |\n| itemsHeight       | Item list height or a function that returns the height value for a list. It can be helpful when setting the list height dynamically: `(items: []) => number`.                                               | `Number/Function` |         |\n| renderItem        | Render function with an item received as an input and a React node returned: `(item: any, isItemActive: bool, itemIndex: number) => React.ReactNode`.                                                       | `Function`        |         |\n| filterItem        | Filtering function that receives a specified string as a search or filter input and returns a function that receives an item as an input and outputs boolean: `(filter: string) => (item: any) => boolean`. | `Function`        |         |\n| filterable        | Flag that enables a filter field.                                                                                                                                                                           | `Boolean`         | true    |\n| filterPlaceholder | Placeholder for a filter field.                                                                                                                                                                             | `String`          |         |\n| filter            | Filter value (in case external sorting is used).                                                                                                                                                            | `String`          |         |\n| filterClassName   | Class for filter input styles.                                                                                                                                                                              | `String`          |         |\n| onChangeFilter    | Filter change handler (in case external sorting is used): `(filter: string) => void`.                                                                                                                       | `Function`        |         |\n| onFilterEnd       | Function invoked after internal filtering is complete: `({items}: {items: T[]}) => void`                                                                                                                    | `Function`        |         |\n| emptyPlaceholder  | Placeholder for an empty list.                                                                                                                                                                              | `React.ReactNode` |         |\n| sortable          | Flag that enables list sorting.                                                                                                                                                                             | `Boolean`         |         |\n| sortHandleAlign   | Sorting indicator alignment (left or right).                                                                                                                                                                | `left` `right`    |         |\n| onSortEnd         | Sorting event handler: `({oldIndex: number, newIndex: number}) => void`.                                                                                                                                    | `Function`        |         |\n| virtualized       | Flag that enables virtualization. If inactive, all items are rendered at once.                                                                                                                              | `Boolean`         | true    |\n| onItemClick       | Item click handler: `(item: any, index: number, fromKeyboard?: bool) => void`.                                                                                                                              | `Function`        |         |\n| deactivateOnLeave | If this flag is set, the item selection is deactivated once the cursor leaves the item or the list loses its focus. If not set, the last selected item will always be selected.                             | `Boolean`         | true    |\n| activeItemIndex   | If a value is set, an item with this index is rendered as active.                                                                                                                                           | `Number`          |         |\n| selectedItemIndex | If a value is set, an item with this index is rendered as selected (the background color is taken from `--g-color-base-selection`).                                                                         | `Number/Array`    |         |\n| itemClassName     | Custom class name to add to an item container.                                                                                                                                                              | `String`          |         |\n| itemsClassName    | Custom class name to add to an item list.                                                                                                                                                                   | `String`          |         |\n| role              | `role` HTML attribute                                                                                                                                                                                       | `String`          | list    |\n| id                | `id` HTML attribute                                                                                                                                                                                         | `string`          |         |\n| onChangeActive    | Fires when the index of an option in the listbox that is visually highlighted as having keyboard focus is changed: `(index?: number) => void`.                                                              | `Function`        |         |\n","_nextI18Next":{"initialI18nStore":{"en":{"common":{"actions_open":"Open","actions_copyToClipboard":"Copy to clipboard","actions_share":"Share","actions_github":"GitHub","actions_storybook":"Storybook","actions_playground":"Playground","menu_libraries":"Libraries","menu_components":"Components","menu_design":"Design","menu_editor":"Editor","menu_icons":"Icons","menu_themer":"Themer","roadmap_inProgress":"In progress","navigation_previous":"Previous","navigation_next":"Next","emptySearchPlaceholder":"Nothing found","show_more":"Show more","show_less":"Show less","pageNotFound":"Page Not Found","pageNotFoundDescription":"The page you are looking for doesn't exist or has been moved.","backToHome":"Back to Home"},"component":{"actions_openInFigma":"Open in Figma","title":"Components","searchPlaceholder":"Search by component name","color-input_validation-format-error":"Incorrect format","maintainers_one":"Maintainer:","maintainers_other":"Maintainers:","maintainers":"Maintainers:","theme":"Switch theme","rtlOn":"Switch RTL on","rtlOff":"Switch RTL off","rtlNotSupported":"RTL not supported"},"libraries-info":{"description_uikit":"Base UI components and tokens for building services with Gravity.","description_components":"A set of complex React components.","description_icons":"Set with hundreds of various modern SVG icons for your projects.","description_illustrations":"A set of illustrations for displaying data statuses.","description_dynamic-forms":"Library for rendering neat and functional react forms described by JSON schema","description_page-constructor":"A set of stylish, functional blocks for quickly creating promo and landing pages.","description_blog-constructor":"A library based on the Page constructor library for creating blog-like services.","description_chartkit":"A data visualization suite integrated with our design system.","description_dashkit":"A grid component for building interactive dashboards.","description_yagr":"A high-performance canvas charts renderer, based on uPlot.","description_nodekit":"A simple toolkit for your Node.js apps, scripts and libraries.","description_expresskit":"Lightweight express.js wrapper that integrates with NodeKit.","description_app-layout":"HTML layout generator used in our SPA applications.","description_app-builder":"Webpack-based static assets builder used in our SPA applications.","description_navigation":"A compact and extensible navigation panel for complex services.","description_date-utils":"Helpers for managing Date and Time values.","description_date-components":"Various date components.","description_axios-wrapper":"Axios wrapper that provides automatic cancelling of concurrent requests.","description_dialog-fields":"A react-final-form wrapper that provides some useful high-level components for building forms.","description_paranoid":"Cluster topologies visualizator.","description_react-data-table":"A react component for rendering big and complex tables.","description_unipika":"Data formatting library.","description_ui-logger":"Simple client-side logger.","description_oauth-clients":"Client OAuth library that provides convenient abstraction on top of auth flow.","description_i18n":"Internationalization helpers of Gravity UI projects.","description_eslint-config":"ESLint configuration preset for Gravity UI projects.","description_tsconfig":"TypeScript compiler configuration preset for Gravity UI projects.","description_prettier-config":"Prettier configuration preset for Gravity UI projects.","description_stylelint-config":"Stylelint configuration preset for Gravity UI projects.","description_babel-preset":"Babel configuration preset for Gravity UI projects.","description_browserslist-config":"Browserslist confugiration preset used in our services.","description_markdown-editor":"A powerful tool for working with Markdown, which combines WYSIWYG and Markup modes.","description_graph":"High-performance graph renderer with dynamic scale-aware detailization","description_data-source":"A wrapper around data fetching.","description_webpack-i18n-assets-plugin":"A plugin for Webpack that replaces calls to localization functions (i18n) with target texts.","description_table":"Library for visualizing data in tabular format."}}},"initialLocale":"en","ns":["common","component","libraries-info"],"userConfig":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"],"default":{"i18n":{"locales":["en","ru","es","zh"],"defaultLocale":"en","defaultNS":"common","ignoreJSONStructure":false},"aiTranslatedLocales":["es","zh"],"routesWithoutRedirect":["/sandbox","/rtl","/__stand"]}}}},"__N_SSG":true}